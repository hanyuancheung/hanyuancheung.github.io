{"meta":{"version":1,"warehouse":"4.0.0"},"models":{"Asset":[{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","path":"fancybox/jquery.fancybox.min.css","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","path":"fancybox/jquery.fancybox.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","path":"js/jquery-3.4.1.min.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","path":"css/fonts/FontAwesome.otf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","path":"css/fonts/fontawesome-webfont.eot","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","path":"css/fonts/fontawesome-webfont.svg","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","path":"css/fonts/fontawesome-webfont.ttf","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","path":"css/fonts/fontawesome-webfont.woff","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","path":"css/fonts/fontawesome-webfont.woff2","modified":0,"renderable":1},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","path":"css/images/banner.jpg","modified":0,"renderable":1},{"_id":"themes/Chic/source/favicon.ico","path":"favicon.ico","modified":0,"renderable":1},{"_id":"themes/Chic/source/css/base.styl","path":"css/base.styl","modified":0,"renderable":1},{"_id":"themes/Chic/source/css/custom.styl","path":"css/custom.styl","modified":0,"renderable":1},{"_id":"themes/Chic/source/css/font.styl","path":"css/font.styl","modified":0,"renderable":1},{"_id":"themes/Chic/source/css/layout.styl","path":"css/layout.styl","modified":0,"renderable":1},{"_id":"themes/Chic/source/css/media.styl","path":"css/media.styl","modified":0,"renderable":1},{"_id":"themes/Chic/source/css/normalize.styl","path":"css/normalize.styl","modified":0,"renderable":1},{"_id":"themes/Chic/source/css/style.styl","path":"css/style.styl","modified":0,"renderable":1},{"_id":"themes/Chic/source/css/variable.styl","path":"css/variable.styl","modified":0,"renderable":1},{"_id":"themes/Chic/source/js/mathjax2.7.5.js","path":"js/mathjax2.7.5.js","modified":0,"renderable":1},{"_id":"themes/Chic/source/js/script.js","path":"js/script.js","modified":0,"renderable":1},{"_id":"themes/Chic/source/js/tocbot.min.js","path":"js/tocbot.min.js","modified":0,"renderable":1},{"_id":"themes/Chic/source/fonts/iconfont/demo.css","path":"fonts/iconfont/demo.css","modified":0,"renderable":1},{"_id":"themes/Chic/source/fonts/iconfont/demo_index.html","path":"fonts/iconfont/demo_index.html","modified":0,"renderable":1},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.css","path":"fonts/iconfont/iconfont.css","modified":0,"renderable":1},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.eot","path":"fonts/iconfont/iconfont.eot","modified":0,"renderable":1},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.js","path":"fonts/iconfont/iconfont.js","modified":0,"renderable":1},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.json","path":"fonts/iconfont/iconfont.json","modified":0,"renderable":1},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.svg","path":"fonts/iconfont/iconfont.svg","modified":0,"renderable":1},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.ttf","path":"fonts/iconfont/iconfont.ttf","modified":0,"renderable":1},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.woff","path":"fonts/iconfont/iconfont.woff","modified":0,"renderable":1},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.woff2","path":"fonts/iconfont/iconfont.woff2","modified":0,"renderable":1},{"_id":"themes/Chic/source/fonts/lanting/lanting.TTF","path":"fonts/lanting/lanting.TTF","modified":0,"renderable":1},{"_id":"themes/Chic/source/fonts/lanting/lanting.eot","path":"fonts/lanting/lanting.eot","modified":0,"renderable":1},{"_id":"themes/Chic/source/fonts/lanting/lanting.otf","path":"fonts/lanting/lanting.otf","modified":0,"renderable":1},{"_id":"themes/Chic/source/fonts/lanting/lanting.woff","path":"fonts/lanting/lanting.woff","modified":0,"renderable":1},{"_id":"themes/Chic/source/fonts/lanting/lanting.woff2","path":"fonts/lanting/lanting.woff2","modified":0,"renderable":1},{"_id":"themes/Chic/source/image/avatar.png","path":"image/avatar.png","modified":0,"renderable":1},{"_id":"source/images/WechatCode.jpg","path":"images/WechatCode.jpg","modified":0,"renderable":0},{"_id":"source/photos/SaaS1.jpg","path":"photos/SaaS1.jpg","modified":0,"renderable":0},{"_id":"source/photos/SaaS2.jpg","path":"photos/SaaS2.jpg","modified":0,"renderable":0},{"_id":"source/photos/pytest-1.png","path":"photos/pytest-1.png","modified":0,"renderable":0},{"_id":"source/photos/pytest-2.png","path":"photos/pytest-2.png","modified":0,"renderable":0},{"_id":"source/photos/pytest-5.png","path":"photos/pytest-5.png","modified":0,"renderable":0},{"_id":"source/photos/pytest-4.png","path":"photos/pytest-4.png","modified":0,"renderable":0},{"_id":"source/photos/pytest-3.png","path":"photos/pytest-3.png","modified":0,"renderable":0},{"_id":"source/photos/pytest-6.png","path":"photos/pytest-6.png","modified":0,"renderable":0},{"_id":"source/photos/friend4.jpg","path":"photos/friend4.jpg","modified":0,"renderable":0},{"_id":"source/photos/tcl.jpg","path":"photos/tcl.jpg","modified":0,"renderable":0},{"_id":"source/photos/missuri.jpg","path":"photos/missuri.jpg","modified":0,"renderable":0},{"_id":"source/photos/company2.jpg","path":"photos/company2.jpg","modified":0,"renderable":0},{"_id":"source/photos/company4.jpg","path":"photos/company4.jpg","modified":0,"renderable":0},{"_id":"source/photos/company1.jpg","path":"photos/company1.jpg","modified":0,"renderable":0},{"_id":"source/photos/company5.jpg","path":"photos/company5.jpg","modified":0,"renderable":0},{"_id":"source/photos/company3.jpg","path":"photos/company3.jpg","modified":0,"renderable":0},{"_id":"source/photos/friend2.jpg","path":"photos/friend2.jpg","modified":0,"renderable":0},{"_id":"source/photos/friend1.jpg","path":"photos/friend1.jpg","modified":0,"renderable":0},{"_id":"source/photos/friend3.jpg","path":"photos/friend3.jpg","modified":0,"renderable":0},{"_id":"source/photos/friend5.jpg","path":"photos/friend5.jpg","modified":0,"renderable":0},{"_id":"source/photos/friend7.jpg","path":"photos/friend7.jpg","modified":0,"renderable":0},{"_id":"source/photos/friend6.jpg","path":"photos/friend6.jpg","modified":0,"renderable":0},{"_id":"source/photos/didi.jpg","path":"photos/didi.jpg","modified":0,"renderable":0},{"_id":"source/photos/horizon2020.jpg","path":"photos/horizon2020.jpg","modified":0,"renderable":0},{"_id":"source/photos/certifi.jpg","path":"photos/certifi.jpg","modified":0,"renderable":0},{"_id":"source/photos/shangtang.png","path":"photos/shangtang.png","modified":0,"renderable":0},{"_id":"source/photos/certifi2.jpg","path":"photos/certifi2.jpg","modified":0,"renderable":0},{"_id":"source/photos/OS-1.png","path":"photos/OS-1.png","modified":0,"renderable":0},{"_id":"source/photos/OS-2.png","path":"photos/OS-2.png","modified":0,"renderable":0},{"_id":"source/photos/OS-6.png","path":"photos/OS-6.png","modified":0,"renderable":0},{"_id":"source/photos/OS-7.png","path":"photos/OS-7.png","modified":0,"renderable":0},{"_id":"source/photos/OS-4.png","path":"photos/OS-4.png","modified":0,"renderable":0},{"_id":"source/photos/OS-5.png","path":"photos/OS-5.png","modified":0,"renderable":0},{"_id":"source/photos/OS-8.png","path":"photos/OS-8.png","modified":0,"renderable":0},{"_id":"source/photos/OS-9.png","path":"photos/OS-9.png","modified":0,"renderable":0},{"_id":"source/photos/OS-10.png","path":"photos/OS-10.png","modified":0,"renderable":0},{"_id":"source/photos/OS-11.png","path":"photos/OS-11.png","modified":0,"renderable":0},{"_id":"source/photos/OS-12.png","path":"photos/OS-12.png","modified":0,"renderable":0},{"_id":"source/photos/OS-3.png","path":"photos/OS-3.png","modified":0,"renderable":0},{"_id":"source/photos/2019-10-4-1.jpg","path":"photos/2019-10-4-1.jpg","modified":0,"renderable":0},{"_id":"source/photos/2019-10-4-2.jpg","path":"photos/2019-10-4-2.jpg","modified":0,"renderable":0},{"_id":"source/photos/2019-10-4-3.jpg","path":"photos/2019-10-4-3.jpg","modified":0,"renderable":0},{"_id":"source/photos/2019-10-4-4.jpg","path":"photos/2019-10-4-4.jpg","modified":0,"renderable":0},{"_id":"source/photos/2019-10-4-5.jpg","path":"photos/2019-10-4-5.jpg","modified":0,"renderable":0},{"_id":"source/photos/2019-8-23-0.jpg","path":"photos/2019-8-23-0.jpg","modified":0,"renderable":0},{"_id":"source/photos/2019-8-23-1.png","path":"photos/2019-8-23-1.png","modified":0,"renderable":0},{"_id":"source/photos/2019-8-23-2.png","path":"photos/2019-8-23-2.png","modified":0,"renderable":0},{"_id":"source/photos/2019-8-23-3.png","path":"photos/2019-8-23-3.png","modified":0,"renderable":0},{"_id":"source/photos/2019-8-23-4.png","path":"photos/2019-8-23-4.png","modified":0,"renderable":0},{"_id":"source/photos/2019-8-23-5.png","path":"photos/2019-8-23-5.png","modified":0,"renderable":0},{"_id":"source/photos/2019-8-23-6.png","path":"photos/2019-8-23-6.png","modified":0,"renderable":0},{"_id":"source/photos/2019-8-23-7.png","path":"photos/2019-8-23-7.png","modified":0,"renderable":0},{"_id":"source/photos/2019-8-23-8.png","path":"photos/2019-8-23-8.png","modified":0,"renderable":0},{"_id":"source/photos/2019-8-23-9.png","path":"photos/2019-8-23-9.png","modified":0,"renderable":0},{"_id":"source/photos/2019-8-23-11.png","path":"photos/2019-8-23-11.png","modified":0,"renderable":0},{"_id":"source/photos/2019-8-23-10.png","path":"photos/2019-8-23-10.png","modified":0,"renderable":0},{"_id":"source/photos/2019-8-23-12.png","path":"photos/2019-8-23-12.png","modified":0,"renderable":0},{"_id":"source/photos/2019-8-23-13.png","path":"photos/2019-8-23-13.png","modified":0,"renderable":0},{"_id":"source/photos/2019-8-23-14.png","path":"photos/2019-8-23-14.png","modified":0,"renderable":0},{"_id":"source/photos/2019movie1.mp4","path":"photos/2019movie1.mp4","modified":0,"renderable":0},{"_id":"source/photos/2019movie2.mp4","path":"photos/2019movie2.mp4","modified":0,"renderable":0},{"_id":"source/photos/2019movie5.mp4","path":"photos/2019movie5.mp4","modified":0,"renderable":0},{"_id":"source/photos/2019movie4.mp4","path":"photos/2019movie4.mp4","modified":0,"renderable":0},{"_id":"source/photos/2019movie3.mp4","path":"photos/2019movie3.mp4","modified":0,"renderable":0},{"_id":"source/photos/2019movie7.mp4","path":"photos/2019movie7.mp4","modified":0,"renderable":0},{"_id":"source/photos/2019movie6.mp4","path":"photos/2019movie6.mp4","modified":0,"renderable":0},{"_id":"source/photos/2019movie8.mp4","path":"photos/2019movie8.mp4","modified":0,"renderable":0},{"_id":"source/photos/togaf.jpg","path":"photos/togaf.jpg","modified":1,"renderable":0}],"Cache":[{"_id":"source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1641655075681},{"_id":"node_modules/hexo-theme-landscape/package.json","hash":"b74fb97bc3cf4ba9b228b1d7b69907aace377460","modified":1641655074328},{"_id":"node_modules/hexo-theme-landscape/README.md","hash":"d2772ece6d4422ccdaa0359c3e07588834044052","modified":1641655074327},{"_id":"node_modules/hexo-theme-landscape/_config.yml","hash":"b608c1f1322760dce9805285a602a95832730a2e","modified":1641655074328},{"_id":"node_modules/hexo-theme-landscape/LICENSE","hash":"c480fce396b23997ee23cc535518ffaaf7f458f8","modified":1641655074291},{"_id":"node_modules/hexo-theme-landscape/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1641655074322},{"_id":"node_modules/hexo-theme-landscape/languages/en.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1641655074323},{"_id":"node_modules/hexo-theme-landscape/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1641655074320},{"_id":"node_modules/hexo-theme-landscape/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1641655074324},{"_id":"node_modules/hexo-theme-landscape/languages/it.yml","hash":"89b7d91306b2c1a0f3ac023b657bf974f798a1e8","modified":1641655074322},{"_id":"node_modules/hexo-theme-landscape/languages/hu.yml","hash":"284d557130bf54a74e7dcef9d42096130e4d9550","modified":1641655074321},{"_id":"node_modules/hexo-theme-landscape/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1641655074323},{"_id":"node_modules/hexo-theme-landscape/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1641655074320},{"_id":"node_modules/hexo-theme-landscape/languages/mn.yml","hash":"2e7523951072a9403ead3840ad823edd1084c116","modified":1641655074320},{"_id":"node_modules/hexo-theme-landscape/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1641655074327},{"_id":"node_modules/hexo-theme-landscape/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1641655074326},{"_id":"node_modules/hexo-theme-landscape/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1641655074321},{"_id":"node_modules/hexo-theme-landscape/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1641655074324},{"_id":"node_modules/hexo-theme-landscape/languages/tr.yml","hash":"a1cdbfa17682d7a971de8ab8588bf57c74224b5b","modified":1641655074325},{"_id":"node_modules/hexo-theme-landscape/languages/zh-CN.yml","hash":"1efd95774f401c80193eac6ee3f1794bfe93dc5a","modified":1641655074326},{"_id":"node_modules/hexo-theme-landscape/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1641655074325},{"_id":"node_modules/hexo-theme-landscape/layout/archive.ejs","hash":"2703b07cc8ac64ae46d1d263f4653013c7e1666b","modified":1641655074294},{"_id":"node_modules/hexo-theme-landscape/layout/category.ejs","hash":"765426a9c8236828dc34759e604cc2c52292835a","modified":1641655074292},{"_id":"node_modules/hexo-theme-landscape/layout/index.ejs","hash":"aa1b4456907bdb43e629be3931547e2d29ac58c8","modified":1641655074293},{"_id":"node_modules/hexo-theme-landscape/layout/layout.ejs","hash":"0d1765036e4874500e68256fedb7470e96eeb6ee","modified":1641655074295},{"_id":"node_modules/hexo-theme-landscape/layout/page.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1641655074302},{"_id":"node_modules/hexo-theme-landscape/layout/post.ejs","hash":"7d80e4e36b14d30a7cd2ac1f61376d9ebf264e8b","modified":1641655074293},{"_id":"node_modules/hexo-theme-landscape/scripts/fancybox.js","hash":"c857d7a5e4a5d71c743a009c5932bf84229db428","modified":1641655074329},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/after-footer.ejs","hash":"414914ebb159fac1922b056b905e570ac7521925","modified":1641655074300},{"_id":"node_modules/hexo-theme-landscape/layout/tag.ejs","hash":"eaa7b4ccb2ca7befb90142e4e68995fb1ea68b2e","modified":1641655074294},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive.ejs","hash":"7cb70a7a54f8c7ae49b10d1f37c0a9b74eab8826","modified":1641655074298},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/archive-post.ejs","hash":"c7a71425a946d05414c069ec91811b5c09a92c47","modified":1641655074298},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/article.ejs","hash":"dfd555c00e85ffc4207c88968d12b219c1f086ec","modified":1641655074301},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/footer.ejs","hash":"3656eb692254346671abc03cb3ba1459829e0dce","modified":1641655074301},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/gauges-analytics.ejs","hash":"21a1e2a3907d1a3dad1cd0ab855fe6735f233c74","modified":1641655074299},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/google-analytics.ejs","hash":"2ea7442ea1e1a8ab4e41e26c563f58413b59a3d0","modified":1641655074299},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/sidebar.ejs","hash":"930da35cc2d447a92e5ee8f835735e6fd2232469","modified":1641655074302},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/head.ejs","hash":"f215d92a882247a7cc5ea80b241bedfcec0ea6ca","modified":1641655074300},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/archive.ejs","hash":"beb4a86fcc82a9bdda9289b59db5a1988918bec3","modified":1641655074304},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/mobile-nav.ejs","hash":"e952a532dfc583930a666b9d4479c32d4a84b44e","modified":1641655074301},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/header.ejs","hash":"c1acd247e14588cdf101a69460cb8319c18cd078","modified":1641655074299},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/category.ejs","hash":"dd1e5af3c6af3f5d6c85dfd5ca1766faed6a0b05","modified":1641655074303},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tagcloud.ejs","hash":"b4a2079101643f63993dcdb32925c9b071763b46","modified":1641655074303},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/tag.ejs","hash":"2de380865df9ab5f577f7d3bcadf44261eb5faae","modified":1641655074304},{"_id":"node_modules/hexo-theme-landscape/layout/_widget/recent_posts.ejs","hash":"60c4b012dcc656438ff59997e60367e5a21ab746","modified":1641655074304},{"_id":"node_modules/hexo-theme-landscape/source/css/_extend.styl","hash":"222fbe6d222531d61c1ef0f868c90f747b1c2ced","modified":1641655074317},{"_id":"node_modules/hexo-theme-landscape/source/css/style.styl","hash":"9c451e5efd72c5bb8b56e8c2b94be731e99db05b","modified":1641655074313},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1641655074305},{"_id":"node_modules/hexo-theme-landscape/source/css/_variables.styl","hash":"581b0cbefdaa5f894922133989dd2d3bf71ded79","modified":1641655074309},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/category.ejs","hash":"c6bcd0e04271ffca81da25bcff5adf3d46f02fc0","modified":1641655074295},{"_id":"node_modules/hexo-theme-landscape/source/js/script.js","hash":"998ed4c5b147e1299bf62beebf33514474f28112","modified":1641655074319},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/date.ejs","hash":"f1458584b679545830b75bef2526e2f3eb931045","modified":1641655074297},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/gallery.ejs","hash":"3d9d81a3c693ff2378ef06ddb6810254e509de5b","modified":1641655074297},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/nav.ejs","hash":"16a904de7bceccbb36b4267565f2215704db2880","modified":1641655074296},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/tag.ejs","hash":"2fcb0bf9c8847a644167a27824c9bb19ac74dd14","modified":1641655074297},{"_id":"node_modules/hexo-theme-landscape/layout/_partial/post/title.ejs","hash":"4d7e62574ddf46de9b41605fe3140d77b5ddb26d","modified":1641655074296},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/archive.styl","hash":"db15f5677dc68f1730e82190bab69c24611ca292","modified":1641655074311},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/article.styl","hash":"80759482d07063c091e940f964a1cf6693d3d406","modified":1641655074309},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/comment.styl","hash":"79d280d8d203abb3bd933ca9b8e38c78ec684987","modified":1641655074312},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/footer.styl","hash":"e35a060b8512031048919709a8e7b1ec0e40bc1b","modified":1641655074310},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/header.styl","hash":"85ab11e082f4dd86dde72bed653d57ec5381f30c","modified":1641655074311},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/highlight.styl","hash":"bf4e7be1968dad495b04e83c95eac14c4d0ad7c0","modified":1641655074310},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/mobile.styl","hash":"a399cf9e1e1cec3e4269066e2948d7ae5854d745","modified":1641655074312},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-bottom.styl","hash":"8fd4f30d319542babfd31f087ddbac550f000a8a","modified":1641655074310},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar-aside.styl","hash":"890349df5145abf46ce7712010c89237900b3713","modified":1641655074312},{"_id":"node_modules/hexo-theme-landscape/source/css/_partial/sidebar.styl","hash":"404ec059dc674a48b9ab89cd83f258dec4dcb24d","modified":1641655074311},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/grid.styl","hash":"0bf55ee5d09f193e249083602ac5fcdb1e571aed","modified":1641655074307},{"_id":"node_modules/hexo-theme-landscape/source/css/_util/mixin.styl","hash":"44f32767d9fd3c1c08a60d91f181ee53c8f0dbb3","modified":1641655074308},{"_id":"node_modules/hexo-theme-landscape/source/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1641655074306},{"_id":"node_modules/hexo-theme-landscape/source/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1641655074318},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1641655074316},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1641655074315},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1641655074317},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1641655074314},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1641655074316},{"_id":"node_modules/hexo-theme-landscape/source/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1641655074308},{"_id":"node_modules/hexo-theme-landscape/source/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1641655074314},{"_id":"public/2022/01/08/hello-world/index.html","hash":"8d6c1717b97ff376ae3c58224066c0a65a616a6a","modified":1641655552626},{"_id":"public/index.html","hash":"30a0911e50643335c8185cdfcb1456ed90956620","modified":1641661650002},{"_id":"public/archives/index.html","hash":"69865cb244fca7d470a4db160d50b822ea9e2c91","modified":1641661650002},{"_id":"public/archives/2022/index.html","hash":"154e04cfb7828d85f0003e4c3825d9ce862f6bd7","modified":1641655552626},{"_id":"public/archives/2022/01/index.html","hash":"fd46f9177d010d2499e72b972a87a17e83b84b11","modified":1641655552626},{"_id":"public/css/fonts/fontawesome-webfont.woff2","hash":"d6f48cba7d076fb6f2fd6ba993a75b9dc1ecbf0c","modified":1641655184719},{"_id":"public/css/fonts/fontawesome-webfont.woff","hash":"28b782240b3e76db824e12c02754a9731a167527","modified":1641655184719},{"_id":"public/css/fonts/FontAwesome.otf","hash":"048707bc52ac4b6563aaa383bfe8660a0ddc908c","modified":1641655184719},{"_id":"public/css/fonts/fontawesome-webfont.eot","hash":"d980c2ce873dc43af460d4d572d441304499f400","modified":1641655184719},{"_id":"public/css/fonts/fontawesome-webfont.ttf","hash":"13b1eab65a983c7a73bc7997c479d66943f7c6cb","modified":1641655184719},{"_id":"public/css/style.css","hash":"a348e7b97835a4865d295c4f9c863a55f6f99d72","modified":1641655552626},{"_id":"public/fancybox/jquery.fancybox.min.css","hash":"1be9b79be02a1cfc5d96c4a5e0feb8f472babd95","modified":1641655184719},{"_id":"public/js/script.js","hash":"ee0a12f2a33e71ee368d5a00270ef443cfc16d27","modified":1641655552626},{"_id":"public/css/images/banner.jpg","hash":"f44aa591089fcb3ec79770a1e102fd3289a7c6a6","modified":1641655184719},{"_id":"public/fancybox/jquery.fancybox.min.js","hash":"6181412e73966696d08e1e5b1243a572d0f22ba6","modified":1641655184719},{"_id":"public/js/jquery-3.4.1.min.js","hash":"88523924351bac0b5d560fe0c5781e2556e7693d","modified":1641655184719},{"_id":"public/css/fonts/fontawesome-webfont.svg","hash":"98a8aa5cf7d62c2eff5f07ede8d844b874ef06ed","modified":1641655184719},{"_id":"themes/Chic/ChangeLogs.md","hash":"06653c18d7a861f784269c9fe9dd69aa72b0c242","modified":1641655456687},{"_id":"themes/Chic/LICENSE.md","hash":"9911bdafa287bd65a822f84cc12012980bd10247","modified":1641655456687},{"_id":"themes/Chic/README-CN.md","hash":"af0765f26b72d49f1b29afe1a9d0c4a492912aaa","modified":1641655456687},{"_id":"themes/Chic/README.md","hash":"e0bd27664e1d0b4ed1c8101d2bf69886c66c31d9","modified":1641655456688},{"_id":"themes/Chic/_config.yml","hash":"4c97fb898d4f52131dc410697ff4522bd40dcd0e","modified":1641661427887},{"_id":"themes/Chic/package.json","hash":"8b4072879307eed0e74ae35390825c5e03b9229c","modified":1641655456691},{"_id":"themes/Chic/languages/de.yml","hash":"3ebf0775abbee928c8d7bda943c191d166ded0d3","modified":1641655456688},{"_id":"themes/Chic/languages/default.yml","hash":"3083f319b352d21d80fc5e20113ddf27889c9d11","modified":1641655456688},{"_id":"themes/Chic/languages/es.yml","hash":"76edb1171b86532ef12cfd15f5f2c1ac3949f061","modified":1641655456688},{"_id":"themes/Chic/languages/fr.yml","hash":"415e1c580ced8e4ce20b3b0aeedc3610341c76fb","modified":1641655456688},{"_id":"themes/Chic/languages/ja.yml","hash":"a73e1b9c80fd6e930e2628b393bfe3fb716a21a9","modified":1641655456688},{"_id":"themes/Chic/languages/ko.yml","hash":"881d6a0a101706e0452af81c580218e0bfddd9cf","modified":1641655456688},{"_id":"themes/Chic/languages/nl.yml","hash":"12ed59faba1fc4e8cdd1d42ab55ef518dde8039c","modified":1641655456688},{"_id":"themes/Chic/languages/no.yml","hash":"965a171e70347215ec726952e63f5b47930931ef","modified":1641655456688},{"_id":"themes/Chic/languages/pt.yml","hash":"57d07b75d434fbfc33b0ddb543021cb5f53318a8","modified":1641655456689},{"_id":"themes/Chic/languages/ru.yml","hash":"4fda301bbd8b39f2c714e2c934eccc4b27c0a2b0","modified":1641655456689},{"_id":"themes/Chic/languages/zh-CN.yml","hash":"ca40697097ab0b3672a80b455d3f4081292d1eed","modified":1641655456689},{"_id":"themes/Chic/languages/zh-TW.yml","hash":"53ce3000c5f767759c7d2c4efcaa9049788599c3","modified":1641655456689},{"_id":"themes/Chic/layout/archive.ejs","hash":"48cdf67b628eb6a1c24d484ed252f5b0e3f06ddf","modified":1641655456691},{"_id":"themes/Chic/layout/category.ejs","hash":"cae7483c92ff639f74f8efe67959f37c97350800","modified":1641655456691},{"_id":"themes/Chic/layout/index.ejs","hash":"b3344720176ad12dc88745cc5b31d497356ca4fa","modified":1641655456691},{"_id":"themes/Chic/layout/layout.ejs","hash":"8565bbea5e904e75e8d1ff5186b3a53650a7fa70","modified":1641655456691},{"_id":"themes/Chic/layout/page.ejs","hash":"3179c527694a789760742e1923c7ac5f94b4997c","modified":1641655456691},{"_id":"themes/Chic/layout/post.ejs","hash":"a23f83d6c559ce88588472267468a54488d50e8e","modified":1641655456691},{"_id":"themes/Chic/layout/tag.ejs","hash":"d85ca78392be138b1589499cba95186b20c3a902","modified":1641655456691},{"_id":"themes/Chic/scripts/imageTag.js","hash":"4b69804c1e4bf638eda7022499c440ce24e28587","modified":1641655456691},{"_id":"themes/Chic/source/favicon.ico","hash":"cc7a0bc496a5ab0bd5c7a07620e8377f0de0ae46","modified":1641657356655},{"_id":"themes/Chic/layout/_page/archive.ejs","hash":"464549286c92ea0d6cb057c6936e0f1a5d1c1dd2","modified":1641655456689},{"_id":"themes/Chic/layout/_page/category.ejs","hash":"e8464e11d08a711fe815ea1cd101aa41d7310ebf","modified":1641655456689},{"_id":"themes/Chic/layout/_page/page.ejs","hash":"1d875d59cf4d6b681cc8cf755f19b5355e5d1144","modified":1641655456689},{"_id":"themes/Chic/layout/_page/post.ejs","hash":"6eb9cd3ee904e99ff78509298ae31a29fdbf49cf","modified":1641655456689},{"_id":"themes/Chic/layout/_page/profile.ejs","hash":"c6d3cf2ef90e5d0fd580e7cff1db47c28fb36037","modified":1641655456690},{"_id":"themes/Chic/layout/_page/tag.ejs","hash":"0c20ff00532103f9a59639ca9956fc0bce4aabc2","modified":1641655456690},{"_id":"themes/Chic/layout/_partial/footer.ejs","hash":"e1c332fab0d6cd713e36d46ccc14d0991067ba40","modified":1641655456690},{"_id":"themes/Chic/layout/_partial/head.ejs","hash":"8c8a2d95e0858cf0be9bf60d0ddf26876e1d9d35","modified":1641655456690},{"_id":"themes/Chic/layout/_partial/header.ejs","hash":"8f1e5272a4de96a3ed94de1db988b05b34515463","modified":1641655456690},{"_id":"themes/Chic/layout/_partial/paginator.ejs","hash":"ab59d5db77f2aa64dfe03656e72fd49702c62e23","modified":1641655456690},{"_id":"themes/Chic/layout/_partial/toc.ejs","hash":"10bb9c303c948f5615149981cd85cbbd3e7c781c","modified":1641655456690},{"_id":"themes/Chic/layout/_plugins/mathjax.ejs","hash":"53f088fe44d51c4d9fb61aeac4c23b3cfcc19762","modified":1641655456690},{"_id":"themes/Chic/source/css/base.styl","hash":"72aef06d738853f13f1697b091002d6d776bd56d","modified":1641655456712},{"_id":"themes/Chic/source/css/custom.styl","hash":"bf8dee1a094b104d87a53b43f6daa7ba43b67574","modified":1641655456712},{"_id":"themes/Chic/source/css/font.styl","hash":"8c1da30e223c0a3d7ef452abc9f0e4cc71dbc140","modified":1641655456712},{"_id":"themes/Chic/source/css/layout.styl","hash":"9942d05bb2c55cf035d4bf9af325e1e81766a510","modified":1641655456712},{"_id":"themes/Chic/source/css/media.styl","hash":"f96c0dbb9653667906a6dc271f637543ac5c7212","modified":1641655456713},{"_id":"themes/Chic/source/css/normalize.styl","hash":"b3337320133b7a336db7033aa6bbe94b054c0b21","modified":1641655456713},{"_id":"themes/Chic/source/css/style.styl","hash":"a13f2c38070a89b06a2ede599f5ce5fd160e11c9","modified":1641655456713},{"_id":"themes/Chic/source/css/variable.styl","hash":"906faa95457eba70118a0705e13b8f43409e502f","modified":1641655456713},{"_id":"themes/Chic/source/image/avatar.jpeg","hash":"5d46dc78e55390dfab0149798249bf655dd03fca","modified":1641655456793},{"_id":"themes/Chic/source/js/script.js","hash":"ee0a12f2a33e71ee368d5a00270ef443cfc16d27","modified":1641655456794},{"_id":"themes/Chic/source/js/mathjax2.7.5.js","hash":"7ba18c783d543cfb4b45a0118ccb73d3f68cd46e","modified":1641655456793},{"_id":"themes/Chic/source/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1641655456794},{"_id":"themes/Chic/source/css/_highlight/agate.styl","hash":"53027913ed8d4f75ac3e49e76aad824f0df62da3","modified":1641655456692},{"_id":"themes/Chic/source/css/_highlight/arduino-light.styl","hash":"15e8572585cd708221c513dea4bdd89d8fe56c10","modified":1641655456696},{"_id":"themes/Chic/source/css/_highlight/androidstudio.styl","hash":"2af0861725f97f0ee2ded67c3d2d4548c62b2d16","modified":1641655456696},{"_id":"themes/Chic/source/css/_highlight/arta.styl","hash":"b3e81e3e694ceb8deed178adb8b91013c5120e30","modified":1641655456696},{"_id":"themes/Chic/source/css/_highlight/ascetic.styl","hash":"32cff3bef6fac3760fe78f203096477052a90552","modified":1641655456697},{"_id":"themes/Chic/source/css/_highlight/atelier-cave-dark.styl","hash":"ce63dd8548688d88254405eedfa75b1d7c82449e","modified":1641655456697},{"_id":"themes/Chic/source/css/_highlight/atelier-cave-light.styl","hash":"a5be0744a7ecf4a08f600ade4cfd555afc67bc15","modified":1641655456697},{"_id":"themes/Chic/source/css/_highlight/atelier-dune-dark.styl","hash":"c196ff0ee064af0e507823694ae39020addfc280","modified":1641655456697},{"_id":"themes/Chic/source/css/_highlight/atelier-dune-light.styl","hash":"931435fbc6f974e8ce9e32722680035d248a9dc1","modified":1641655456697},{"_id":"themes/Chic/source/css/_highlight/atelier-forest-dark.styl","hash":"effbc5d75fa87203c847039869c22031b40d5b7d","modified":1641655456698},{"_id":"themes/Chic/source/css/_highlight/atelier-estuary-dark.styl","hash":"0bb16a4eff93688f40787abc2f9e56e7d5cc93e7","modified":1641655456698},{"_id":"themes/Chic/source/css/_highlight/atelier-estuary-light.styl","hash":"344276ca9b27e51d4c907f76afe5d13cf8e60bdf","modified":1641655456698},{"_id":"themes/Chic/source/css/_highlight/atelier-forest-light.styl","hash":"95228d9f2102fad425536aac44b80b2cba1f5950","modified":1641655456698},{"_id":"themes/Chic/source/css/_highlight/atelier-heath-dark.styl","hash":"9a2e9a1d0a01bbdf158560c3ed1c134e098b2c68","modified":1641655456698},{"_id":"themes/Chic/source/css/_highlight/atelier-heath-light.styl","hash":"8c8c2e445abef85273be966d59770e9ced6aac21","modified":1641655456698},{"_id":"themes/Chic/source/css/_highlight/atelier-lakeside-dark.styl","hash":"10ee3882fca7b97a37bd309d2d35fce9868647bb","modified":1641655456698},{"_id":"themes/Chic/source/css/_highlight/atelier-lakeside-light.styl","hash":"2c54cb9bdb259ae3b5b29f63ac2469ed34b08578","modified":1641655456698},{"_id":"themes/Chic/source/css/_highlight/atelier-plateau-dark.styl","hash":"84c80e6f67f62fce958d25817c277d2360272617","modified":1641655456698},{"_id":"themes/Chic/source/css/_highlight/atelier-plateau-light.styl","hash":"d1a05fdd1ededc9063d181ab25bad55a164aeb4a","modified":1641655456699},{"_id":"themes/Chic/source/css/_highlight/atelier-savanna-dark.styl","hash":"e32c1c70def8060fce5e790979a126da650ac642","modified":1641655456699},{"_id":"themes/Chic/source/css/_highlight/atelier-savanna-light.styl","hash":"f8244c93711c7cb59dd79d2df966806b30d171ea","modified":1641655456699},{"_id":"themes/Chic/source/css/_highlight/atelier-seaside-dark.styl","hash":"2edf385215bbe1985b1a10106525d362667d28c2","modified":1641655456699},{"_id":"themes/Chic/source/css/_highlight/atelier-seaside-light.styl","hash":"0597342da6e2d0c5bdcc7d42dabb07322b1a4177","modified":1641655456699},{"_id":"themes/Chic/source/css/_highlight/atelier-sulphurpool-dark.styl","hash":"538a14321193cd8abf2ddc484306631e54149ffb","modified":1641655456699},{"_id":"themes/Chic/source/css/_highlight/atelier-sulphurpool-light.styl","hash":"efa52713efc468abeeb2b9299704371583b857de","modified":1641655456700},{"_id":"themes/Chic/source/css/_highlight/brown-paper.styl","hash":"329b85ae9130a5587a6fb1c6f80396f9cca5ddc1","modified":1641655456700},{"_id":"themes/Chic/source/css/_highlight/brown-papersq.png","hash":"3a1332ede3a75a3d24f60b6ed69035b72da5e182","modified":1641655456700},{"_id":"themes/Chic/source/css/_highlight/codepen-embed.styl","hash":"8b7b34484f76a6c2c3b1a9e49abb9b382f439ae8","modified":1641655456700},{"_id":"themes/Chic/source/css/_highlight/color-brewer.styl","hash":"2a439d6214430e2f45dd4939b4dfe1fe1a20aa0f","modified":1641655456701},{"_id":"themes/Chic/source/css/_highlight/dark.styl","hash":"f5e6e75958de59e87fc6be3a1668e870e20bc836","modified":1641655456701},{"_id":"themes/Chic/source/css/_highlight/darkula.styl","hash":"9717efa9194837ba3fb4d762997d33075dcf8bfa","modified":1641655456701},{"_id":"themes/Chic/source/css/_highlight/docco.styl","hash":"b1c176378bb275f2e8caa759f36294e42d614bf1","modified":1641655456701},{"_id":"themes/Chic/source/css/_highlight/far.styl","hash":"aaac3028f5e33123cd123a583cddc9290c45ec8e","modified":1641655456701},{"_id":"themes/Chic/source/css/_highlight/foundation.styl","hash":"bf8ddc94b4ad995b8b8805b5a4cf95004553fdac","modified":1641655456702},{"_id":"themes/Chic/source/css/_highlight/github-gist.styl","hash":"48211a03d33e7f7ada0b261162bea06676155a71","modified":1641655456702},{"_id":"themes/Chic/source/css/_highlight/github.styl","hash":"3336aeba324c6d34a6fd41fef9b47bc598f7064c","modified":1641655456702},{"_id":"themes/Chic/source/css/_highlight/googlecode.styl","hash":"bda816beee7b439814b514e6869dc678822be1bc","modified":1641655456702},{"_id":"themes/Chic/source/css/_highlight/grayscale.styl","hash":"bf37d8b8d1e602126c51526f0cc28807440228ed","modified":1641655456702},{"_id":"themes/Chic/source/css/_highlight/gruvbox-dark.styl","hash":"76b744c14fd5600bea64731c05df97c2df75523f","modified":1641655456703},{"_id":"themes/Chic/source/css/_highlight/highlightjs.styl","hash":"65b5981dc3c57cedd1cb668c0e377230987e08d1","modified":1641655456703},{"_id":"themes/Chic/source/css/_highlight/hopscotch.styl","hash":"1378a6bc67a32c0cbff72ab771268b53f9aa586d","modified":1641655456703},{"_id":"themes/Chic/source/css/_highlight/hybrid.styl","hash":"b8eb5c69d12f2ee5ebc50265ae271699d7f1a8d3","modified":1641655456703},{"_id":"themes/Chic/source/css/_highlight/idea.styl","hash":"a02967cb51c16a34e0ee895d33ded2b823d35b21","modified":1641655456703},{"_id":"themes/Chic/source/css/_highlight/index.styl","hash":"002d5596f6379cc87dbd43d9145bc764aa666be1","modified":1641655456704},{"_id":"themes/Chic/source/css/_highlight/ir-black.styl","hash":"53e5d74326a4527b92272bbd6946d4fec92720e8","modified":1641655456704},{"_id":"themes/Chic/source/css/_highlight/kimbie.dark.styl","hash":"45dbb168f22d739d0109745d2decd66b5f94e786","modified":1641655456704},{"_id":"themes/Chic/source/css/_highlight/kimbie.light.styl","hash":"61f8baed25be05288c8604d5070afbcd9f183f49","modified":1641655456704},{"_id":"themes/Chic/source/css/_highlight/kimbie.styl","hash":"51b889ca7c6fe178cfbbe28d875a6ea427184441","modified":1641655456704},{"_id":"themes/Chic/source/css/_highlight/magula.styl","hash":"16d323f989b1420a0f72ef989242ece9bf17a456","modified":1641655456705},{"_id":"themes/Chic/source/css/_highlight/mono-blue.styl","hash":"4c89a6ae29de67c0700585af82a60607e85df928","modified":1641655456705},{"_id":"themes/Chic/source/css/_highlight/monokai-sublime.styl","hash":"c385b11345894be7e6ce3c5f08663e199933b8e4","modified":1641655456705},{"_id":"themes/Chic/source/css/_highlight/monokai.styl","hash":"f87be027848ea6bee623a08ad1e17b2f5b7937ee","modified":1641655456705},{"_id":"themes/Chic/source/css/_highlight/obsidian.styl","hash":"199e28326be8590883f0813ebbd54fcfaa4750fd","modified":1641655456705},{"_id":"themes/Chic/source/css/_highlight/paraiso-dark.styl","hash":"f1537bd868579fa018ecdbfd2eb922dcf3ba2cac","modified":1641655456706},{"_id":"themes/Chic/source/css/_highlight/paraiso-light.styl","hash":"d224d1df0eb3395d9eea1344cee945c228af2911","modified":1641655456706},{"_id":"themes/Chic/source/css/_highlight/paraiso.styl","hash":"75f181eece6b71d033ea0c8d6cf00ae7efb9e29b","modified":1641655456706},{"_id":"themes/Chic/source/css/_highlight/pojoaque.jpg","hash":"c5fe6533b88b21f8d90d3d03954c6b29baa67791","modified":1641655456706},{"_id":"themes/Chic/source/css/_highlight/pojoaque.styl","hash":"2601b4285803a7cea5ccded8d624ca95f80e3d88","modified":1641655456706},{"_id":"themes/Chic/source/css/_highlight/railscasts.styl","hash":"b6674db9210e0c4444e4835fff2d1361f3ebd64c","modified":1641655456706},{"_id":"themes/Chic/source/css/_highlight/rainbow.styl","hash":"c0cf97aae3e10fdcd10414547a711c9effbc39b8","modified":1641655456707},{"_id":"themes/Chic/source/css/_highlight/school-book.png","hash":"711ec983c874e093bb89eb77afcbdf6741fa61ee","modified":1641655456707},{"_id":"themes/Chic/source/css/_highlight/school-book.styl","hash":"beabbbcc7930f8de19159381a01c0ba41dc2291f","modified":1641655456707},{"_id":"themes/Chic/source/css/_highlight/solarized-dark.styl","hash":"90c9da5aa594383697e5b18892a7f95beb053f55","modified":1641655456707},{"_id":"themes/Chic/source/css/_highlight/solarized-light.styl","hash":"aa0dd3fd25c464183b59c5575c9bee8756b397f2","modified":1641655456707},{"_id":"themes/Chic/source/css/_highlight/sunburst.styl","hash":"af3eec0fd56151e55bbd49c31b151f36717611d8","modified":1641655456707},{"_id":"themes/Chic/source/css/_highlight/tomorrow-night-blue.styl","hash":"f24c17d0ab815dcfaab3438cb9fe2ab4839f5e0d","modified":1641655456708},{"_id":"themes/Chic/source/css/_highlight/tomorrow-night-bright.styl","hash":"7674fecb6d27350727dc0d2dc93bc018382ebbd0","modified":1641655456708},{"_id":"themes/Chic/source/css/_highlight/tomorrow-night-eighties.styl","hash":"28d751075ebabf7d0327a36f725076fe82fdf626","modified":1641655456708},{"_id":"themes/Chic/source/css/_highlight/tomorrow-night.styl","hash":"16ba09b2db501e4e3e2e7d62595d9bf935bf27c4","modified":1641655456708},{"_id":"themes/Chic/source/css/_highlight/tomorrow.styl","hash":"15779cf6846725c7c35fc56cac39047d7e0aec1c","modified":1641655456708},{"_id":"themes/Chic/source/css/_highlight/vs.styl","hash":"959a746f4b37aacb5d1d6ff1d57e0c045289d75d","modified":1641655456708},{"_id":"themes/Chic/source/css/_highlight/xcode.styl","hash":"5e8532ae8366dcf6a4ef5e4813dc3d42ab3d0a50","modified":1641655456709},{"_id":"themes/Chic/source/css/_highlight/zenburn.styl","hash":"68ff9332ccc03f9389b15b713415cde016f8088f","modified":1641655456709},{"_id":"themes/Chic/source/css/_lib/looper.css","hash":"863144dc9af7c1e181670515bc85eaf768f4e287","modified":1641655456709},{"_id":"themes/Chic/source/css/_lib/tocbot.css","hash":"15601837bf8557c2fd111e4450ed4c8495fd11a0","modified":1641655456709},{"_id":"themes/Chic/source/css/_page/category.styl","hash":"cead361269616b7a6ddec3090d9fa34c3c6ac722","modified":1641655456711},{"_id":"themes/Chic/source/css/_page/archive.styl","hash":"71ea842f068b29b4418dd09450db09d27dcf0947","modified":1641655456711},{"_id":"themes/Chic/source/css/_page/page.styl","hash":"34e33b52d2e046aa2f5494e81ff4ac2d5ca78058","modified":1641655456711},{"_id":"themes/Chic/source/css/_page/profile.styl","hash":"5ef6d5a06132f26b7aa01b2fbf4bbfb8ee862b7b","modified":1641655456711},{"_id":"themes/Chic/source/css/_page/tag.styl","hash":"55b220cc58011876fb3a470cd1fde8ed87c93079","modified":1641655456711},{"_id":"themes/Chic/source/css/_partial/footer.styl","hash":"4f58e607eaa59cda3b5a9fdb3404ffb75c4d1a03","modified":1641655456711},{"_id":"themes/Chic/source/css/_partial/header.styl","hash":"be70b4ab3bcc977f1055664899742804c716929d","modified":1641655456712},{"_id":"themes/Chic/source/css/_partial/paginator.styl","hash":"b4f4a5180c4cbc70d186792b8a1fd0f5855bd86a","modified":1641655456712},{"_id":"themes/Chic/source/fonts/iconfont/demo.css","hash":"65c50db528a5abe06426b1a20735feaf1f2a0d9b","modified":1641655456714},{"_id":"themes/Chic/source/fonts/iconfont/demo_index.html","hash":"16e01463756a77b4acd15ade4e6b73f0376d75e1","modified":1641655456714},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.css","hash":"1e5540dca41dc53879226750f936e72daf616662","modified":1641655456714},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.eot","hash":"d18736f7885569e497698d17f49b9167add67dc6","modified":1641655456714},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.js","hash":"87bfdaae31251f4d605646c5ae9c67196f6cc4e2","modified":1641655456715},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.json","hash":"eae94b803d34035008842855d0bead92d2035281","modified":1641655456715},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.svg","hash":"5c9c4e44179a7435d0f91df4ce1154dd677ad8c2","modified":1641655456715},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.ttf","hash":"41c4f4dc82e42452dcfd19caed6c7dc333ee769e","modified":1641655456715},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.woff","hash":"a57593c49b56c16ac1def0e1f3dbca3f658b3579","modified":1641655456716},{"_id":"themes/Chic/source/fonts/iconfont/iconfont.woff2","hash":"39d97a0f72417487f5c1e0a0abf8e27dd6ebda31","modified":1641655456716},{"_id":"themes/Chic/source/css/_page/_post/post_code.styl","hash":"06c3a3524ffd4b27e03e79489001997ea5d727d3","modified":1641655456709},{"_id":"themes/Chic/source/css/_page/_post/post_content.styl","hash":"5e3d63077549d8e2e5ff8c452e809760f5a99c17","modified":1641655456710},{"_id":"themes/Chic/source/css/_page/_post/post_copyright.styl","hash":"64fd9f07ed45f035057d46740af0db70218714aa","modified":1641655456710},{"_id":"themes/Chic/source/css/_page/_post/post_header.styl","hash":"d37b032bc5edca92c84bf62070a28fa40939df55","modified":1641655456710},{"_id":"themes/Chic/source/css/_page/_post/post_nav.styl","hash":"03accaba13c995cbe65a05a88549ff74e992eb3f","modified":1641655456710},{"_id":"themes/Chic/source/css/_page/_post/post_tags.styl","hash":"2ff93677aa4d81da83c659b4dd4e3cb482d9ce7d","modified":1641655456710},{"_id":"themes/Chic/source/css/_page/_post/post_toc.styl","hash":"15e1ec7af93f41184f986aba21991a79923b0a0e","modified":1641655456710},{"_id":"themes/Chic/source/fonts/lanting/lanting.woff2","hash":"5f325fcd2726a5b44e08b7004a5219e14847cbfa","modified":1641655456792},{"_id":"themes/Chic/source/fonts/lanting/lanting.woff","hash":"642ad1f17d27d4b1010d1a0571d1b44cbc823d9d","modified":1641655456788},{"_id":"themes/Chic/source/fonts/lanting/lanting.eot","hash":"3e184614f037939a6f98d607da3ed7dffb350e65","modified":1641655456753},{"_id":"themes/Chic/source/fonts/lanting/lanting.TTF","hash":"97e9a4538cceef4b17d54c7dc589524905d1b685","modified":1641655456734},{"_id":"themes/Chic/source/fonts/lanting/lanting.otf","hash":"4e184da596772d3ef6e5763cdee3e46a1ce2f2dd","modified":1641655456781},{"_id":"public/favicon.ico","hash":"96b9a549337c2bec483c2879eeafa4d1f8748fed","modified":1641655552626},{"_id":"public/image/avatar.jpeg","hash":"5d46dc78e55390dfab0149798249bf655dd03fca","modified":1641655552626},{"_id":"public/fonts/iconfont/iconfont.eot","hash":"d18736f7885569e497698d17f49b9167add67dc6","modified":1641655552626},{"_id":"public/fonts/iconfont/iconfont.svg","hash":"5c9c4e44179a7435d0f91df4ce1154dd677ad8c2","modified":1641655552626},{"_id":"public/fonts/iconfont/iconfont.ttf","hash":"41c4f4dc82e42452dcfd19caed6c7dc333ee769e","modified":1641655552626},{"_id":"public/fonts/iconfont/iconfont.woff","hash":"a57593c49b56c16ac1def0e1f3dbca3f658b3579","modified":1641655552626},{"_id":"public/fonts/iconfont/iconfont.woff2","hash":"39d97a0f72417487f5c1e0a0abf8e27dd6ebda31","modified":1641655552626},{"_id":"public/css/base.css","hash":"2fce73a3c2df8f93edeb5e34a53b7d83e5191d85","modified":1641655552626},{"_id":"public/css/custom.css","hash":"da39a3ee5e6b4b0d3255bfef95601890afd80709","modified":1641655552626},{"_id":"public/css/font.css","hash":"87059edd1f2bfc4296f5599e73208893f2b06458","modified":1641655552626},{"_id":"public/css/layout.css","hash":"c81e2e01ff5e95a3e613064b8490045ff936c305","modified":1641655552626},{"_id":"public/css/media.css","hash":"5023ee404900a47d61ca0591b2d4e9eace0fe88e","modified":1641655552626},{"_id":"public/css/normalize.css","hash":"2d4b663b6a4c68295b6ba240fa2dd9fb3863093c","modified":1641655552626},{"_id":"public/css/variable.css","hash":"cb4180b3bbad471e30cf52ebb40e998d58a30d7d","modified":1641655552626},{"_id":"public/js/tocbot.min.js","hash":"bae97e8a24a05a99335f8e725641c8ca9c50502a","modified":1641655552626},{"_id":"public/fonts/iconfont/demo.css","hash":"65c50db528a5abe06426b1a20735feaf1f2a0d9b","modified":1641655552626},{"_id":"public/fonts/iconfont/iconfont.css","hash":"1e5540dca41dc53879226750f936e72daf616662","modified":1641655552626},{"_id":"public/fonts/iconfont/iconfont.json","hash":"3123aa840109e385d58a75d34e88a2d621e1ada8","modified":1641655552626},{"_id":"public/fonts/iconfont/demo_index.html","hash":"16e01463756a77b4acd15ade4e6b73f0376d75e1","modified":1641655552626},{"_id":"public/fonts/iconfont/iconfont.js","hash":"87bfdaae31251f4d605646c5ae9c67196f6cc4e2","modified":1641655552626},{"_id":"public/js/mathjax2.7.5.js","hash":"7ba18c783d543cfb4b45a0118ccb73d3f68cd46e","modified":1641655552626},{"_id":"public/fonts/lanting/lanting.woff2","hash":"5f325fcd2726a5b44e08b7004a5219e14847cbfa","modified":1641655552626},{"_id":"public/fonts/lanting/lanting.woff","hash":"642ad1f17d27d4b1010d1a0571d1b44cbc823d9d","modified":1641655552626},{"_id":"public/fonts/lanting/lanting.eot","hash":"3e184614f037939a6f98d607da3ed7dffb350e65","modified":1641655552626},{"_id":"public/fonts/lanting/lanting.TTF","hash":"97e9a4538cceef4b17d54c7dc589524905d1b685","modified":1641655552626},{"_id":"public/fonts/lanting/lanting.otf","hash":"4e184da596772d3ef6e5763cdee3e46a1ce2f2dd","modified":1641655552626},{"_id":"source/category/index.md","hash":"ca207b6c9e08a5afdd5431f054300aa3ef7a5c60","modified":1641659706931},{"_id":"source/tag/index.md","hash":"b5af48c36d0bfb529157f8d3e547e5819745fc89","modified":1641659706930},{"_id":"themes/Chic/source/_posts/hello-world.md","hash":"7d98d6592de80fdcd2949bd7401cec12afd98cdf","modified":1641655075681},{"_id":"themes/Chic/source/category/index.md","hash":"2ada7b63c5a77278649982d5151b265add20560b","modified":1641657501658},{"_id":"themes/Chic/source/tag/index.md","hash":"35803df154a2a0e58d45c44cfe287b1a871be0d8","modified":1641657500832},{"_id":"themes/Chic/source/image/avatar.png","hash":"2305245d11b37e02e23678f9811a3425570bc1d9","modified":1641656804764},{"_id":"source/about/index.md","hash":"13422cbfa438af6e8da20145d3bbdc29fb631673","modified":1641661611591},{"_id":"source/images/WechatCode.jpg","hash":"300cbaedf80950e63e762d53e5cc05ba97a99bb2","modified":1641658298447},{"_id":"source/_posts/2019-10-22-Operating-System-1.md","hash":"35fc43251802313a7a2e5eef9b21c2e687309c2b","modified":1641663762768},{"_id":"source/_posts/2019-10-23-Operating-System-2.md","hash":"4b4872b9ca4f644ce13a102645c08ff28c96f2b1","modified":1641663762763},{"_id":"source/_posts/2019-10-24-Operating-System-3.md","hash":"bc3bd7fb30a9ab2f9b2643a36611a406b0fdc6f2","modified":1641663787563},{"_id":"source/_posts/2019-10-4-IO-stream.md","hash":"c9d2496a1cf1157c22c7f9e3a5409c43db19855b","modified":1641663740042},{"_id":"source/_posts/2019-12-1-2019Summary.md","hash":"d5735839aa66752421912e743a0a89dd38872830","modified":1641663800471},{"_id":"source/_posts/2019-8-23-MR-HoloLens-develop.md","hash":"3cdd5e4c40ca84372a4205143593961baf382fe4","modified":1641663599661},{"_id":"source/_posts/2020-04-4-JOS.md","hash":"57cf0f3963980ccda430d5430a65b99bac1bf733","modified":1641659029354},{"_id":"source/_posts/2020-1-20-API-test-learning.md","hash":"22e8e4eeef81f3a243cf3d34b19a63d9682128ed","modified":1641659029355},{"_id":"source/_posts/2020-2-21-shell.md","hash":"4cc2b3f0a1f3ae67684589c02ddfab00ea89099f","modified":1641659029355},{"_id":"source/_posts/2019-6-1-Hackthon.md","hash":"f25f4c17bfefa2104f6074527d007fcd47c4aabb","modified":1641659082090},{"_id":"source/_posts/2020-2-25-pytest.md","hash":"eb124786e486ba053a294dce2da9fdbfa1cb02db","modified":1641663823506},{"_id":"source/photos/SaaS1.jpg","hash":"0a369053947487a1a52bd3a1c312883c72d42990","modified":1641659029548},{"_id":"source/photos/SaaS2.jpg","hash":"f5020c791fbf925a3a91f8af7499cc3ee2f130cb","modified":1641659029548},{"_id":"source/_posts/2020-5-10-TOGAF.md","hash":"0ab6cb7fcaa4307203c300dc81de15b7eb7e5e31","modified":1641663833428},{"_id":"source/_posts/2020-6-10-SaaS.md","hash":"91284c0c809ff44da926060bf03067799f990727","modified":1641663878199},{"_id":"source/photos/2019-10-4-1.jpg","hash":"e91b0eb1ce9928ebee30b3a46dce8fcbf0e23d74","modified":1641659029378},{"_id":"source/photos/2019-10-4-4.jpg","hash":"02377b6308d9117d90c922c193fc6f62151a6114","modified":1641659029379},{"_id":"source/photos/2019-10-4-3.jpg","hash":"27bdd60b63f6befeafbc0a79ccf6f6edafcee94b","modified":1641659029379},{"_id":"source/photos/2019-10-4-5.jpg","hash":"474adfa409aefdc8e36e99868e51e3d8c4bcd8e9","modified":1641659029379},{"_id":"source/photos/2019-10-4-2.jpg","hash":"aa5fa8d13a5c09909a4fd7502c207191f1310e49","modified":1641659029378},{"_id":"source/photos/2019-8-23-14.png","hash":"ff4b48587feb937e236643ff5455d08fdcefd450","modified":1641659029383},{"_id":"source/photos/2019-8-23-3.png","hash":"0f43f09212191efa85c050c1480ec4fc0652ab62","modified":1641659029385},{"_id":"source/photos/2019-8-23-4.png","hash":"94a6615d6969bdef86035b0d32eb0738cd171517","modified":1641659029385},{"_id":"source/photos/2019-8-23-5.png","hash":"56e5d1dec61cc132e2fc103a152121d04218433e","modified":1641659029385},{"_id":"source/photos/2019-8-23-7.png","hash":"ade26cd43eae6bb20e0e93e6001d4b59ae46697a","modified":1641659029386},{"_id":"source/photos/2019-8-23-6.png","hash":"4d6aab5e8630d06d74303c46f3366e7816364987","modified":1641659029386},{"_id":"source/photos/2019-8-23-9.png","hash":"dab9292576fff91124dd86d02f9c8458a5edc966","modified":1641659029386},{"_id":"source/photos/2019-8-23-8.png","hash":"94ddeb8c20eed546443b46ad93ca4c52a27ec2e7","modified":1641659029386},{"_id":"source/photos/didi.jpg","hash":"9d4c5ab557a897eb6f63bd8868f28eed082dc907","modified":1641659029584},{"_id":"source/photos/pytest-3.png","hash":"bd310a0ecb64287f9fb57d5e91affe8c1c9ce172","modified":1641659029622},{"_id":"source/photos/pytest-2.png","hash":"20cc5eceeec1b981d01d7b9207195a1389bebb7a","modified":1641659029621},{"_id":"source/photos/pytest-5.png","hash":"5568c7d67953910c3d9ab9ad0f03b2f69f71e119","modified":1641659029622},{"_id":"source/photos/pytest-6.png","hash":"bc5b8de948ffd62f5bcbb8052950d30f1cb95eb6","modified":1641659029623},{"_id":"source/photos/shangtang.png","hash":"e77c8a65348ca6094bf353d7caff2002d6da2152","modified":1641659029624},{"_id":"source/photos/2019-8-23-11.png","hash":"1d04b9b27e5b2f5da01e39a12ce420837830ac26","modified":1641659029382},{"_id":"source/photos/2019-8-23-10.png","hash":"fb7e358c3a0934766a8e2fd991bfbd200f2046f6","modified":1641659029381},{"_id":"source/photos/2019-8-23-13.png","hash":"b980c42f8ba69238385df3a85924561e35c18ded","modified":1641659029383},{"_id":"source/photos/2019-8-23-12.png","hash":"1b0df9eee99174709b70f99599fdb85e231d4269","modified":1641659029382},{"_id":"source/photos/2019-8-23-2.png","hash":"d9d80f1321cb916975dc63b1ef9727b774efeacb","modified":1641659029384},{"_id":"source/photos/OS-3.png","hash":"4d6bde98ed2ee22ee95f2425f61d7aea5ff53b29","modified":1641659029541},{"_id":"source/photos/friend7.jpg","hash":"bf075b3c5d77e5c60e624c842935fc0470964b6d","modified":1641659029593},{"_id":"source/photos/horizon2020.jpg","hash":"0f2917690ab43896c54c3757980cef01ce860b3c","modified":1641659029593},{"_id":"source/photos/pytest-4.png","hash":"9e638dac0f26928bb556f4a08b996d064eeb7249","modified":1641659029622},{"_id":"source/photos/pytest-1.png","hash":"2c37a047eb42290dab50f1b30dea686bb6bd3349","modified":1641659029621},{"_id":"source/photos/2019-8-23-1.png","hash":"38bc12cf82528c96066ffb96fba54567f9c364f9","modified":1641659029381},{"_id":"source/photos/OS-1.png","hash":"ae74db4ee7d58532370961cdae8ff4f021e46dd3","modified":1641659029538},{"_id":"source/photos/OS-2.png","hash":"4b519b362aed85e03afc07a638f058bfe52e04c4","modified":1641659029541},{"_id":"source/photos/OS-4.png","hash":"593047683ca42770384939929bca7b5d2ef85302","modified":1641659029542},{"_id":"source/photos/OS-6.png","hash":"77c740103dfbaf6961e9a85f49070bef2ff27b55","modified":1641659029543},{"_id":"source/photos/OS-5.png","hash":"b247705e57836f7fea7f226817e687a17ec5ba01","modified":1641659029543},{"_id":"source/photos/OS-8.png","hash":"20d53dcd01e5f4f37f51339025456aab2e1c0146","modified":1641659029544},{"_id":"source/photos/OS-9.png","hash":"02cf1e97ee3f7fe9fca7b2852a24d58e50956b1e","modified":1641659029545},{"_id":"source/photos/company1.jpg","hash":"499fb83fa46cf15d3de3275fe429c6a1bdf76244","modified":1641659029563},{"_id":"source/photos/certifi2.jpg","hash":"33f71cf4b8ac3cd7987d487d4680bea96818e63c","modified":1641659029562},{"_id":"source/photos/company2.jpg","hash":"dd195f9779bd75fcf1cbaf954a005cbd9d680d12","modified":1641659029563},{"_id":"source/photos/friend1.jpg","hash":"9aff4462cc031225c6e57c161d86d3f04ff66b3b","modified":1641659029585},{"_id":"source/photos/friend4.jpg","hash":"5fc8b5b9512cd0fb65f4fd0159289f859b76731c","modified":1641659029591},{"_id":"source/photos/friend5.jpg","hash":"c0f30509b41bec034dbae50102634a2c76afc55b","modified":1641659029591},{"_id":"source/photos/2019-8-23-0.jpg","hash":"8ed034074e4b33f074e3922f9a90feb169943281","modified":1641659029380},{"_id":"source/photos/OS-10.png","hash":"ac174cc5b26b6e2951920a05d589e8d984c72a5a","modified":1641659029538},{"_id":"source/photos/OS-12.png","hash":"d4b776778ab5840912cc4e9aeb261a4c24ea66bd","modified":1641659029540},{"_id":"source/photos/OS-11.png","hash":"7798b4585097fdf9ae3fa7de5e1d372c167dd09b","modified":1641659029539},{"_id":"source/photos/company3.jpg","hash":"47f428e9e7efa03a6e44646ab1e43479a7fe73ba","modified":1641659029564},{"_id":"source/photos/OS-7.png","hash":"786193c511460be82e0c07ca04668a5e8b8039c3","modified":1641659029543},{"_id":"source/photos/friend6.jpg","hash":"f3708aa924cff7281bc978353ec4aead2dd76a68","modified":1641659029592},{"_id":"source/photos/friend3.jpg","hash":"ec61b58a999a937c123282a1d363bb8d67c361c2","modified":1641659029590},{"_id":"source/photos/tcl.jpg","hash":"2d3b1607b8828b9a9939812b7890e57bf681bac3","modified":1641659029625},{"_id":"source/photos/missuri.jpg","hash":"8531fb0914c25e817d2865075149f98c668072e8","modified":1641659029621},{"_id":"source/photos/2019movie4.mp4","hash":"d09a5e2e10a2b1d8435ba0e758e08a490ed359c7","modified":1641659029438},{"_id":"source/photos/friend2.jpg","hash":"e8ceca677342449a736cf2589dbe298c966fd7e3","modified":1641659029589},{"_id":"source/photos/company5.jpg","hash":"a38c3e18cb4dd393c4566070bbfed4a20f9b2237","modified":1641659029584},{"_id":"source/photos/2019movie1.mp4","hash":"0361da2445a3b7349f2a496c394be0c37b37314a","modified":1641659029391},{"_id":"source/photos/company4.jpg","hash":"736cc151b105d84faa432833f8dfc110736aacbd","modified":1641659029576},{"_id":"source/photos/certifi.jpg","hash":"259d56eba1ebffe5f3c76ad6494c6e0752895f4c","modified":1641659029560},{"_id":"source/photos/2019movie2.mp4","hash":"c54aac0e1fe7e0df6456f4fa724b422fcd66ce38","modified":1641659029400},{"_id":"source/photos/2019movie6.mp4","hash":"07c2313d7faf70ccd41b9d56a71317f1c4d42e73","modified":1641659029470},{"_id":"source/photos/2019movie8.mp4","hash":"ff443a9fab5d8cbe4ae19065f7b6f23a797f78ee","modified":1641659029527},{"_id":"source/photos/2019movie5.mp4","hash":"b883332d96f374318a60537897a503ebfdeeb13b","modified":1641659029459},{"_id":"source/photos/2019movie7.mp4","hash":"8f1b5151a98945989d5c8a9be8a02a9302aca011","modified":1641659029507},{"_id":"source/photos/2019movie3.mp4","hash":"a33da035b6f10fcecc6aed736d7d9373d39e15c6","modified":1641659029436},{"_id":"public/category/index.html","hash":"0707be27b799bb53984201be6a390622b1a6a9ce","modified":1641661650002},{"_id":"public/2020/06/10/2020-6-10-SaaS/index.html","hash":"c85617068167365d4c2635b5d6e5abddb597c4d1","modified":1641663894459},{"_id":"public/2020/05/10/2020-5-10-TOGAF/index.html","hash":"41b1f20259bee4c6f1b75d062b034c68cd4c7bf0","modified":1641663894459},{"_id":"public/2020/02/25/2020-2-25-pytest/index.html","hash":"f882094cd71d7f20e3aee3799340da4a74b4ac56","modified":1641663894459},{"_id":"public/2020/02/21/2020-2-21-shell/index.html","hash":"264ab2c6454dbb3a7cbb04cd6de773c8c1a1bb85","modified":1641661650002},{"_id":"public/2020/04/04/2020-04-4-JOS/index.html","hash":"b4faca548aa50e8600adf2a29d0557e978b54ca4","modified":1641661650002},{"_id":"public/tag/index.html","hash":"3339e6799818e022c4cc394ae67215909614999a","modified":1641661650002},{"_id":"public/2020/01/20/2020-1-20-API-test-learning/index.html","hash":"3754c5f2726eb5776b424102ec07f117c72040fe","modified":1641661650002},{"_id":"public/about/index.html","hash":"f2fad167c379d794c6c66f8149cb0bf93079f03f","modified":1641661650002},{"_id":"public/2019/12/01/2019-12-1-2019Summary/index.html","hash":"4f98b685c4fc38cb984e2a5112eeef1992273aee","modified":1641663894459},{"_id":"public/2019/10/23/2019-10-23-Operating-System-2/index.html","hash":"8f75f6e05f199aebf4783f2bf371c94adb9261c1","modified":1641663894459},{"_id":"public/2019/10/24/2019-10-24-Operating-System-3/index.html","hash":"6bca6c9f21909a57995fb691048382bb527773a2","modified":1641663894459},{"_id":"public/2019/10/04/2019-10-4-IO-stream/index.html","hash":"88d5e6116d46b6d648809f2407d77690359d3bc5","modified":1641663894459},{"_id":"public/2019/10/22/2019-10-22-Operating-System-1/index.html","hash":"c699efc6a5d4562509fe3b07a8a57d8a12a0994c","modified":1641663894459},{"_id":"public/2019/08/23/2019-8-23-MR-HoloLens-develop/index.html","hash":"d4505bc47d78cbebebe22cff0b7a0ad943ccd3e0","modified":1641663894459},{"_id":"public/2019/06/01/2019-6-1-Hackthon/index.html","hash":"bc75bc5d3ea4837af9c6f6172d0d71dc208afc62","modified":1641661650002},{"_id":"public/page/2/index.html","hash":"30a0911e50643335c8185cdfcb1456ed90956620","modified":1641661650002},{"_id":"public/categories/MixedReality/index.html","hash":"35c12f0bb30f4a6ffa411281802fc85838c712d7","modified":1641661650002},{"_id":"public/categories/thinking/index.html","hash":"0d95015577e17d174eecf0b563b8944a55e6d117","modified":1641661650002},{"_id":"public/categories/OS/index.html","hash":"2323f011dd9fdb80c4a8add90a4969b28c1a02da","modified":1641661650002},{"_id":"public/categories/Test/index.html","hash":"58c37f07c67895da7236216caf2328d2face0fb3","modified":1641661650002},{"_id":"public/tags/thinking/index.html","hash":"428ed4609efffd930892c1a876db902076e3205e","modified":1641661650002},{"_id":"public/tags/VR/index.html","hash":"b1fdf4421f7593a521ae7762c1d811a3c45a9568","modified":1641661650002},{"_id":"public/tags/AR/index.html","hash":"928c84c68c83e501ac2877769910c8c05a7483e7","modified":1641661650002},{"_id":"public/tags/OS/index.html","hash":"81fd4d8439171e5f59bde80f508a1b711f6e865b","modified":1641661650002},{"_id":"public/tags/Linux/index.html","hash":"4553d3403796a5d2d00cac7d99bd79c720202d16","modified":1641661650002},{"_id":"public/tags/OS-wq/index.html","hash":"0a5593c10141c39feb6eabaf0494093a3f9511ac","modified":1641661650002},{"_id":"public/tags/Java/index.html","hash":"e4b47c32f3eef07d11b53e7a3aaa6baff83bdd62","modified":1641661650002},{"_id":"public/tags/Hackthon/index.html","hash":"71ec6f99e3936999d4ce2752b4df8bb1f970879e","modified":1641661650002},{"_id":"public/tags/MR/index.html","hash":"ad09931ce199a35cc3581867f12437f1f8b12d9b","modified":1641661650002},{"_id":"public/tags/AI/index.html","hash":"8638da3495b0e166bc61f5dd5bfd6a5a6678d462","modified":1641661650002},{"_id":"public/tags/Test/index.html","hash":"5d6220e156112a42ed33b67b3e8c7c7662cc55c1","modified":1641661650002},{"_id":"public/tags/shell/index.html","hash":"38ba78f3574a51d1618d96cfe67ec228d0460022","modified":1641661650002},{"_id":"public/archives/page/2/index.html","hash":"c63e73f3277203618c366189c005e33a0614f7fd","modified":1641661650002},{"_id":"public/archives/2019/06/index.html","hash":"fa1383c915166e27cdcb7644a28e50b31142e1ca","modified":1641661650002},{"_id":"public/archives/2019/index.html","hash":"b8d8187b47c8504fc158db2e6d6ad5e9a0dedd88","modified":1641661650002},{"_id":"public/archives/2019/08/index.html","hash":"980562eb0871da68824132077df5063b882cddda","modified":1641661650002},{"_id":"public/archives/2019/10/index.html","hash":"d803d1a939ed3565a8a3d9db538f1fd21eadef39","modified":1641661650002},{"_id":"public/archives/2019/12/index.html","hash":"7e7363f29502f258a3fdfb723fd02fdac95d37d5","modified":1641661650002},{"_id":"public/archives/2020/01/index.html","hash":"90aedae6ad9bcc1f0a591db11a1bee32fa4b3e96","modified":1641661650002},{"_id":"public/archives/2020/index.html","hash":"7940155a8eb8eaa3763cc8682f125094714a2cc0","modified":1641661650002},{"_id":"public/archives/2020/02/index.html","hash":"1434a663819706ef99829e5a930257fcd28a4f3a","modified":1641661650002},{"_id":"public/archives/2020/05/index.html","hash":"238ed1ce062314f7bb4bf89d6e6871fa12fa7d02","modified":1641661650002},{"_id":"public/archives/2020/04/index.html","hash":"4a4772b5158dc569758a4c8f95267afc8b44bec9","modified":1641661650002},{"_id":"public/archives/2020/06/index.html","hash":"0f81bf84495c8fe9cbaec3779d42c6854df897a5","modified":1641661650002},{"_id":"public/photos/pytest-2.png","hash":"20cc5eceeec1b981d01d7b9207195a1389bebb7a","modified":1641661650002},{"_id":"public/photos/pytest-5.png","hash":"5568c7d67953910c3d9ab9ad0f03b2f69f71e119","modified":1641661650002},{"_id":"public/photos/pytest-3.png","hash":"bd310a0ecb64287f9fb57d5e91affe8c1c9ce172","modified":1641661650002},{"_id":"public/photos/pytest-6.png","hash":"bc5b8de948ffd62f5bcbb8052950d30f1cb95eb6","modified":1641661650002},{"_id":"public/photos/didi.jpg","hash":"9d4c5ab557a897eb6f63bd8868f28eed082dc907","modified":1641661650002},{"_id":"public/photos/shangtang.png","hash":"e77c8a65348ca6094bf353d7caff2002d6da2152","modified":1641661650002},{"_id":"public/photos/2019-10-4-1.jpg","hash":"e91b0eb1ce9928ebee30b3a46dce8fcbf0e23d74","modified":1641661650002},{"_id":"public/photos/2019-10-4-2.jpg","hash":"aa5fa8d13a5c09909a4fd7502c207191f1310e49","modified":1641661650002},{"_id":"public/photos/2019-10-4-3.jpg","hash":"27bdd60b63f6befeafbc0a79ccf6f6edafcee94b","modified":1641661650002},{"_id":"public/photos/2019-10-4-4.jpg","hash":"02377b6308d9117d90c922c193fc6f62151a6114","modified":1641661650002},{"_id":"public/photos/2019-10-4-5.jpg","hash":"474adfa409aefdc8e36e99868e51e3d8c4bcd8e9","modified":1641661650002},{"_id":"public/photos/2019-8-23-3.png","hash":"0f43f09212191efa85c050c1480ec4fc0652ab62","modified":1641661650002},{"_id":"public/photos/2019-8-23-5.png","hash":"56e5d1dec61cc132e2fc103a152121d04218433e","modified":1641661650002},{"_id":"public/photos/2019-8-23-4.png","hash":"94a6615d6969bdef86035b0d32eb0738cd171517","modified":1641661650002},{"_id":"public/photos/2019-8-23-7.png","hash":"ade26cd43eae6bb20e0e93e6001d4b59ae46697a","modified":1641661650002},{"_id":"public/photos/2019-8-23-6.png","hash":"4d6aab5e8630d06d74303c46f3366e7816364987","modified":1641661650002},{"_id":"public/photos/2019-8-23-8.png","hash":"94ddeb8c20eed546443b46ad93ca4c52a27ec2e7","modified":1641661650002},{"_id":"public/photos/2019-8-23-9.png","hash":"dab9292576fff91124dd86d02f9c8458a5edc966","modified":1641661650002},{"_id":"public/photos/2019-8-23-14.png","hash":"ff4b48587feb937e236643ff5455d08fdcefd450","modified":1641661650002},{"_id":"public/photos/pytest-4.png","hash":"9e638dac0f26928bb556f4a08b996d064eeb7249","modified":1641661650002},{"_id":"public/photos/friend7.jpg","hash":"bf075b3c5d77e5c60e624c842935fc0470964b6d","modified":1641661650002},{"_id":"public/photos/horizon2020.jpg","hash":"0f2917690ab43896c54c3757980cef01ce860b3c","modified":1641661650002},{"_id":"public/photos/OS-3.png","hash":"4d6bde98ed2ee22ee95f2425f61d7aea5ff53b29","modified":1641661650002},{"_id":"public/photos/2019-8-23-2.png","hash":"d9d80f1321cb916975dc63b1ef9727b774efeacb","modified":1641661650002},{"_id":"public/photos/2019-8-23-11.png","hash":"1d04b9b27e5b2f5da01e39a12ce420837830ac26","modified":1641661650002},{"_id":"public/photos/2019-8-23-10.png","hash":"fb7e358c3a0934766a8e2fd991bfbd200f2046f6","modified":1641661650002},{"_id":"public/photos/2019-8-23-13.png","hash":"b980c42f8ba69238385df3a85924561e35c18ded","modified":1641661650002},{"_id":"public/photos/2019-8-23-12.png","hash":"1b0df9eee99174709b70f99599fdb85e231d4269","modified":1641661650002},{"_id":"public/photos/pytest-1.png","hash":"2c37a047eb42290dab50f1b30dea686bb6bd3349","modified":1641661650002},{"_id":"public/photos/company2.jpg","hash":"dd195f9779bd75fcf1cbaf954a005cbd9d680d12","modified":1641661650002},{"_id":"public/photos/company1.jpg","hash":"499fb83fa46cf15d3de3275fe429c6a1bdf76244","modified":1641661650002},{"_id":"public/photos/company3.jpg","hash":"47f428e9e7efa03a6e44646ab1e43479a7fe73ba","modified":1641661650002},{"_id":"public/photos/friend1.jpg","hash":"9aff4462cc031225c6e57c161d86d3f04ff66b3b","modified":1641661650002},{"_id":"public/photos/friend5.jpg","hash":"c0f30509b41bec034dbae50102634a2c76afc55b","modified":1641661650002},{"_id":"public/photos/certifi2.jpg","hash":"33f71cf4b8ac3cd7987d487d4680bea96818e63c","modified":1641661650002},{"_id":"public/photos/OS-1.png","hash":"ae74db4ee7d58532370961cdae8ff4f021e46dd3","modified":1641661650002},{"_id":"public/photos/OS-6.png","hash":"77c740103dfbaf6961e9a85f49070bef2ff27b55","modified":1641661650002},{"_id":"public/photos/OS-4.png","hash":"593047683ca42770384939929bca7b5d2ef85302","modified":1641661650002},{"_id":"public/photos/OS-2.png","hash":"4b519b362aed85e03afc07a638f058bfe52e04c4","modified":1641661650002},{"_id":"public/photos/OS-5.png","hash":"b247705e57836f7fea7f226817e687a17ec5ba01","modified":1641661650002},{"_id":"public/photos/OS-8.png","hash":"20d53dcd01e5f4f37f51339025456aab2e1c0146","modified":1641661650002},{"_id":"public/photos/OS-10.png","hash":"ac174cc5b26b6e2951920a05d589e8d984c72a5a","modified":1641661650002},{"_id":"public/photos/OS-9.png","hash":"02cf1e97ee3f7fe9fca7b2852a24d58e50956b1e","modified":1641661650002},{"_id":"public/photos/OS-11.png","hash":"7798b4585097fdf9ae3fa7de5e1d372c167dd09b","modified":1641661650002},{"_id":"public/photos/OS-12.png","hash":"d4b776778ab5840912cc4e9aeb261a4c24ea66bd","modified":1641661650002},{"_id":"public/photos/2019-8-23-1.png","hash":"38bc12cf82528c96066ffb96fba54567f9c364f9","modified":1641661650002},{"_id":"public/photos/friend4.jpg","hash":"5fc8b5b9512cd0fb65f4fd0159289f859b76731c","modified":1641661650002},{"_id":"public/photos/friend3.jpg","hash":"ec61b58a999a937c123282a1d363bb8d67c361c2","modified":1641661650002},{"_id":"public/photos/OS-7.png","hash":"786193c511460be82e0c07ca04668a5e8b8039c3","modified":1641661650002},{"_id":"public/photos/2019-8-23-0.jpg","hash":"8ed034074e4b33f074e3922f9a90feb169943281","modified":1641661650002},{"_id":"public/photos/tcl.jpg","hash":"2d3b1607b8828b9a9939812b7890e57bf681bac3","modified":1641661650002},{"_id":"public/photos/friend6.jpg","hash":"f3708aa924cff7281bc978353ec4aead2dd76a68","modified":1641661650002},{"_id":"public/photos/missuri.jpg","hash":"8531fb0914c25e817d2865075149f98c668072e8","modified":1641661650002},{"_id":"public/photos/2019movie4.mp4","hash":"d09a5e2e10a2b1d8435ba0e758e08a490ed359c7","modified":1641661650002},{"_id":"public/photos/friend2.jpg","hash":"e8ceca677342449a736cf2589dbe298c966fd7e3","modified":1641661650002},{"_id":"public/photos/company5.jpg","hash":"a38c3e18cb4dd393c4566070bbfed4a20f9b2237","modified":1641661650002},{"_id":"public/photos/2019movie1.mp4","hash":"0361da2445a3b7349f2a496c394be0c37b37314a","modified":1641661650002},{"_id":"public/photos/company4.jpg","hash":"736cc151b105d84faa432833f8dfc110736aacbd","modified":1641661650002},{"_id":"public/photos/certifi.jpg","hash":"259d56eba1ebffe5f3c76ad6494c6e0752895f4c","modified":1641661650002},{"_id":"public/photos/2019movie2.mp4","hash":"c54aac0e1fe7e0df6456f4fa724b422fcd66ce38","modified":1641661650002},{"_id":"public/photos/2019movie6.mp4","hash":"07c2313d7faf70ccd41b9d56a71317f1c4d42e73","modified":1641661650002},{"_id":"public/photos/2019movie8.mp4","hash":"ff443a9fab5d8cbe4ae19065f7b6f23a797f78ee","modified":1641661650002},{"_id":"public/photos/2019movie5.mp4","hash":"b883332d96f374318a60537897a503ebfdeeb13b","modified":1641661650002},{"_id":"public/photos/2019movie7.mp4","hash":"8f1b5151a98945989d5c8a9be8a02a9302aca011","modified":1641661650002},{"_id":"public/photos/2019movie3.mp4","hash":"a33da035b6f10fcecc6aed736d7d9373d39e15c6","modified":1641661650002},{"_id":"source/photos/togaf.jpg","hash":"cc0446b87f6ab008aa22a9427a97e4429a975ce9","modified":1641659029625},{"_id":"public/photos/togaf.jpg","hash":"cc0446b87f6ab008aa22a9427a97e4429a975ce9","modified":1641663894459}],"Category":[{"name":"thinking","_id":"cky61ey400002aqoxbizd2imp"},{"name":"MixedReality","_id":"cky61ey430007aqox5t5lguit"},{"name":"OS","_id":"cky61ey45000caqox2bl0fr25"},{"name":"Test","_id":"cky61ey4b000oaqox1srtec4t"}],"Data":[],"Page":[{"title":"category","layout":"category","_content":"","source":"category/index.md","raw":"---\ntitle: category\nlayout: category\n---\n","date":"2022-01-08T16:35:06.931Z","updated":"2022-01-08T16:35:06.931Z","path":"category/index.html","_id":"cky60k7f70000kyoxfp307jsw","comments":1,"content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"tag","layout":"tag","_content":"","source":"tag/index.md","raw":"---\ntitle: tag\nlayout: tag\n---\n","date":"2022-01-08T16:35:06.930Z","updated":"2022-01-08T16:35:06.930Z","path":"tag/index.html","_id":"cky60k7f90001kyox94jre4gg","comments":1,"content":"","site":{"data":{}},"excerpt":"","more":""},{"title":"About Me","date":"2022-01-08T16:04:17.000Z","_content":"\n## 自我介绍\n\nName: Chester Cheung\n\n本科就读于中南大学本科, 主修电子信息工程, 辅修人工智能, 2019年 Missouri University 短期交换生, 智能网联汽车产业云软件工程师(初级);\n\nCNCF(Cloud-Native Computing Foundation, 云原生计算基金会) OpenTelemetry 社区成员, Thanos、Prometheus 社区贡献者。曾多次受上海花旗金融（中国）、腾讯学堂等邀请, 做相关领域技术分享;\n\n现腾讯后台工程师, 腾讯学堂青年导师, 2022届腾讯秋季校园招聘分享嘉宾, 参与公司可观测性中台建设; 腾讯 OpenTelemetry Oteam PMC 成员;\n\n作为第一发明人, 申请国家级发明专利2项; 在校期间, 共计国家级竞赛获奖2项, 省级竞赛获奖20余项, 校级竞赛获奖50余项;\n\n多次连续创业者;《好玩的书2020》编者（光明出版社）; 软硬件跨领域极客; 热衷公益事业; 定向帮扶贫困儿童, “非淡泊无以明志、非宁静无以致远”。\n\n## 知名开源社区贡献记录：\n\n### OpenTelemetry-Go\n\n- 2021-08-19 hanyuancheung(张瀚元) 成为OpenTelemetry社区成员 [open-telemetry/community#813](https://github.com/open-telemetry/community/issues/813)\n- 2021-06-08 hanyuancheung(张瀚元) [opentelemetry/opentelemetry-go#1973](https://github.com/open-telemetry/opentelemetry-go/pull/1973)\n- 2021-06-23 hanyuancheung(张瀚元) [open-telemetry/opentelemetry-go#2022](https://github.com/open-telemetry/opentelemetry-go/pull/2022)\n- 2021-07-22 hanyuancheung(张瀚元) [open-telemetry/opentelemetry-go#2097](https://github.com/open-telemetry/opentelemetry-go/pull/2097)\n- 2021-11-24 hanyuancheung(张瀚元) [open-telemetry/opentelemetry-go#2339](https://github.com/open-telemetry/opentelemetry-go/pull/2339)\n- 2021-12-07 hanyuancheung(张瀚元) [open-telemetry/opentelemetry-go#2423](https://github.com/open-telemetry/opentelemetry-go/pull/2423)\n- 2021-12-21 hanyuancheung(张瀚元) [open-telemetry/opentelemetry-go#2476](https://github.com/open-telemetry/opentelemetry-go/pull/2476)\n- 2022-01-05 hanyuancheung(张瀚元) [open-telemetry/opentelemetry-go#2491](https://github.com/open-telemetry/opentelemetry-go/pull/2491)\n- 2022-01-05 hanyuancheung(张瀚元) [open-telemetry/opentelemetry-go#2493](https://github.com/open-telemetry/opentelemetry-go/pull/2493)\n\n### Prometheus\n- 2021-11-5 hanyuancheung(张瀚元) [prometheus/alertmanager#2749](https://github.com/prometheus/alertmanager/pull/2749)\n\n### Thanos\n\n- 2021-08-27 hanyuancheung(张瀚元) [thanos-io/thanos#4604](https://github.com/thanos-io/thanos/pull/4604)\n\n### FuchsiaOS-docs-zh_CN\n\n- 2021-06-13 hanyuancheung(张瀚元) [FuchsiaOS/FuchsiaOS-docs-zh_CN#67](https://github.com/FuchsiaOS/FuchsiaOS-docs-zh_CN/pull/67)\n- 2021-06-13 hanyuancheung(张瀚元) [FuchsiaOS/FuchsiaOS-docs-zh_CN#69](https://github.com/FuchsiaOS/FuchsiaOS-docs-zh_CN/pull/69)\n\n### 团队开源贡献记录\n\n**https://docs.qq.com/doc/DSUpUQmNRbEdaRkJ4** 感兴趣的朋友欢迎联系我微信进群\n\n在开源路上以后还会越走越远，每一步都有巨大的坑在等着去填，希望我能达到自己的目标！\n\n对我感兴趣的或者是同道中人，欢迎加上我的微信，下面就是我的微信二维码，别忘了写清楚备注信息哦😄\n\n![个人微信](../images/WechatCode.jpg)\n\n## 联系我\n\n* [GitHub](https://github.com/zhyChesterCheung)\n* [Weibo](https://weibo.com/u/5689093900)\n* [知乎](https://www.zhihu.com/people/la-la-la-la-la-la-la-ji-9)\n* [Facebook](https://www.facebook.com/chester.cheung.3538)\n* [Twitter](https://twitter.com/ChesterCheung4)\n* [LinkedIn](https://www.linkedin.com/in/chestercheung)\n* Email：cheung.zhy.csu@gmail.com\n* QQ number：2640617395\n","source":"about/index.md","raw":"---\ntitle: About Me\ndate: 2022-01-09 00:04:17\n---\n\n## 自我介绍\n\nName: Chester Cheung\n\n本科就读于中南大学本科, 主修电子信息工程, 辅修人工智能, 2019年 Missouri University 短期交换生, 智能网联汽车产业云软件工程师(初级);\n\nCNCF(Cloud-Native Computing Foundation, 云原生计算基金会) OpenTelemetry 社区成员, Thanos、Prometheus 社区贡献者。曾多次受上海花旗金融（中国）、腾讯学堂等邀请, 做相关领域技术分享;\n\n现腾讯后台工程师, 腾讯学堂青年导师, 2022届腾讯秋季校园招聘分享嘉宾, 参与公司可观测性中台建设; 腾讯 OpenTelemetry Oteam PMC 成员;\n\n作为第一发明人, 申请国家级发明专利2项; 在校期间, 共计国家级竞赛获奖2项, 省级竞赛获奖20余项, 校级竞赛获奖50余项;\n\n多次连续创业者;《好玩的书2020》编者（光明出版社）; 软硬件跨领域极客; 热衷公益事业; 定向帮扶贫困儿童, “非淡泊无以明志、非宁静无以致远”。\n\n## 知名开源社区贡献记录：\n\n### OpenTelemetry-Go\n\n- 2021-08-19 hanyuancheung(张瀚元) 成为OpenTelemetry社区成员 [open-telemetry/community#813](https://github.com/open-telemetry/community/issues/813)\n- 2021-06-08 hanyuancheung(张瀚元) [opentelemetry/opentelemetry-go#1973](https://github.com/open-telemetry/opentelemetry-go/pull/1973)\n- 2021-06-23 hanyuancheung(张瀚元) [open-telemetry/opentelemetry-go#2022](https://github.com/open-telemetry/opentelemetry-go/pull/2022)\n- 2021-07-22 hanyuancheung(张瀚元) [open-telemetry/opentelemetry-go#2097](https://github.com/open-telemetry/opentelemetry-go/pull/2097)\n- 2021-11-24 hanyuancheung(张瀚元) [open-telemetry/opentelemetry-go#2339](https://github.com/open-telemetry/opentelemetry-go/pull/2339)\n- 2021-12-07 hanyuancheung(张瀚元) [open-telemetry/opentelemetry-go#2423](https://github.com/open-telemetry/opentelemetry-go/pull/2423)\n- 2021-12-21 hanyuancheung(张瀚元) [open-telemetry/opentelemetry-go#2476](https://github.com/open-telemetry/opentelemetry-go/pull/2476)\n- 2022-01-05 hanyuancheung(张瀚元) [open-telemetry/opentelemetry-go#2491](https://github.com/open-telemetry/opentelemetry-go/pull/2491)\n- 2022-01-05 hanyuancheung(张瀚元) [open-telemetry/opentelemetry-go#2493](https://github.com/open-telemetry/opentelemetry-go/pull/2493)\n\n### Prometheus\n- 2021-11-5 hanyuancheung(张瀚元) [prometheus/alertmanager#2749](https://github.com/prometheus/alertmanager/pull/2749)\n\n### Thanos\n\n- 2021-08-27 hanyuancheung(张瀚元) [thanos-io/thanos#4604](https://github.com/thanos-io/thanos/pull/4604)\n\n### FuchsiaOS-docs-zh_CN\n\n- 2021-06-13 hanyuancheung(张瀚元) [FuchsiaOS/FuchsiaOS-docs-zh_CN#67](https://github.com/FuchsiaOS/FuchsiaOS-docs-zh_CN/pull/67)\n- 2021-06-13 hanyuancheung(张瀚元) [FuchsiaOS/FuchsiaOS-docs-zh_CN#69](https://github.com/FuchsiaOS/FuchsiaOS-docs-zh_CN/pull/69)\n\n### 团队开源贡献记录\n\n**https://docs.qq.com/doc/DSUpUQmNRbEdaRkJ4** 感兴趣的朋友欢迎联系我微信进群\n\n在开源路上以后还会越走越远，每一步都有巨大的坑在等着去填，希望我能达到自己的目标！\n\n对我感兴趣的或者是同道中人，欢迎加上我的微信，下面就是我的微信二维码，别忘了写清楚备注信息哦😄\n\n![个人微信](../images/WechatCode.jpg)\n\n## 联系我\n\n* [GitHub](https://github.com/zhyChesterCheung)\n* [Weibo](https://weibo.com/u/5689093900)\n* [知乎](https://www.zhihu.com/people/la-la-la-la-la-la-la-ji-9)\n* [Facebook](https://www.facebook.com/chester.cheung.3538)\n* [Twitter](https://twitter.com/ChesterCheung4)\n* [LinkedIn](https://www.linkedin.com/in/chestercheung)\n* Email：cheung.zhy.csu@gmail.com\n* QQ number：2640617395\n","updated":"2022-01-08T17:06:51.591Z","path":"about/index.html","_id":"cky60pa1w0002kyoxdcw39sn1","comments":1,"layout":"page","content":"<h2 id=\"自我介绍\"><a href=\"#自我介绍\" class=\"headerlink\" title=\"自我介绍\"></a>自我介绍</h2><p>Name: Chester Cheung</p>\n<p>本科就读于中南大学本科, 主修电子信息工程, 辅修人工智能, 2019年 Missouri University 短期交换生, 智能网联汽车产业云软件工程师(初级);</p>\n<p>CNCF(Cloud-Native Computing Foundation, 云原生计算基金会) OpenTelemetry 社区成员, Thanos、Prometheus 社区贡献者。曾多次受上海花旗金融（中国）、腾讯学堂等邀请, 做相关领域技术分享;</p>\n<p>现腾讯后台工程师, 腾讯学堂青年导师, 2022届腾讯秋季校园招聘分享嘉宾, 参与公司可观测性中台建设; 腾讯 OpenTelemetry Oteam PMC 成员;</p>\n<p>作为第一发明人, 申请国家级发明专利2项; 在校期间, 共计国家级竞赛获奖2项, 省级竞赛获奖20余项, 校级竞赛获奖50余项;</p>\n<p>多次连续创业者;《好玩的书2020》编者（光明出版社）; 软硬件跨领域极客; 热衷公益事业; 定向帮扶贫困儿童, “非淡泊无以明志、非宁静无以致远”。</p>\n<h2 id=\"知名开源社区贡献记录：\"><a href=\"#知名开源社区贡献记录：\" class=\"headerlink\" title=\"知名开源社区贡献记录：\"></a>知名开源社区贡献记录：</h2><h3 id=\"OpenTelemetry-Go\"><a href=\"#OpenTelemetry-Go\" class=\"headerlink\" title=\"OpenTelemetry-Go\"></a>OpenTelemetry-Go</h3><ul>\n<li>2021-08-19 hanyuancheung(张瀚元) 成为OpenTelemetry社区成员 <a href=\"https://github.com/open-telemetry/community/issues/813\">open-telemetry/community#813</a></li>\n<li>2021-06-08 hanyuancheung(张瀚元) <a href=\"https://github.com/open-telemetry/opentelemetry-go/pull/1973\">opentelemetry/opentelemetry-go#1973</a></li>\n<li>2021-06-23 hanyuancheung(张瀚元) <a href=\"https://github.com/open-telemetry/opentelemetry-go/pull/2022\">open-telemetry/opentelemetry-go#2022</a></li>\n<li>2021-07-22 hanyuancheung(张瀚元) <a href=\"https://github.com/open-telemetry/opentelemetry-go/pull/2097\">open-telemetry/opentelemetry-go#2097</a></li>\n<li>2021-11-24 hanyuancheung(张瀚元) <a href=\"https://github.com/open-telemetry/opentelemetry-go/pull/2339\">open-telemetry/opentelemetry-go#2339</a></li>\n<li>2021-12-07 hanyuancheung(张瀚元) <a href=\"https://github.com/open-telemetry/opentelemetry-go/pull/2423\">open-telemetry/opentelemetry-go#2423</a></li>\n<li>2021-12-21 hanyuancheung(张瀚元) <a href=\"https://github.com/open-telemetry/opentelemetry-go/pull/2476\">open-telemetry/opentelemetry-go#2476</a></li>\n<li>2022-01-05 hanyuancheung(张瀚元) <a href=\"https://github.com/open-telemetry/opentelemetry-go/pull/2491\">open-telemetry/opentelemetry-go#2491</a></li>\n<li>2022-01-05 hanyuancheung(张瀚元) <a href=\"https://github.com/open-telemetry/opentelemetry-go/pull/2493\">open-telemetry/opentelemetry-go#2493</a></li>\n</ul>\n<h3 id=\"Prometheus\"><a href=\"#Prometheus\" class=\"headerlink\" title=\"Prometheus\"></a>Prometheus</h3><ul>\n<li>2021-11-5 hanyuancheung(张瀚元) <a href=\"https://github.com/prometheus/alertmanager/pull/2749\">prometheus/alertmanager#2749</a></li>\n</ul>\n<h3 id=\"Thanos\"><a href=\"#Thanos\" class=\"headerlink\" title=\"Thanos\"></a>Thanos</h3><ul>\n<li>2021-08-27 hanyuancheung(张瀚元) <a href=\"https://github.com/thanos-io/thanos/pull/4604\">thanos-io/thanos#4604</a></li>\n</ul>\n<h3 id=\"FuchsiaOS-docs-zh-CN\"><a href=\"#FuchsiaOS-docs-zh-CN\" class=\"headerlink\" title=\"FuchsiaOS-docs-zh_CN\"></a>FuchsiaOS-docs-zh_CN</h3><ul>\n<li>2021-06-13 hanyuancheung(张瀚元) <a href=\"https://github.com/FuchsiaOS/FuchsiaOS-docs-zh_CN/pull/67\">FuchsiaOS/FuchsiaOS-docs-zh_CN#67</a></li>\n<li>2021-06-13 hanyuancheung(张瀚元) <a href=\"https://github.com/FuchsiaOS/FuchsiaOS-docs-zh_CN/pull/69\">FuchsiaOS/FuchsiaOS-docs-zh_CN#69</a></li>\n</ul>\n<h3 id=\"团队开源贡献记录\"><a href=\"#团队开源贡献记录\" class=\"headerlink\" title=\"团队开源贡献记录\"></a>团队开源贡献记录</h3><p><strong><a href=\"https://docs.qq.com/doc/DSUpUQmNRbEdaRkJ4\">https://docs.qq.com/doc/DSUpUQmNRbEdaRkJ4</a></strong> 感兴趣的朋友欢迎联系我微信进群</p>\n<p>在开源路上以后还会越走越远，每一步都有巨大的坑在等着去填，希望我能达到自己的目标！</p>\n<p>对我感兴趣的或者是同道中人，欢迎加上我的微信，下面就是我的微信二维码，别忘了写清楚备注信息哦😄</p>\n<p><img src=\"../images/WechatCode.jpg\" alt=\"个人微信\"></p>\n<h2 id=\"联系我\"><a href=\"#联系我\" class=\"headerlink\" title=\"联系我\"></a>联系我</h2><ul>\n<li><a href=\"https://github.com/zhyChesterCheung\">GitHub</a></li>\n<li><a href=\"https://weibo.com/u/5689093900\">Weibo</a></li>\n<li><a href=\"https://www.zhihu.com/people/la-la-la-la-la-la-la-ji-9\">知乎</a></li>\n<li><a href=\"https://www.facebook.com/chester.cheung.3538\">Facebook</a></li>\n<li><a href=\"https://twitter.com/ChesterCheung4\">Twitter</a></li>\n<li><a href=\"https://www.linkedin.com/in/chestercheung\">LinkedIn</a></li>\n<li>Email：<a href=\"mailto:&#99;&#104;&#x65;&#x75;&#110;&#103;&#46;&#122;&#104;&#x79;&#x2e;&#x63;&#115;&#x75;&#x40;&#103;&#109;&#x61;&#x69;&#108;&#46;&#99;&#x6f;&#x6d;\">&#99;&#104;&#x65;&#x75;&#110;&#103;&#46;&#122;&#104;&#x79;&#x2e;&#x63;&#115;&#x75;&#x40;&#103;&#109;&#x61;&#x69;&#108;&#46;&#99;&#x6f;&#x6d;</a></li>\n<li>QQ number：2640617395</li>\n</ul>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"自我介绍\"><a href=\"#自我介绍\" class=\"headerlink\" title=\"自我介绍\"></a>自我介绍</h2><p>Name: Chester Cheung</p>\n<p>本科就读于中南大学本科, 主修电子信息工程, 辅修人工智能, 2019年 Missouri University 短期交换生, 智能网联汽车产业云软件工程师(初级);</p>\n<p>CNCF(Cloud-Native Computing Foundation, 云原生计算基金会) OpenTelemetry 社区成员, Thanos、Prometheus 社区贡献者。曾多次受上海花旗金融（中国）、腾讯学堂等邀请, 做相关领域技术分享;</p>\n<p>现腾讯后台工程师, 腾讯学堂青年导师, 2022届腾讯秋季校园招聘分享嘉宾, 参与公司可观测性中台建设; 腾讯 OpenTelemetry Oteam PMC 成员;</p>\n<p>作为第一发明人, 申请国家级发明专利2项; 在校期间, 共计国家级竞赛获奖2项, 省级竞赛获奖20余项, 校级竞赛获奖50余项;</p>\n<p>多次连续创业者;《好玩的书2020》编者（光明出版社）; 软硬件跨领域极客; 热衷公益事业; 定向帮扶贫困儿童, “非淡泊无以明志、非宁静无以致远”。</p>\n<h2 id=\"知名开源社区贡献记录：\"><a href=\"#知名开源社区贡献记录：\" class=\"headerlink\" title=\"知名开源社区贡献记录：\"></a>知名开源社区贡献记录：</h2><h3 id=\"OpenTelemetry-Go\"><a href=\"#OpenTelemetry-Go\" class=\"headerlink\" title=\"OpenTelemetry-Go\"></a>OpenTelemetry-Go</h3><ul>\n<li>2021-08-19 hanyuancheung(张瀚元) 成为OpenTelemetry社区成员 <a href=\"https://github.com/open-telemetry/community/issues/813\">open-telemetry/community#813</a></li>\n<li>2021-06-08 hanyuancheung(张瀚元) <a href=\"https://github.com/open-telemetry/opentelemetry-go/pull/1973\">opentelemetry/opentelemetry-go#1973</a></li>\n<li>2021-06-23 hanyuancheung(张瀚元) <a href=\"https://github.com/open-telemetry/opentelemetry-go/pull/2022\">open-telemetry/opentelemetry-go#2022</a></li>\n<li>2021-07-22 hanyuancheung(张瀚元) <a href=\"https://github.com/open-telemetry/opentelemetry-go/pull/2097\">open-telemetry/opentelemetry-go#2097</a></li>\n<li>2021-11-24 hanyuancheung(张瀚元) <a href=\"https://github.com/open-telemetry/opentelemetry-go/pull/2339\">open-telemetry/opentelemetry-go#2339</a></li>\n<li>2021-12-07 hanyuancheung(张瀚元) <a href=\"https://github.com/open-telemetry/opentelemetry-go/pull/2423\">open-telemetry/opentelemetry-go#2423</a></li>\n<li>2021-12-21 hanyuancheung(张瀚元) <a href=\"https://github.com/open-telemetry/opentelemetry-go/pull/2476\">open-telemetry/opentelemetry-go#2476</a></li>\n<li>2022-01-05 hanyuancheung(张瀚元) <a href=\"https://github.com/open-telemetry/opentelemetry-go/pull/2491\">open-telemetry/opentelemetry-go#2491</a></li>\n<li>2022-01-05 hanyuancheung(张瀚元) <a href=\"https://github.com/open-telemetry/opentelemetry-go/pull/2493\">open-telemetry/opentelemetry-go#2493</a></li>\n</ul>\n<h3 id=\"Prometheus\"><a href=\"#Prometheus\" class=\"headerlink\" title=\"Prometheus\"></a>Prometheus</h3><ul>\n<li>2021-11-5 hanyuancheung(张瀚元) <a href=\"https://github.com/prometheus/alertmanager/pull/2749\">prometheus/alertmanager#2749</a></li>\n</ul>\n<h3 id=\"Thanos\"><a href=\"#Thanos\" class=\"headerlink\" title=\"Thanos\"></a>Thanos</h3><ul>\n<li>2021-08-27 hanyuancheung(张瀚元) <a href=\"https://github.com/thanos-io/thanos/pull/4604\">thanos-io/thanos#4604</a></li>\n</ul>\n<h3 id=\"FuchsiaOS-docs-zh-CN\"><a href=\"#FuchsiaOS-docs-zh-CN\" class=\"headerlink\" title=\"FuchsiaOS-docs-zh_CN\"></a>FuchsiaOS-docs-zh_CN</h3><ul>\n<li>2021-06-13 hanyuancheung(张瀚元) <a href=\"https://github.com/FuchsiaOS/FuchsiaOS-docs-zh_CN/pull/67\">FuchsiaOS/FuchsiaOS-docs-zh_CN#67</a></li>\n<li>2021-06-13 hanyuancheung(张瀚元) <a href=\"https://github.com/FuchsiaOS/FuchsiaOS-docs-zh_CN/pull/69\">FuchsiaOS/FuchsiaOS-docs-zh_CN#69</a></li>\n</ul>\n<h3 id=\"团队开源贡献记录\"><a href=\"#团队开源贡献记录\" class=\"headerlink\" title=\"团队开源贡献记录\"></a>团队开源贡献记录</h3><p><strong><a href=\"https://docs.qq.com/doc/DSUpUQmNRbEdaRkJ4\">https://docs.qq.com/doc/DSUpUQmNRbEdaRkJ4</a></strong> 感兴趣的朋友欢迎联系我微信进群</p>\n<p>在开源路上以后还会越走越远，每一步都有巨大的坑在等着去填，希望我能达到自己的目标！</p>\n<p>对我感兴趣的或者是同道中人，欢迎加上我的微信，下面就是我的微信二维码，别忘了写清楚备注信息哦😄</p>\n<p><img src=\"../images/WechatCode.jpg\" alt=\"个人微信\"></p>\n<h2 id=\"联系我\"><a href=\"#联系我\" class=\"headerlink\" title=\"联系我\"></a>联系我</h2><ul>\n<li><a href=\"https://github.com/zhyChesterCheung\">GitHub</a></li>\n<li><a href=\"https://weibo.com/u/5689093900\">Weibo</a></li>\n<li><a href=\"https://www.zhihu.com/people/la-la-la-la-la-la-la-ji-9\">知乎</a></li>\n<li><a href=\"https://www.facebook.com/chester.cheung.3538\">Facebook</a></li>\n<li><a href=\"https://twitter.com/ChesterCheung4\">Twitter</a></li>\n<li><a href=\"https://www.linkedin.com/in/chestercheung\">LinkedIn</a></li>\n<li>Email：<a href=\"mailto:&#99;&#104;&#x65;&#x75;&#110;&#103;&#46;&#122;&#104;&#x79;&#x2e;&#x63;&#115;&#x75;&#x40;&#103;&#109;&#x61;&#x69;&#108;&#46;&#99;&#x6f;&#x6d;\">&#99;&#104;&#x65;&#x75;&#110;&#103;&#46;&#122;&#104;&#x79;&#x2e;&#x63;&#115;&#x75;&#x40;&#103;&#109;&#x61;&#x69;&#108;&#46;&#99;&#x6f;&#x6d;</a></li>\n<li>QQ number：2640617395</li>\n</ul>\n"}],"Post":[{"layout":"post","title":"佩剑温酒走江湖 -- 华中HackFun","date":"2019-06-01T15:00:00.000Z","cover":"https://img-blog.csdnimg.cn/20190528205457899.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM5MDE0NQ==,size_16,color_FFFFFF,t_70","_content":"\n\n> 每个勇士都希望通过一段成功的经历来证明自己，但仰望星空还需脚踏实地，真正的成长道路是：\n**输、输、输、输、输、输、输、输、输——赢！**\n——HackFun比赛有感\n\n这是最近的最后一个比赛了，其他项目也陆续都结题，这次打完就要用一段时间来沉淀下自己，总结这段时间的收获与体会，争取下次参赛能够做出强者的姿态！见识到很多大牛，了解到外面的世界，眼界宽阔不少；但实力一定要能配得上自己的眼界，否则付出的功夫可能都是泡沫浮云。\n\n![1](https://img-blog.csdnimg.cn/20190528210547152.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM5MDE0NQ==,size_16,color_FFFFFF,t_70)\n\n\n\n\n\n\n\n\n\n> ## 惨痛的开场\n\n这次我们组的路人局，没有事先找到靠谱的队友，湖大的两位学姐是真的什么都不会就来参加的(比我更勇敢)；也没有提前选择好合适的项目，造成了我们开局的不利。从比赛9点到场，到当天晚上9点之间，我们换了5个题目，每个题目都存在一定的可行性，但都被Mentor们指出了致命的错误。从知启智幼儿教育、智能货架、教育资源平台、老年人社区，到最后我们做的demo——focus基于深度学习的广告精准投递闭环，我们几乎尝遍了AI这两年普遍使用的几个方向。\n\n\n\n但最后选择这个项目，还是因为技术的落地性比较强，在较短的时间内能跑出一个简单的demo，后期功能的拓展性很高，而且整体项目的商业模式是我们做出的一次大胆尝试，虽然最后没有拿奖，但也为我们提供了一种全新的思路，算是收获匪浅。\n\n\n![2](https://img-blog.csdnimg.cn/20190528205457899.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM5MDE0NQ==,size_16,color_FFFFFF,t_70)\n\n> ## 项目详情介绍\n\nfocus基于深度学习的广告精准投递闭环，通过插件的形式向平台出售，安装插件的平台可以通过调用用户摄像头捕捉到用户的表情；我们通过Tensorflow的LSTM模型进行对用户情感倾向判断，以表情的细微变化判断出用户在阅读广告时的情感倾向，是喜欢、厌烦、焦虑、伤心或者其他什么；我们将收集到的数据整合后反馈给广告商家，商家收到反馈后可以根据广告的实际效果，对广告进行二次精准投放，提高用户的广告体验度和广告触达效率。\n\n\n\n有人提到设计用户隐私问题，我们考虑过了，但judge并没有在这个方向提问。我们通过用户授权使用、签署安全条款的方式对用户的隐私进行保护，可以简单化这个问题。\n\n\n\n然后现场我们跑出来一个简单的demo，但由于数据集太少，识别的精确度还暂时做不到细微变化的识别，只能识别大概的情感判断。这也是评委最后pass掉我们的一个原因，说我们的产品展示效果不够好，但对比于同组出线的其他两个项目，我真心觉得我们的效果展示还算不错的了(这也是我不服的地方)。\n\n\n\n> 效果展示图\n\n\n下面放出效果展示图看下(比较傻帽别介哈):\n\n![3](https://img-blog.csdnimg.cn/20190528211117660.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM5MDE0NQ==,size_16,color_FFFFFF,t_70)\n\n![4](https://img-blog.csdnimg.cn/20190528211127382.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM5MDE0NQ==,size_16,color_FFFFFF,t_70)\n\n![5](https://img-blog.csdnimg.cn/20190528211139359.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM5MDE0NQ==,size_16,color_FFFFFF,t_70)\n\n能做到这一步不错了，我们的训练集是小的可怜，再加上笔记本算力不够，目前只能做到不是很细微的情感判断，后期可能会继续优化下模型，再通过数据集的提高实现细微表情变化的判断。\n\n\n\n总体来说，这次比赛对人工智能的一些功能的应用算是有了一定的尝试，比如百度AI平台提供的多种SDK，提供语音、图像、文本、自然语言处理等多种人工智能的应用，非常方便！还有paddlepaddle和Tensorflow框架，运用都十分方便。最后冠军的项目其实没有太强的技术含量，但他们的公益性目的为他们加了不少分：\n\n\n\n林嘉俊和王进林两个化工院的带着两个不干活的计科的同胞，把两项已经成熟的应用结合到一起，想到了一个新的应用场景，帮助没有双手的残疾人使用电脑。通过百度人脸检测得到人脸的72个关键点，然后对返回的参数进行处理，通过头的方向的移动，实现对鼠标的移动操作；通过嘴上的15个关键点，以张嘴实现点击操作、以撅嘴实现双击操作；然后通过长时间张嘴实现输入文字，默认开始进行5秒的录音，将录音结果传送至云端进行解析，把结果返回到鼠标光标所在的位置，这样实现了打字的操作。\n\n\n\n输虽然是输了，但总体感觉收获还是蛮大的，算是对这类比赛的套路有了一定的了解，比赛看中的最主要的还是idea和你的效果演示，这两个做好了，加上演讲的生动形象，想不拿奖都难。接下来的时间就是沉淀阶段了，把近期的学习收获好好捋一捋，也算是没有白去体验了。\n","source":"_posts/2019-6-1-Hackthon.md","raw":"---\nlayout: post\ntitle: \"佩剑温酒走江湖 -- 华中HackFun\"\ndate: 2019-6-1 23:00:00\ncategories: thinking\ntags: \n  - Hackthon \n  - AI \n  - thinking\ncover: >- \n  https://img-blog.csdnimg.cn/20190528205457899.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM5MDE0NQ==,size_16,color_FFFFFF,t_70\n---\n\n\n> 每个勇士都希望通过一段成功的经历来证明自己，但仰望星空还需脚踏实地，真正的成长道路是：\n**输、输、输、输、输、输、输、输、输——赢！**\n——HackFun比赛有感\n\n这是最近的最后一个比赛了，其他项目也陆续都结题，这次打完就要用一段时间来沉淀下自己，总结这段时间的收获与体会，争取下次参赛能够做出强者的姿态！见识到很多大牛，了解到外面的世界，眼界宽阔不少；但实力一定要能配得上自己的眼界，否则付出的功夫可能都是泡沫浮云。\n\n![1](https://img-blog.csdnimg.cn/20190528210547152.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM5MDE0NQ==,size_16,color_FFFFFF,t_70)\n\n\n\n\n\n\n\n\n\n> ## 惨痛的开场\n\n这次我们组的路人局，没有事先找到靠谱的队友，湖大的两位学姐是真的什么都不会就来参加的(比我更勇敢)；也没有提前选择好合适的项目，造成了我们开局的不利。从比赛9点到场，到当天晚上9点之间，我们换了5个题目，每个题目都存在一定的可行性，但都被Mentor们指出了致命的错误。从知启智幼儿教育、智能货架、教育资源平台、老年人社区，到最后我们做的demo——focus基于深度学习的广告精准投递闭环，我们几乎尝遍了AI这两年普遍使用的几个方向。\n\n\n\n但最后选择这个项目，还是因为技术的落地性比较强，在较短的时间内能跑出一个简单的demo，后期功能的拓展性很高，而且整体项目的商业模式是我们做出的一次大胆尝试，虽然最后没有拿奖，但也为我们提供了一种全新的思路，算是收获匪浅。\n\n\n![2](https://img-blog.csdnimg.cn/20190528205457899.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM5MDE0NQ==,size_16,color_FFFFFF,t_70)\n\n> ## 项目详情介绍\n\nfocus基于深度学习的广告精准投递闭环，通过插件的形式向平台出售，安装插件的平台可以通过调用用户摄像头捕捉到用户的表情；我们通过Tensorflow的LSTM模型进行对用户情感倾向判断，以表情的细微变化判断出用户在阅读广告时的情感倾向，是喜欢、厌烦、焦虑、伤心或者其他什么；我们将收集到的数据整合后反馈给广告商家，商家收到反馈后可以根据广告的实际效果，对广告进行二次精准投放，提高用户的广告体验度和广告触达效率。\n\n\n\n有人提到设计用户隐私问题，我们考虑过了，但judge并没有在这个方向提问。我们通过用户授权使用、签署安全条款的方式对用户的隐私进行保护，可以简单化这个问题。\n\n\n\n然后现场我们跑出来一个简单的demo，但由于数据集太少，识别的精确度还暂时做不到细微变化的识别，只能识别大概的情感判断。这也是评委最后pass掉我们的一个原因，说我们的产品展示效果不够好，但对比于同组出线的其他两个项目，我真心觉得我们的效果展示还算不错的了(这也是我不服的地方)。\n\n\n\n> 效果展示图\n\n\n下面放出效果展示图看下(比较傻帽别介哈):\n\n![3](https://img-blog.csdnimg.cn/20190528211117660.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM5MDE0NQ==,size_16,color_FFFFFF,t_70)\n\n![4](https://img-blog.csdnimg.cn/20190528211127382.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM5MDE0NQ==,size_16,color_FFFFFF,t_70)\n\n![5](https://img-blog.csdnimg.cn/20190528211139359.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM5MDE0NQ==,size_16,color_FFFFFF,t_70)\n\n能做到这一步不错了，我们的训练集是小的可怜，再加上笔记本算力不够，目前只能做到不是很细微的情感判断，后期可能会继续优化下模型，再通过数据集的提高实现细微表情变化的判断。\n\n\n\n总体来说，这次比赛对人工智能的一些功能的应用算是有了一定的尝试，比如百度AI平台提供的多种SDK，提供语音、图像、文本、自然语言处理等多种人工智能的应用，非常方便！还有paddlepaddle和Tensorflow框架，运用都十分方便。最后冠军的项目其实没有太强的技术含量，但他们的公益性目的为他们加了不少分：\n\n\n\n林嘉俊和王进林两个化工院的带着两个不干活的计科的同胞，把两项已经成熟的应用结合到一起，想到了一个新的应用场景，帮助没有双手的残疾人使用电脑。通过百度人脸检测得到人脸的72个关键点，然后对返回的参数进行处理，通过头的方向的移动，实现对鼠标的移动操作；通过嘴上的15个关键点，以张嘴实现点击操作、以撅嘴实现双击操作；然后通过长时间张嘴实现输入文字，默认开始进行5秒的录音，将录音结果传送至云端进行解析，把结果返回到鼠标光标所在的位置，这样实现了打字的操作。\n\n\n\n输虽然是输了，但总体感觉收获还是蛮大的，算是对这类比赛的套路有了一定的了解，比赛看中的最主要的还是idea和你的效果演示，这两个做好了，加上演讲的生动形象，想不拿奖都难。接下来的时间就是沉淀阶段了，把近期的学习收获好好捋一捋，也算是没有白去体验了。\n","slug":"2019-6-1-Hackthon","published":1,"updated":"2022-01-08T16:24:42.090Z","_id":"cky61ey3y0000aqoxe3smaini","comments":1,"photos":[],"link":"","content":"<blockquote>\n<p>每个勇士都希望通过一段成功的经历来证明自己，但仰望星空还需脚踏实地，真正的成长道路是：<br><strong>输、输、输、输、输、输、输、输、输——赢！</strong><br>——HackFun比赛有感</p>\n</blockquote>\n<p>这是最近的最后一个比赛了，其他项目也陆续都结题，这次打完就要用一段时间来沉淀下自己，总结这段时间的收获与体会，争取下次参赛能够做出强者的姿态！见识到很多大牛，了解到外面的世界，眼界宽阔不少；但实力一定要能配得上自己的眼界，否则付出的功夫可能都是泡沫浮云。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190528210547152.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM5MDE0NQ==,size_16,color_FFFFFF,t_70\" alt=\"1\"></p>\n<blockquote>\n<h2 id=\"惨痛的开场\"><a href=\"#惨痛的开场\" class=\"headerlink\" title=\"惨痛的开场\"></a>惨痛的开场</h2></blockquote>\n<p>这次我们组的路人局，没有事先找到靠谱的队友，湖大的两位学姐是真的什么都不会就来参加的(比我更勇敢)；也没有提前选择好合适的项目，造成了我们开局的不利。从比赛9点到场，到当天晚上9点之间，我们换了5个题目，每个题目都存在一定的可行性，但都被Mentor们指出了致命的错误。从知启智幼儿教育、智能货架、教育资源平台、老年人社区，到最后我们做的demo——focus基于深度学习的广告精准投递闭环，我们几乎尝遍了AI这两年普遍使用的几个方向。</p>\n<p>但最后选择这个项目，还是因为技术的落地性比较强，在较短的时间内能跑出一个简单的demo，后期功能的拓展性很高，而且整体项目的商业模式是我们做出的一次大胆尝试，虽然最后没有拿奖，但也为我们提供了一种全新的思路，算是收获匪浅。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190528205457899.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM5MDE0NQ==,size_16,color_FFFFFF,t_70\" alt=\"2\"></p>\n<blockquote>\n<h2 id=\"项目详情介绍\"><a href=\"#项目详情介绍\" class=\"headerlink\" title=\"项目详情介绍\"></a>项目详情介绍</h2></blockquote>\n<p>focus基于深度学习的广告精准投递闭环，通过插件的形式向平台出售，安装插件的平台可以通过调用用户摄像头捕捉到用户的表情；我们通过Tensorflow的LSTM模型进行对用户情感倾向判断，以表情的细微变化判断出用户在阅读广告时的情感倾向，是喜欢、厌烦、焦虑、伤心或者其他什么；我们将收集到的数据整合后反馈给广告商家，商家收到反馈后可以根据广告的实际效果，对广告进行二次精准投放，提高用户的广告体验度和广告触达效率。</p>\n<p>有人提到设计用户隐私问题，我们考虑过了，但judge并没有在这个方向提问。我们通过用户授权使用、签署安全条款的方式对用户的隐私进行保护，可以简单化这个问题。</p>\n<p>然后现场我们跑出来一个简单的demo，但由于数据集太少，识别的精确度还暂时做不到细微变化的识别，只能识别大概的情感判断。这也是评委最后pass掉我们的一个原因，说我们的产品展示效果不够好，但对比于同组出线的其他两个项目，我真心觉得我们的效果展示还算不错的了(这也是我不服的地方)。</p>\n<blockquote>\n<p>效果展示图</p>\n</blockquote>\n<p>下面放出效果展示图看下(比较傻帽别介哈):</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190528211117660.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM5MDE0NQ==,size_16,color_FFFFFF,t_70\" alt=\"3\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190528211127382.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM5MDE0NQ==,size_16,color_FFFFFF,t_70\" alt=\"4\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190528211139359.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM5MDE0NQ==,size_16,color_FFFFFF,t_70\" alt=\"5\"></p>\n<p>能做到这一步不错了，我们的训练集是小的可怜，再加上笔记本算力不够，目前只能做到不是很细微的情感判断，后期可能会继续优化下模型，再通过数据集的提高实现细微表情变化的判断。</p>\n<p>总体来说，这次比赛对人工智能的一些功能的应用算是有了一定的尝试，比如百度AI平台提供的多种SDK，提供语音、图像、文本、自然语言处理等多种人工智能的应用，非常方便！还有paddlepaddle和Tensorflow框架，运用都十分方便。最后冠军的项目其实没有太强的技术含量，但他们的公益性目的为他们加了不少分：</p>\n<p>林嘉俊和王进林两个化工院的带着两个不干活的计科的同胞，把两项已经成熟的应用结合到一起，想到了一个新的应用场景，帮助没有双手的残疾人使用电脑。通过百度人脸检测得到人脸的72个关键点，然后对返回的参数进行处理，通过头的方向的移动，实现对鼠标的移动操作；通过嘴上的15个关键点，以张嘴实现点击操作、以撅嘴实现双击操作；然后通过长时间张嘴实现输入文字，默认开始进行5秒的录音，将录音结果传送至云端进行解析，把结果返回到鼠标光标所在的位置，这样实现了打字的操作。</p>\n<p>输虽然是输了，但总体感觉收获还是蛮大的，算是对这类比赛的套路有了一定的了解，比赛看中的最主要的还是idea和你的效果演示，这两个做好了，加上演讲的生动形象，想不拿奖都难。接下来的时间就是沉淀阶段了，把近期的学习收获好好捋一捋，也算是没有白去体验了。</p>\n","site":{"data":{}},"excerpt":"","more":"<blockquote>\n<p>每个勇士都希望通过一段成功的经历来证明自己，但仰望星空还需脚踏实地，真正的成长道路是：<br><strong>输、输、输、输、输、输、输、输、输——赢！</strong><br>——HackFun比赛有感</p>\n</blockquote>\n<p>这是最近的最后一个比赛了，其他项目也陆续都结题，这次打完就要用一段时间来沉淀下自己，总结这段时间的收获与体会，争取下次参赛能够做出强者的姿态！见识到很多大牛，了解到外面的世界，眼界宽阔不少；但实力一定要能配得上自己的眼界，否则付出的功夫可能都是泡沫浮云。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190528210547152.jpg?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM5MDE0NQ==,size_16,color_FFFFFF,t_70\" alt=\"1\"></p>\n<blockquote>\n<h2 id=\"惨痛的开场\"><a href=\"#惨痛的开场\" class=\"headerlink\" title=\"惨痛的开场\"></a>惨痛的开场</h2></blockquote>\n<p>这次我们组的路人局，没有事先找到靠谱的队友，湖大的两位学姐是真的什么都不会就来参加的(比我更勇敢)；也没有提前选择好合适的项目，造成了我们开局的不利。从比赛9点到场，到当天晚上9点之间，我们换了5个题目，每个题目都存在一定的可行性，但都被Mentor们指出了致命的错误。从知启智幼儿教育、智能货架、教育资源平台、老年人社区，到最后我们做的demo——focus基于深度学习的广告精准投递闭环，我们几乎尝遍了AI这两年普遍使用的几个方向。</p>\n<p>但最后选择这个项目，还是因为技术的落地性比较强，在较短的时间内能跑出一个简单的demo，后期功能的拓展性很高，而且整体项目的商业模式是我们做出的一次大胆尝试，虽然最后没有拿奖，但也为我们提供了一种全新的思路，算是收获匪浅。</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190528205457899.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM5MDE0NQ==,size_16,color_FFFFFF,t_70\" alt=\"2\"></p>\n<blockquote>\n<h2 id=\"项目详情介绍\"><a href=\"#项目详情介绍\" class=\"headerlink\" title=\"项目详情介绍\"></a>项目详情介绍</h2></blockquote>\n<p>focus基于深度学习的广告精准投递闭环，通过插件的形式向平台出售，安装插件的平台可以通过调用用户摄像头捕捉到用户的表情；我们通过Tensorflow的LSTM模型进行对用户情感倾向判断，以表情的细微变化判断出用户在阅读广告时的情感倾向，是喜欢、厌烦、焦虑、伤心或者其他什么；我们将收集到的数据整合后反馈给广告商家，商家收到反馈后可以根据广告的实际效果，对广告进行二次精准投放，提高用户的广告体验度和广告触达效率。</p>\n<p>有人提到设计用户隐私问题，我们考虑过了，但judge并没有在这个方向提问。我们通过用户授权使用、签署安全条款的方式对用户的隐私进行保护，可以简单化这个问题。</p>\n<p>然后现场我们跑出来一个简单的demo，但由于数据集太少，识别的精确度还暂时做不到细微变化的识别，只能识别大概的情感判断。这也是评委最后pass掉我们的一个原因，说我们的产品展示效果不够好，但对比于同组出线的其他两个项目，我真心觉得我们的效果展示还算不错的了(这也是我不服的地方)。</p>\n<blockquote>\n<p>效果展示图</p>\n</blockquote>\n<p>下面放出效果展示图看下(比较傻帽别介哈):</p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190528211117660.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM5MDE0NQ==,size_16,color_FFFFFF,t_70\" alt=\"3\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190528211127382.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM5MDE0NQ==,size_16,color_FFFFFF,t_70\" alt=\"4\"></p>\n<p><img src=\"https://img-blog.csdnimg.cn/20190528211139359.png?x-oss-process=image/watermark,type_ZmFuZ3poZW5naGVpdGk,shadow_10,text_aHR0cHM6Ly9ibG9nLmNzZG4ubmV0L3dlaXhpbl80NDM5MDE0NQ==,size_16,color_FFFFFF,t_70\" alt=\"5\"></p>\n<p>能做到这一步不错了，我们的训练集是小的可怜，再加上笔记本算力不够，目前只能做到不是很细微的情感判断，后期可能会继续优化下模型，再通过数据集的提高实现细微表情变化的判断。</p>\n<p>总体来说，这次比赛对人工智能的一些功能的应用算是有了一定的尝试，比如百度AI平台提供的多种SDK，提供语音、图像、文本、自然语言处理等多种人工智能的应用，非常方便！还有paddlepaddle和Tensorflow框架，运用都十分方便。最后冠军的项目其实没有太强的技术含量，但他们的公益性目的为他们加了不少分：</p>\n<p>林嘉俊和王进林两个化工院的带着两个不干活的计科的同胞，把两项已经成熟的应用结合到一起，想到了一个新的应用场景，帮助没有双手的残疾人使用电脑。通过百度人脸检测得到人脸的72个关键点，然后对返回的参数进行处理，通过头的方向的移动，实现对鼠标的移动操作；通过嘴上的15个关键点，以张嘴实现点击操作、以撅嘴实现双击操作；然后通过长时间张嘴实现输入文字，默认开始进行5秒的录音，将录音结果传送至云端进行解析，把结果返回到鼠标光标所在的位置，这样实现了打字的操作。</p>\n<p>输虽然是输了，但总体感觉收获还是蛮大的，算是对这类比赛的套路有了一定的了解，比赛看中的最主要的还是idea和你的效果演示，这两个做好了，加上演讲的生动形象，想不拿奖都难。接下来的时间就是沉淀阶段了，把近期的学习收获好好捋一捋，也算是没有白去体验了。</p>\n"},{"layout":"post","title":"基于MRTK的Microsoft HoloLens开发入门","date":"2019-08-23T15:00:00.000Z","cover":"http://csuzhang.info/photos/2019-8-23-0.jpg","_content":"\n### 基于MRTK的Microsoft HoloLens开发\n\n> 背景介绍\n\n前段时间刚回到长沙，碰巧远大张公子的建筑公司最新开发出一种建筑材料，想要借助HoloLens MixedReality进行现场动态展示，所以我们团队将项目承接了过来，进行HoloLens真机的入门级别项目开发，并后期计划教公司的技术人员快速上手开发流程。在对方投资的一台HoloLens真机的协助下，基于MRTK进行了一些入门开发，开发过程中由于国内进行相关开发的团队过少，且微软官方近期已将原HoloToolKit改版为MixedRealityToolKit也即MRTK，能搜到的有关HoloLens开发的博客很少，且大都存在时效性，给现今开发Hololens的团队带来了巨大的挑战；而官方文档又只有英文版且对入门级别不太友好，造成开发过程中难题不断。\n\n所幸，在团队夜以继日连续几天的开发环境配置/查看源码/项目开发的努力下，最终将初期任务圆满完成，我已经把初版Demo的项目源码传到了GitHub上，以下是项目地址：\n\n[https://github.com/hanyuancheung/HoloLens-Development](https://github.com/hanyuancheung/HoloLens-Development)\n\n![2019-8-23-0](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/2019-8-23-0.jpg)\n\n\n\n\n\n\n> 下面我们将放出项目的部分演示视频，仅供大家参考\n\n\n<video id=\"video\" controls=\"\" preload=\"none\" poster=\"\">\n    <source id=\"mp4\" src=\"https://hanyuancheung.github.io/photos/2019movie.mp4\" type=\"video/mp4\">\n</video>\n\n\n> 开发必备条件\n\n下面就是我们团队配置了一晚上才勉强通过的环境，大家千万小心，版本更新太快了......\n\n名称|环境\n--|:--:\nOS(macOS特别说明)|Windows 10(家庭版除外)\nVisual Studio|Visual Studio Community 2017及以上版本\nUnity3d|Unity 2018.4.6f1及以上版本\n\n### OS系统推荐\n\n强烈推荐使用windows进行U3d的开发及Visual Studio的调试，因为HoloLens本来就是微软自家的孩子，用来开发当然理所因当，而其他系统的兼容性和支持性就明显不如windows那么友好👬了，因为k配置环境到一半就会发现少了一个类似SDK的东西，叫做UWP(universal windows platform)，想将项目部署到HoloLens平台上，这个UWP是必须的，否则下一步就不要进行了，我劝你换台电脑再继续开发。\n\n> 对于macOS系统，我z找遍了网上所有说mac可以做开发的博客，并最终总结出：mac开发b需要装双系统或者虚拟机，其实还是逃不开windows10系统，所以劝你还是乖乖认命吧。\n\n### Visual Studio配置\n\nVisual Studio的配置是否正确决定了项目能否成功从Unity中构建导出，进而设计能否在Hololens生成APP及调试。下面是团队经多次尝试后确认的正确配置所需选择的，建议大家不要轻易修改：\n\n![2019-8-23-1](https://github.com/hanyuancheung/hanyuancheung.github.io/blob/main/source/photos/2019-8-23-1.png)\n\n![2019-8-23-2](https://github.com/hanyuancheung/hanyuancheung.github.io/blob/main/source/photos/2019-8-23-2.png)\n\n![2019-8-23-3](https://github.com/hanyuancheung/hanyuancheung.github.io/blob/main/source/photos/2019-8-23-3.png)\n\n![2019-8-23-4](https://github.com/hanyuancheung/hanyuancheung.github.io/blob/main/source/photos/2019-8-23-4.png)\n\n在进行Hololens的开发时，我们需要集成微软官方提供的 MixedRealityToolKit项目。MixedRealityToolKit ，即原来的HoloToolkit-Unity项目，简称MRTK，是微软官方的开源项目，用于帮助开发者快速开发 HoloLens 应用，能够快速为项目集成基本输入、空间映射和场景匹配等特性。\n\n关于该项目的详细介绍，可以参考MRTK官方说明文档：\n[https://microsoft.github.io/MixedRealityToolkit-Unity/README.html](https://microsoft.github.io/MixedRealityToolkit-Unity/README.html)\n\n在Github上下载MRTK项目代码：\n[https://github.com/microsoft/MixedRealityToolkit-Unity](https://github.com/microsoft/MixedRealityToolkit-Unity)\n\n![2019-8-23-5](https://github.com/hanyuancheung/hanyuancheung.github.io/blob/main/source/photos/2019-8-23-5.png)\n\n将下载的ZIP解压，使用Unity以打开工程的方式打开解压得到的文件夹，右击Assets，选择Export Package，将所有MRTK前缀的包全部选上，导出得到一unitypackage格式的文件，即是后续在Unity项目中可直接导入的MRTK工具包。\n\n![2019-8-23-6](https://github.com/hanyuancheung/hanyuancheung.github.io/blob/main/source/photos/2019-8-23-6.png)\n\n### Unity3d开发配置\n\nUnity3D是进行Hololens开发的主要平台，也是我们开发VR/AR/MR等等各种Reality的主要平台，对于各种建模和3D模型对有相对较好的支持，可以让美工/设计/开发人员共同操作的开发平台，下面是配置的步骤：\n使用Unity新建一个3D项目，由左上角选项栏沿Assets-import package-custom package途径引入上一步中导出的unitypackage文件。\n在成功导入后选项框上会出现一个新的选项——Mixed Reality Toolkit，点击并选择Add to Scene and Configure,选择添加图中高亮的MixedRealityToolKitConfigurationProfile，随即左侧框中出现MRTK及MRPlaySpace。\n\n![2019-8-23-7](https://github.com/hanyuancheung/hanyuancheung.github.io/blob/main/source/photos/2019-8-23-7.png)\n\n![2019-8-23-8](https://github.com/hanyuancheung/hanyuancheung.github.io/blob/main/source/photos/2019-8-23-8.png)\n\n![2019-8-23-9](https://github.com/hanyuancheung/hanyuancheung.github.io/blob/main/source/photos/2019-8-23-9.png)\n\n由于Hololens内装的是UWP版的Windows 10系统，而Unity默认创建项目运行的平台即标准版本，与之不符，因而需在左上角选项栏中沿File-Build Settings去转换平台为UWP版，相关设置更改如下图，且勿漏选，错选。（笔者使用的是Unity 2018.4.6f1版本）选好后点击Switch Platform即可。\n\n![2019-8-23-10](https://github.com/hanyuancheung/hanyuancheung.github.io/blob/main/source/photos/2019-8-23-10.png)\n\n仍在Building Settings中点击左下角的Player Settings，在Unity右侧的Inspector中选择XR Settings，勾选其中的Virtual Reality Support 和WSA Holographic Remoting supported。\n\n![2019-8-23-11](https://github.com/hanyuancheung/hanyuancheung.github.io/blob/main/source/photos/2019-8-23-11.png)\n\n截至此步基本配置已完成，可通过Holographic Remoting Player与设备连接，点击开始即快捷地调试已有项目。注意Holographic Remoting Player是在Hololens上安装，电脑端通过Window-XR-Holographic Emulation途径打开下面的界面，Emulation Mode 选择Remote to Device，在Hololens上打开Holographic Remoting Player后即可获取Hololens的ip地址，输入到Remote Machine中即可。\n\n详细使用方法见：[https://docs.microsoft.com/zh-cn/windows/mixed-reality/holographic-remoting-player](https://docs.microsoft.com/zh-cn/windows/mixed-reality/holographic-remoting-player)\n\n![2019-8-23-12](https://github.com/hanyuancheung/hanyuancheung.github.io/blob/main/source/photos/2019-8-23-12.png)\n\n强烈推荐在Windows Store（Windows自带）上下载Microsoft HoloLens，可实时获取设备第一视角的直播，及进行实时照相，录屏等功能，方便团队开发。\n\n![2019-8-23-13](https://github.com/hanyuancheung/hanyuancheung.github.io/blob/main/source/photos/2019-8-23-13.png)\n\n![2019-8-23-14](https://github.com/hanyuancheung/hanyuancheung.github.io/blob/main/source/photos/2019-8-23-14.png)\n\n本片博客的环境配置大多是靠队友支撑起来的，因为我用的是macOS电脑，所以最后我的电脑是无法跑起来的，但是这并不影响我对项目作出自己的贡献，我主要在项目中是负责C#脚本的编写和测试。\n\n这篇博客也是从队友那边参考了一部分，这里也算是注明出处：\n\n[https://blog.csdn.net/Brant_Stark/article/details/100043862](https://blog.csdn.net/Brant_Stark/article/details/100043862)\n","source":"_posts/2019-8-23-MR-HoloLens-develop.md","raw":"---\nlayout: post\ntitle:  \"基于MRTK的Microsoft HoloLens开发入门\"\ndate: 2019-8-23 23:00:00\ncategories: MixedReality\ntags: \n  - MR \n  - VR \n  - AR\ncover: >- \n  http://csuzhang.info/photos/2019-8-23-0.jpg\n---\n\n### 基于MRTK的Microsoft HoloLens开发\n\n> 背景介绍\n\n前段时间刚回到长沙，碰巧远大张公子的建筑公司最新开发出一种建筑材料，想要借助HoloLens MixedReality进行现场动态展示，所以我们团队将项目承接了过来，进行HoloLens真机的入门级别项目开发，并后期计划教公司的技术人员快速上手开发流程。在对方投资的一台HoloLens真机的协助下，基于MRTK进行了一些入门开发，开发过程中由于国内进行相关开发的团队过少，且微软官方近期已将原HoloToolKit改版为MixedRealityToolKit也即MRTK，能搜到的有关HoloLens开发的博客很少，且大都存在时效性，给现今开发Hololens的团队带来了巨大的挑战；而官方文档又只有英文版且对入门级别不太友好，造成开发过程中难题不断。\n\n所幸，在团队夜以继日连续几天的开发环境配置/查看源码/项目开发的努力下，最终将初期任务圆满完成，我已经把初版Demo的项目源码传到了GitHub上，以下是项目地址：\n\n[https://github.com/hanyuancheung/HoloLens-Development](https://github.com/hanyuancheung/HoloLens-Development)\n\n![2019-8-23-0](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/2019-8-23-0.jpg)\n\n\n\n\n\n\n> 下面我们将放出项目的部分演示视频，仅供大家参考\n\n\n<video id=\"video\" controls=\"\" preload=\"none\" poster=\"\">\n    <source id=\"mp4\" src=\"https://hanyuancheung.github.io/photos/2019movie.mp4\" type=\"video/mp4\">\n</video>\n\n\n> 开发必备条件\n\n下面就是我们团队配置了一晚上才勉强通过的环境，大家千万小心，版本更新太快了......\n\n名称|环境\n--|:--:\nOS(macOS特别说明)|Windows 10(家庭版除外)\nVisual Studio|Visual Studio Community 2017及以上版本\nUnity3d|Unity 2018.4.6f1及以上版本\n\n### OS系统推荐\n\n强烈推荐使用windows进行U3d的开发及Visual Studio的调试，因为HoloLens本来就是微软自家的孩子，用来开发当然理所因当，而其他系统的兼容性和支持性就明显不如windows那么友好👬了，因为k配置环境到一半就会发现少了一个类似SDK的东西，叫做UWP(universal windows platform)，想将项目部署到HoloLens平台上，这个UWP是必须的，否则下一步就不要进行了，我劝你换台电脑再继续开发。\n\n> 对于macOS系统，我z找遍了网上所有说mac可以做开发的博客，并最终总结出：mac开发b需要装双系统或者虚拟机，其实还是逃不开windows10系统，所以劝你还是乖乖认命吧。\n\n### Visual Studio配置\n\nVisual Studio的配置是否正确决定了项目能否成功从Unity中构建导出，进而设计能否在Hololens生成APP及调试。下面是团队经多次尝试后确认的正确配置所需选择的，建议大家不要轻易修改：\n\n![2019-8-23-1](https://github.com/hanyuancheung/hanyuancheung.github.io/blob/main/source/photos/2019-8-23-1.png)\n\n![2019-8-23-2](https://github.com/hanyuancheung/hanyuancheung.github.io/blob/main/source/photos/2019-8-23-2.png)\n\n![2019-8-23-3](https://github.com/hanyuancheung/hanyuancheung.github.io/blob/main/source/photos/2019-8-23-3.png)\n\n![2019-8-23-4](https://github.com/hanyuancheung/hanyuancheung.github.io/blob/main/source/photos/2019-8-23-4.png)\n\n在进行Hololens的开发时，我们需要集成微软官方提供的 MixedRealityToolKit项目。MixedRealityToolKit ，即原来的HoloToolkit-Unity项目，简称MRTK，是微软官方的开源项目，用于帮助开发者快速开发 HoloLens 应用，能够快速为项目集成基本输入、空间映射和场景匹配等特性。\n\n关于该项目的详细介绍，可以参考MRTK官方说明文档：\n[https://microsoft.github.io/MixedRealityToolkit-Unity/README.html](https://microsoft.github.io/MixedRealityToolkit-Unity/README.html)\n\n在Github上下载MRTK项目代码：\n[https://github.com/microsoft/MixedRealityToolkit-Unity](https://github.com/microsoft/MixedRealityToolkit-Unity)\n\n![2019-8-23-5](https://github.com/hanyuancheung/hanyuancheung.github.io/blob/main/source/photos/2019-8-23-5.png)\n\n将下载的ZIP解压，使用Unity以打开工程的方式打开解压得到的文件夹，右击Assets，选择Export Package，将所有MRTK前缀的包全部选上，导出得到一unitypackage格式的文件，即是后续在Unity项目中可直接导入的MRTK工具包。\n\n![2019-8-23-6](https://github.com/hanyuancheung/hanyuancheung.github.io/blob/main/source/photos/2019-8-23-6.png)\n\n### Unity3d开发配置\n\nUnity3D是进行Hololens开发的主要平台，也是我们开发VR/AR/MR等等各种Reality的主要平台，对于各种建模和3D模型对有相对较好的支持，可以让美工/设计/开发人员共同操作的开发平台，下面是配置的步骤：\n使用Unity新建一个3D项目，由左上角选项栏沿Assets-import package-custom package途径引入上一步中导出的unitypackage文件。\n在成功导入后选项框上会出现一个新的选项——Mixed Reality Toolkit，点击并选择Add to Scene and Configure,选择添加图中高亮的MixedRealityToolKitConfigurationProfile，随即左侧框中出现MRTK及MRPlaySpace。\n\n![2019-8-23-7](https://github.com/hanyuancheung/hanyuancheung.github.io/blob/main/source/photos/2019-8-23-7.png)\n\n![2019-8-23-8](https://github.com/hanyuancheung/hanyuancheung.github.io/blob/main/source/photos/2019-8-23-8.png)\n\n![2019-8-23-9](https://github.com/hanyuancheung/hanyuancheung.github.io/blob/main/source/photos/2019-8-23-9.png)\n\n由于Hololens内装的是UWP版的Windows 10系统，而Unity默认创建项目运行的平台即标准版本，与之不符，因而需在左上角选项栏中沿File-Build Settings去转换平台为UWP版，相关设置更改如下图，且勿漏选，错选。（笔者使用的是Unity 2018.4.6f1版本）选好后点击Switch Platform即可。\n\n![2019-8-23-10](https://github.com/hanyuancheung/hanyuancheung.github.io/blob/main/source/photos/2019-8-23-10.png)\n\n仍在Building Settings中点击左下角的Player Settings，在Unity右侧的Inspector中选择XR Settings，勾选其中的Virtual Reality Support 和WSA Holographic Remoting supported。\n\n![2019-8-23-11](https://github.com/hanyuancheung/hanyuancheung.github.io/blob/main/source/photos/2019-8-23-11.png)\n\n截至此步基本配置已完成，可通过Holographic Remoting Player与设备连接，点击开始即快捷地调试已有项目。注意Holographic Remoting Player是在Hololens上安装，电脑端通过Window-XR-Holographic Emulation途径打开下面的界面，Emulation Mode 选择Remote to Device，在Hololens上打开Holographic Remoting Player后即可获取Hololens的ip地址，输入到Remote Machine中即可。\n\n详细使用方法见：[https://docs.microsoft.com/zh-cn/windows/mixed-reality/holographic-remoting-player](https://docs.microsoft.com/zh-cn/windows/mixed-reality/holographic-remoting-player)\n\n![2019-8-23-12](https://github.com/hanyuancheung/hanyuancheung.github.io/blob/main/source/photos/2019-8-23-12.png)\n\n强烈推荐在Windows Store（Windows自带）上下载Microsoft HoloLens，可实时获取设备第一视角的直播，及进行实时照相，录屏等功能，方便团队开发。\n\n![2019-8-23-13](https://github.com/hanyuancheung/hanyuancheung.github.io/blob/main/source/photos/2019-8-23-13.png)\n\n![2019-8-23-14](https://github.com/hanyuancheung/hanyuancheung.github.io/blob/main/source/photos/2019-8-23-14.png)\n\n本片博客的环境配置大多是靠队友支撑起来的，因为我用的是macOS电脑，所以最后我的电脑是无法跑起来的，但是这并不影响我对项目作出自己的贡献，我主要在项目中是负责C#脚本的编写和测试。\n\n这篇博客也是从队友那边参考了一部分，这里也算是注明出处：\n\n[https://blog.csdn.net/Brant_Stark/article/details/100043862](https://blog.csdn.net/Brant_Stark/article/details/100043862)\n","slug":"2019-8-23-MR-HoloLens-develop","published":1,"updated":"2022-01-08T17:39:59.661Z","_id":"cky61ey3z0001aqoxbil57iw4","comments":1,"photos":[],"link":"","content":"<h3 id=\"基于MRTK的Microsoft-HoloLens开发\"><a href=\"#基于MRTK的Microsoft-HoloLens开发\" class=\"headerlink\" title=\"基于MRTK的Microsoft HoloLens开发\"></a>基于MRTK的Microsoft HoloLens开发</h3><blockquote>\n<p>背景介绍</p>\n</blockquote>\n<p>前段时间刚回到长沙，碰巧远大张公子的建筑公司最新开发出一种建筑材料，想要借助HoloLens MixedReality进行现场动态展示，所以我们团队将项目承接了过来，进行HoloLens真机的入门级别项目开发，并后期计划教公司的技术人员快速上手开发流程。在对方投资的一台HoloLens真机的协助下，基于MRTK进行了一些入门开发，开发过程中由于国内进行相关开发的团队过少，且微软官方近期已将原HoloToolKit改版为MixedRealityToolKit也即MRTK，能搜到的有关HoloLens开发的博客很少，且大都存在时效性，给现今开发Hololens的团队带来了巨大的挑战；而官方文档又只有英文版且对入门级别不太友好，造成开发过程中难题不断。</p>\n<p>所幸，在团队夜以继日连续几天的开发环境配置/查看源码/项目开发的努力下，最终将初期任务圆满完成，我已经把初版Demo的项目源码传到了GitHub上，以下是项目地址：</p>\n<p><a href=\"https://github.com/hanyuancheung/HoloLens-Development\">https://github.com/hanyuancheung/HoloLens-Development</a></p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/2019-8-23-0.jpg\" alt=\"2019-8-23-0\"></p>\n<blockquote>\n<p>下面我们将放出项目的部分演示视频，仅供大家参考</p>\n</blockquote>\n<video id=\"video\" controls=\"\" preload=\"none\" poster=\"\">\n    <source id=\"mp4\" src=\"https://hanyuancheung.github.io/photos/2019movie.mp4\" type=\"video/mp4\">\n</video>\n\n\n<blockquote>\n<p>开发必备条件</p>\n</blockquote>\n<p>下面就是我们团队配置了一晚上才勉强通过的环境，大家千万小心，版本更新太快了……</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th align=\"center\">环境</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>OS(macOS特别说明)</td>\n<td align=\"center\">Windows 10(家庭版除外)</td>\n</tr>\n<tr>\n<td>Visual Studio</td>\n<td align=\"center\">Visual Studio Community 2017及以上版本</td>\n</tr>\n<tr>\n<td>Unity3d</td>\n<td align=\"center\">Unity 2018.4.6f1及以上版本</td>\n</tr>\n</tbody></table>\n<h3 id=\"OS系统推荐\"><a href=\"#OS系统推荐\" class=\"headerlink\" title=\"OS系统推荐\"></a>OS系统推荐</h3><p>强烈推荐使用windows进行U3d的开发及Visual Studio的调试，因为HoloLens本来就是微软自家的孩子，用来开发当然理所因当，而其他系统的兼容性和支持性就明显不如windows那么友好👬了，因为k配置环境到一半就会发现少了一个类似SDK的东西，叫做UWP(universal windows platform)，想将项目部署到HoloLens平台上，这个UWP是必须的，否则下一步就不要进行了，我劝你换台电脑再继续开发。</p>\n<blockquote>\n<p>对于macOS系统，我z找遍了网上所有说mac可以做开发的博客，并最终总结出：mac开发b需要装双系统或者虚拟机，其实还是逃不开windows10系统，所以劝你还是乖乖认命吧。</p>\n</blockquote>\n<h3 id=\"Visual-Studio配置\"><a href=\"#Visual-Studio配置\" class=\"headerlink\" title=\"Visual Studio配置\"></a>Visual Studio配置</h3><p>Visual Studio的配置是否正确决定了项目能否成功从Unity中构建导出，进而设计能否在Hololens生成APP及调试。下面是团队经多次尝试后确认的正确配置所需选择的，建议大家不要轻易修改：</p>\n<p><img src=\"https://github.com/hanyuancheung/hanyuancheung.github.io/blob/main/source/photos/2019-8-23-1.png\" alt=\"2019-8-23-1\"></p>\n<p><img src=\"https://github.com/hanyuancheung/hanyuancheung.github.io/blob/main/source/photos/2019-8-23-2.png\" alt=\"2019-8-23-2\"></p>\n<p><img src=\"https://github.com/hanyuancheung/hanyuancheung.github.io/blob/main/source/photos/2019-8-23-3.png\" alt=\"2019-8-23-3\"></p>\n<p><img src=\"https://github.com/hanyuancheung/hanyuancheung.github.io/blob/main/source/photos/2019-8-23-4.png\" alt=\"2019-8-23-4\"></p>\n<p>在进行Hololens的开发时，我们需要集成微软官方提供的 MixedRealityToolKit项目。MixedRealityToolKit ，即原来的HoloToolkit-Unity项目，简称MRTK，是微软官方的开源项目，用于帮助开发者快速开发 HoloLens 应用，能够快速为项目集成基本输入、空间映射和场景匹配等特性。</p>\n<p>关于该项目的详细介绍，可以参考MRTK官方说明文档：<br><a href=\"https://microsoft.github.io/MixedRealityToolkit-Unity/README.html\">https://microsoft.github.io/MixedRealityToolkit-Unity/README.html</a></p>\n<p>在Github上下载MRTK项目代码：<br><a href=\"https://github.com/microsoft/MixedRealityToolkit-Unity\">https://github.com/microsoft/MixedRealityToolkit-Unity</a></p>\n<p><img src=\"https://github.com/hanyuancheung/hanyuancheung.github.io/blob/main/source/photos/2019-8-23-5.png\" alt=\"2019-8-23-5\"></p>\n<p>将下载的ZIP解压，使用Unity以打开工程的方式打开解压得到的文件夹，右击Assets，选择Export Package，将所有MRTK前缀的包全部选上，导出得到一unitypackage格式的文件，即是后续在Unity项目中可直接导入的MRTK工具包。</p>\n<p><img src=\"https://github.com/hanyuancheung/hanyuancheung.github.io/blob/main/source/photos/2019-8-23-6.png\" alt=\"2019-8-23-6\"></p>\n<h3 id=\"Unity3d开发配置\"><a href=\"#Unity3d开发配置\" class=\"headerlink\" title=\"Unity3d开发配置\"></a>Unity3d开发配置</h3><p>Unity3D是进行Hololens开发的主要平台，也是我们开发VR/AR/MR等等各种Reality的主要平台，对于各种建模和3D模型对有相对较好的支持，可以让美工/设计/开发人员共同操作的开发平台，下面是配置的步骤：<br>使用Unity新建一个3D项目，由左上角选项栏沿Assets-import package-custom package途径引入上一步中导出的unitypackage文件。<br>在成功导入后选项框上会出现一个新的选项——Mixed Reality Toolkit，点击并选择Add to Scene and Configure,选择添加图中高亮的MixedRealityToolKitConfigurationProfile，随即左侧框中出现MRTK及MRPlaySpace。</p>\n<p><img src=\"https://github.com/hanyuancheung/hanyuancheung.github.io/blob/main/source/photos/2019-8-23-7.png\" alt=\"2019-8-23-7\"></p>\n<p><img src=\"https://github.com/hanyuancheung/hanyuancheung.github.io/blob/main/source/photos/2019-8-23-8.png\" alt=\"2019-8-23-8\"></p>\n<p><img src=\"https://github.com/hanyuancheung/hanyuancheung.github.io/blob/main/source/photos/2019-8-23-9.png\" alt=\"2019-8-23-9\"></p>\n<p>由于Hololens内装的是UWP版的Windows 10系统，而Unity默认创建项目运行的平台即标准版本，与之不符，因而需在左上角选项栏中沿File-Build Settings去转换平台为UWP版，相关设置更改如下图，且勿漏选，错选。（笔者使用的是Unity 2018.4.6f1版本）选好后点击Switch Platform即可。</p>\n<p><img src=\"https://github.com/hanyuancheung/hanyuancheung.github.io/blob/main/source/photos/2019-8-23-10.png\" alt=\"2019-8-23-10\"></p>\n<p>仍在Building Settings中点击左下角的Player Settings，在Unity右侧的Inspector中选择XR Settings，勾选其中的Virtual Reality Support 和WSA Holographic Remoting supported。</p>\n<p><img src=\"https://github.com/hanyuancheung/hanyuancheung.github.io/blob/main/source/photos/2019-8-23-11.png\" alt=\"2019-8-23-11\"></p>\n<p>截至此步基本配置已完成，可通过Holographic Remoting Player与设备连接，点击开始即快捷地调试已有项目。注意Holographic Remoting Player是在Hololens上安装，电脑端通过Window-XR-Holographic Emulation途径打开下面的界面，Emulation Mode 选择Remote to Device，在Hololens上打开Holographic Remoting Player后即可获取Hololens的ip地址，输入到Remote Machine中即可。</p>\n<p>详细使用方法见：<a href=\"https://docs.microsoft.com/zh-cn/windows/mixed-reality/holographic-remoting-player\">https://docs.microsoft.com/zh-cn/windows/mixed-reality/holographic-remoting-player</a></p>\n<p><img src=\"https://github.com/hanyuancheung/hanyuancheung.github.io/blob/main/source/photos/2019-8-23-12.png\" alt=\"2019-8-23-12\"></p>\n<p>强烈推荐在Windows Store（Windows自带）上下载Microsoft HoloLens，可实时获取设备第一视角的直播，及进行实时照相，录屏等功能，方便团队开发。</p>\n<p><img src=\"https://github.com/hanyuancheung/hanyuancheung.github.io/blob/main/source/photos/2019-8-23-13.png\" alt=\"2019-8-23-13\"></p>\n<p><img src=\"https://github.com/hanyuancheung/hanyuancheung.github.io/blob/main/source/photos/2019-8-23-14.png\" alt=\"2019-8-23-14\"></p>\n<p>本片博客的环境配置大多是靠队友支撑起来的，因为我用的是macOS电脑，所以最后我的电脑是无法跑起来的，但是这并不影响我对项目作出自己的贡献，我主要在项目中是负责C#脚本的编写和测试。</p>\n<p>这篇博客也是从队友那边参考了一部分，这里也算是注明出处：</p>\n<p><a href=\"https://blog.csdn.net/Brant_Stark/article/details/100043862\">https://blog.csdn.net/Brant_Stark/article/details/100043862</a></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"基于MRTK的Microsoft-HoloLens开发\"><a href=\"#基于MRTK的Microsoft-HoloLens开发\" class=\"headerlink\" title=\"基于MRTK的Microsoft HoloLens开发\"></a>基于MRTK的Microsoft HoloLens开发</h3><blockquote>\n<p>背景介绍</p>\n</blockquote>\n<p>前段时间刚回到长沙，碰巧远大张公子的建筑公司最新开发出一种建筑材料，想要借助HoloLens MixedReality进行现场动态展示，所以我们团队将项目承接了过来，进行HoloLens真机的入门级别项目开发，并后期计划教公司的技术人员快速上手开发流程。在对方投资的一台HoloLens真机的协助下，基于MRTK进行了一些入门开发，开发过程中由于国内进行相关开发的团队过少，且微软官方近期已将原HoloToolKit改版为MixedRealityToolKit也即MRTK，能搜到的有关HoloLens开发的博客很少，且大都存在时效性，给现今开发Hololens的团队带来了巨大的挑战；而官方文档又只有英文版且对入门级别不太友好，造成开发过程中难题不断。</p>\n<p>所幸，在团队夜以继日连续几天的开发环境配置/查看源码/项目开发的努力下，最终将初期任务圆满完成，我已经把初版Demo的项目源码传到了GitHub上，以下是项目地址：</p>\n<p><a href=\"https://github.com/hanyuancheung/HoloLens-Development\">https://github.com/hanyuancheung/HoloLens-Development</a></p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/2019-8-23-0.jpg\" alt=\"2019-8-23-0\"></p>\n<blockquote>\n<p>下面我们将放出项目的部分演示视频，仅供大家参考</p>\n</blockquote>\n<video id=\"video\" controls=\"\" preload=\"none\" poster=\"\">\n    <source id=\"mp4\" src=\"https://hanyuancheung.github.io/photos/2019movie.mp4\" type=\"video/mp4\">\n</video>\n\n\n<blockquote>\n<p>开发必备条件</p>\n</blockquote>\n<p>下面就是我们团队配置了一晚上才勉强通过的环境，大家千万小心，版本更新太快了……</p>\n<table>\n<thead>\n<tr>\n<th>名称</th>\n<th align=\"center\">环境</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>OS(macOS特别说明)</td>\n<td align=\"center\">Windows 10(家庭版除外)</td>\n</tr>\n<tr>\n<td>Visual Studio</td>\n<td align=\"center\">Visual Studio Community 2017及以上版本</td>\n</tr>\n<tr>\n<td>Unity3d</td>\n<td align=\"center\">Unity 2018.4.6f1及以上版本</td>\n</tr>\n</tbody></table>\n<h3 id=\"OS系统推荐\"><a href=\"#OS系统推荐\" class=\"headerlink\" title=\"OS系统推荐\"></a>OS系统推荐</h3><p>强烈推荐使用windows进行U3d的开发及Visual Studio的调试，因为HoloLens本来就是微软自家的孩子，用来开发当然理所因当，而其他系统的兼容性和支持性就明显不如windows那么友好👬了，因为k配置环境到一半就会发现少了一个类似SDK的东西，叫做UWP(universal windows platform)，想将项目部署到HoloLens平台上，这个UWP是必须的，否则下一步就不要进行了，我劝你换台电脑再继续开发。</p>\n<blockquote>\n<p>对于macOS系统，我z找遍了网上所有说mac可以做开发的博客，并最终总结出：mac开发b需要装双系统或者虚拟机，其实还是逃不开windows10系统，所以劝你还是乖乖认命吧。</p>\n</blockquote>\n<h3 id=\"Visual-Studio配置\"><a href=\"#Visual-Studio配置\" class=\"headerlink\" title=\"Visual Studio配置\"></a>Visual Studio配置</h3><p>Visual Studio的配置是否正确决定了项目能否成功从Unity中构建导出，进而设计能否在Hololens生成APP及调试。下面是团队经多次尝试后确认的正确配置所需选择的，建议大家不要轻易修改：</p>\n<p><img src=\"https://github.com/hanyuancheung/hanyuancheung.github.io/blob/main/source/photos/2019-8-23-1.png\" alt=\"2019-8-23-1\"></p>\n<p><img src=\"https://github.com/hanyuancheung/hanyuancheung.github.io/blob/main/source/photos/2019-8-23-2.png\" alt=\"2019-8-23-2\"></p>\n<p><img src=\"https://github.com/hanyuancheung/hanyuancheung.github.io/blob/main/source/photos/2019-8-23-3.png\" alt=\"2019-8-23-3\"></p>\n<p><img src=\"https://github.com/hanyuancheung/hanyuancheung.github.io/blob/main/source/photos/2019-8-23-4.png\" alt=\"2019-8-23-4\"></p>\n<p>在进行Hololens的开发时，我们需要集成微软官方提供的 MixedRealityToolKit项目。MixedRealityToolKit ，即原来的HoloToolkit-Unity项目，简称MRTK，是微软官方的开源项目，用于帮助开发者快速开发 HoloLens 应用，能够快速为项目集成基本输入、空间映射和场景匹配等特性。</p>\n<p>关于该项目的详细介绍，可以参考MRTK官方说明文档：<br><a href=\"https://microsoft.github.io/MixedRealityToolkit-Unity/README.html\">https://microsoft.github.io/MixedRealityToolkit-Unity/README.html</a></p>\n<p>在Github上下载MRTK项目代码：<br><a href=\"https://github.com/microsoft/MixedRealityToolkit-Unity\">https://github.com/microsoft/MixedRealityToolkit-Unity</a></p>\n<p><img src=\"https://github.com/hanyuancheung/hanyuancheung.github.io/blob/main/source/photos/2019-8-23-5.png\" alt=\"2019-8-23-5\"></p>\n<p>将下载的ZIP解压，使用Unity以打开工程的方式打开解压得到的文件夹，右击Assets，选择Export Package，将所有MRTK前缀的包全部选上，导出得到一unitypackage格式的文件，即是后续在Unity项目中可直接导入的MRTK工具包。</p>\n<p><img src=\"https://github.com/hanyuancheung/hanyuancheung.github.io/blob/main/source/photos/2019-8-23-6.png\" alt=\"2019-8-23-6\"></p>\n<h3 id=\"Unity3d开发配置\"><a href=\"#Unity3d开发配置\" class=\"headerlink\" title=\"Unity3d开发配置\"></a>Unity3d开发配置</h3><p>Unity3D是进行Hololens开发的主要平台，也是我们开发VR/AR/MR等等各种Reality的主要平台，对于各种建模和3D模型对有相对较好的支持，可以让美工/设计/开发人员共同操作的开发平台，下面是配置的步骤：<br>使用Unity新建一个3D项目，由左上角选项栏沿Assets-import package-custom package途径引入上一步中导出的unitypackage文件。<br>在成功导入后选项框上会出现一个新的选项——Mixed Reality Toolkit，点击并选择Add to Scene and Configure,选择添加图中高亮的MixedRealityToolKitConfigurationProfile，随即左侧框中出现MRTK及MRPlaySpace。</p>\n<p><img src=\"https://github.com/hanyuancheung/hanyuancheung.github.io/blob/main/source/photos/2019-8-23-7.png\" alt=\"2019-8-23-7\"></p>\n<p><img src=\"https://github.com/hanyuancheung/hanyuancheung.github.io/blob/main/source/photos/2019-8-23-8.png\" alt=\"2019-8-23-8\"></p>\n<p><img src=\"https://github.com/hanyuancheung/hanyuancheung.github.io/blob/main/source/photos/2019-8-23-9.png\" alt=\"2019-8-23-9\"></p>\n<p>由于Hololens内装的是UWP版的Windows 10系统，而Unity默认创建项目运行的平台即标准版本，与之不符，因而需在左上角选项栏中沿File-Build Settings去转换平台为UWP版，相关设置更改如下图，且勿漏选，错选。（笔者使用的是Unity 2018.4.6f1版本）选好后点击Switch Platform即可。</p>\n<p><img src=\"https://github.com/hanyuancheung/hanyuancheung.github.io/blob/main/source/photos/2019-8-23-10.png\" alt=\"2019-8-23-10\"></p>\n<p>仍在Building Settings中点击左下角的Player Settings，在Unity右侧的Inspector中选择XR Settings，勾选其中的Virtual Reality Support 和WSA Holographic Remoting supported。</p>\n<p><img src=\"https://github.com/hanyuancheung/hanyuancheung.github.io/blob/main/source/photos/2019-8-23-11.png\" alt=\"2019-8-23-11\"></p>\n<p>截至此步基本配置已完成，可通过Holographic Remoting Player与设备连接，点击开始即快捷地调试已有项目。注意Holographic Remoting Player是在Hololens上安装，电脑端通过Window-XR-Holographic Emulation途径打开下面的界面，Emulation Mode 选择Remote to Device，在Hololens上打开Holographic Remoting Player后即可获取Hololens的ip地址，输入到Remote Machine中即可。</p>\n<p>详细使用方法见：<a href=\"https://docs.microsoft.com/zh-cn/windows/mixed-reality/holographic-remoting-player\">https://docs.microsoft.com/zh-cn/windows/mixed-reality/holographic-remoting-player</a></p>\n<p><img src=\"https://github.com/hanyuancheung/hanyuancheung.github.io/blob/main/source/photos/2019-8-23-12.png\" alt=\"2019-8-23-12\"></p>\n<p>强烈推荐在Windows Store（Windows自带）上下载Microsoft HoloLens，可实时获取设备第一视角的直播，及进行实时照相，录屏等功能，方便团队开发。</p>\n<p><img src=\"https://github.com/hanyuancheung/hanyuancheung.github.io/blob/main/source/photos/2019-8-23-13.png\" alt=\"2019-8-23-13\"></p>\n<p><img src=\"https://github.com/hanyuancheung/hanyuancheung.github.io/blob/main/source/photos/2019-8-23-14.png\" alt=\"2019-8-23-14\"></p>\n<p>本片博客的环境配置大多是靠队友支撑起来的，因为我用的是macOS电脑，所以最后我的电脑是无法跑起来的，但是这并不影响我对项目作出自己的贡献，我主要在项目中是负责C#脚本的编写和测试。</p>\n<p>这篇博客也是从队友那边参考了一部分，这里也算是注明出处：</p>\n<p><a href=\"https://blog.csdn.net/Brant_Stark/article/details/100043862\">https://blog.csdn.net/Brant_Stark/article/details/100043862</a></p>\n"},{"layout":"post","title":"Operating System 2","date":"2019-10-23T10:00:00.000Z","cover":"http://csuzhang.info/photos/OS-2.png","_content":"\n\n## 一、进程的定义、组成、组织、特征\n\n#### 进程的定义\n\n1. 进程是程序的一次执行过程\n\n2. 进程是具有独立功能的程序在数据集合上运行的过程，**是系统进行调度和资源分配的独立单元**\n\n> 进程实体 = 程序段 + 数据段 + PCB(进程控制块)\n\n**注意区分**：进程和进程实体：进程是动态的，进程实体是静态的\n\n![OS-2](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/OS-2.png)\n\n\n\n\n\n\n\n#### PCB(进程管理块):\n\n为了描述控制进程的运行，系统中存放进程的管理和控制信息的数据结构称为进程控制块（Process Control Block）。它是进程实体的一部分，**1.是操作系统中最重要的记录性数据结构**。它是**2.进程管理和控制的最重要的数据结构**，每一个进程均有一个PCB，在创建进程时，建立PCB，伴随进程运行的全过程，直到进程撤消而撤消。所谓的创建进程和撤销进程，都是指对 PCB 的操作。\n\n程序段: 存放执行的代码；\n\n数据段: 存放程序运行过程中处理的各种数据；\n\n#### Question: \n\n> 进程控制块的作用是什么？PCB中应包括哪些信息？\n\n进程控制块的作用是：进程控制块用于保存每个进程和资源的相关信息，包括进程标识、空间、运行状态、资源等信息。以便于操作系统管理和控制进程和资源。\nPCB中应包括：1、进程标识信息：本进程的标识、父进程的标识、进程所属用户的标识。2、处理机状态信息。保存进程的运行现场信息，包括用户可用寄存器的信息；控制和状态寄存器的信息；栈指针。\n\n#### 进程的组织方式\n\n是指多个进程之间的组织形式\n\n1. 链接方式：\n(1)按照进程状态将PCB划分为多个队列\n(2)OS持有指向各个队列的指针\n\n2. 索引方式：\n(1)根据进程的状态，建立几张索引表\n(2)OS持有指向各个索引表的指针\n\n**一个系统中，进程成百上千，必须选择合适的合适的方式进行有效的管理。**\n\n#### 进程的特征\n\n![OS-4](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/OS-4.png)\n\n### 对这块小结下：\n\n![OS-5](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/OS-5.png)\n\n## 二、进程的状态与转换\n\n#### 进程的5种状态\n\n**3种基本状态：**\n\n1. 运行态：占有CPU，并正在运行的进程\n\n2. 就绪态：已经分配有运行的资源和条件，可以说：“**万事俱备，只欠CPU**”\n\n3. 阻塞态：等待资源的分配，这里不考虑CPU时间的分配，反正暂时不能运行\n\n**2种过程中的状态：**\n\n4. 创建态：进程正在创建，OS为其分配资源，初始化PCB\n\n5. 终止态：进程正在撤销，OS回收其资源，撤销PC（或者是由于bug导致进程无法继续执行，需进行撤销）\n\n![OS-6](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/OS-6.png)\n\n> 注意以下内容:\n\n1. 只有就绪态和运行态可以相互转换，其它的都是单向转换。就绪状态的进程通过调度算法从而获得 CPU 时间，转为运行状态；\n\n2. 而运行状态的进程，在分配给它的 CPU 时间片用完之后就会转为就绪状态，等待下一次调度。阻塞状态是缺少需要的资源从而由运行状态转换而来，但是该资源不包括CPU 时间，缺少 CPU 时间会从运行态转换为就绪态；\n\n3. 进程只能自己阻塞自己，因为只有进程自身才知道何时需要等待某种事件的发生；\n\n### 本章小节：\n\n![OS-7](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/OS-7.png)\n\n#### $$ Question：进程创建的主要工作是什么？\n\n1. 接收进程运行现场初始值，初始优先级、执行程序描述，其它资源等参数。\n2. 请求分配进程描述块PCB空间，得到一个内部数字进程标识。 \n3. 用从父进程传来的参数初始化PCB表。\n4. 产生描述进程空间的数据结构，初始化进程空间，建立程序段，数据段、栈段等。\n5. 用进程运行现场初始值设置处理机现场保护区；造一个进程运行栈帧。\n6. 置好父进程等关系域，同时将进程置成就绪状态。 \n7. 将PCB表挂入就绪队列，等待时机被调度运行\n\n## 进程控制(即对进程进行转换)\n\n对系统中的进程进行有效管理，**创建、撤销、状态切换**，通过就绪队列和阻塞队列来实现状态切换\n\n#### 如何实现进程切换？\n\n**原语的特点：**\n\n1. 操作原子性、运行时间短、调用频繁\n\n2. 运行在核心态，权限内非常大、属于特权指令\n\n3. 位于操作系统最底层，最接近硬件的部分\n\n> 实现并发性-->产生中断处理(CPU从用户态切换到核心态)-->关中断指令-->原语代码-->开中断指令-->继续中断处理\n\n**一气呵成，不可分割**\n\n**原语的任务**无外乎3点\n\n1. 更新PCB中的信息，包括进程状态标志、保存运行环境到PCB、从PCB恢复环境等\n所有进程的控制原语一定修改进程状态标志，抢夺CPU的使用权，必定保存其运行环境，其进程开始运行前必定恢复运行环境\n\n2. 将PCB插入合适的队列（就绪、阻塞队列）\n\n3. 分配回收合适的资源\n\n> 进程的终止\n\n1. 从PCB中找到终止进程\n\n2. 若程序在运行，立即剥夺CPU，将CPU的时间分配给其他进程\n\n3. 终止其所有子进程\n\n4. 将该进程的所有资源归还给父进程或OS\n\n5. 删除该PCB\n\n> 进程的阻塞和唤（状态切换）\n\n**阻塞和唤醒原语必须成对使用**\n\n1. 阻塞原语：\na. 找到阻塞进程对应的PCB\nb. 保持进程环境，PCB信息修改为“阻塞态”，暂停进程的运行\nc. 将PCB插入相应事件的等待队列\n\n2. 唤醒原语：\na. 在事件等待队列中找到PCB\nb. 将PCB从等待队列中移除，设为“就绪态”\nc. 将PCB插入就绪队列，等待被CPU调度\n\n**进程的切换**\n\n1. 将运行环境存入PCB\n\n2. PCB移入相应的队列中\n\n3. 选择另一个进程执行，更新其PCB\n\n4. 根据PCB恢复新进程的运行环境\n\n\n","source":"_posts/2019-10-23-Operating-System-2.md","raw":"---\nlayout: post\ntitle:  \"Operating System 2\"\ndate: 2019-10-23 18:00:00\ncategories: OS\ntags: \n  - OS \n  - Linux\ncover: >-\n  http://csuzhang.info/photos/OS-2.png\n---\n\n\n## 一、进程的定义、组成、组织、特征\n\n#### 进程的定义\n\n1. 进程是程序的一次执行过程\n\n2. 进程是具有独立功能的程序在数据集合上运行的过程，**是系统进行调度和资源分配的独立单元**\n\n> 进程实体 = 程序段 + 数据段 + PCB(进程控制块)\n\n**注意区分**：进程和进程实体：进程是动态的，进程实体是静态的\n\n![OS-2](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/OS-2.png)\n\n\n\n\n\n\n\n#### PCB(进程管理块):\n\n为了描述控制进程的运行，系统中存放进程的管理和控制信息的数据结构称为进程控制块（Process Control Block）。它是进程实体的一部分，**1.是操作系统中最重要的记录性数据结构**。它是**2.进程管理和控制的最重要的数据结构**，每一个进程均有一个PCB，在创建进程时，建立PCB，伴随进程运行的全过程，直到进程撤消而撤消。所谓的创建进程和撤销进程，都是指对 PCB 的操作。\n\n程序段: 存放执行的代码；\n\n数据段: 存放程序运行过程中处理的各种数据；\n\n#### Question: \n\n> 进程控制块的作用是什么？PCB中应包括哪些信息？\n\n进程控制块的作用是：进程控制块用于保存每个进程和资源的相关信息，包括进程标识、空间、运行状态、资源等信息。以便于操作系统管理和控制进程和资源。\nPCB中应包括：1、进程标识信息：本进程的标识、父进程的标识、进程所属用户的标识。2、处理机状态信息。保存进程的运行现场信息，包括用户可用寄存器的信息；控制和状态寄存器的信息；栈指针。\n\n#### 进程的组织方式\n\n是指多个进程之间的组织形式\n\n1. 链接方式：\n(1)按照进程状态将PCB划分为多个队列\n(2)OS持有指向各个队列的指针\n\n2. 索引方式：\n(1)根据进程的状态，建立几张索引表\n(2)OS持有指向各个索引表的指针\n\n**一个系统中，进程成百上千，必须选择合适的合适的方式进行有效的管理。**\n\n#### 进程的特征\n\n![OS-4](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/OS-4.png)\n\n### 对这块小结下：\n\n![OS-5](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/OS-5.png)\n\n## 二、进程的状态与转换\n\n#### 进程的5种状态\n\n**3种基本状态：**\n\n1. 运行态：占有CPU，并正在运行的进程\n\n2. 就绪态：已经分配有运行的资源和条件，可以说：“**万事俱备，只欠CPU**”\n\n3. 阻塞态：等待资源的分配，这里不考虑CPU时间的分配，反正暂时不能运行\n\n**2种过程中的状态：**\n\n4. 创建态：进程正在创建，OS为其分配资源，初始化PCB\n\n5. 终止态：进程正在撤销，OS回收其资源，撤销PC（或者是由于bug导致进程无法继续执行，需进行撤销）\n\n![OS-6](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/OS-6.png)\n\n> 注意以下内容:\n\n1. 只有就绪态和运行态可以相互转换，其它的都是单向转换。就绪状态的进程通过调度算法从而获得 CPU 时间，转为运行状态；\n\n2. 而运行状态的进程，在分配给它的 CPU 时间片用完之后就会转为就绪状态，等待下一次调度。阻塞状态是缺少需要的资源从而由运行状态转换而来，但是该资源不包括CPU 时间，缺少 CPU 时间会从运行态转换为就绪态；\n\n3. 进程只能自己阻塞自己，因为只有进程自身才知道何时需要等待某种事件的发生；\n\n### 本章小节：\n\n![OS-7](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/OS-7.png)\n\n#### $$ Question：进程创建的主要工作是什么？\n\n1. 接收进程运行现场初始值，初始优先级、执行程序描述，其它资源等参数。\n2. 请求分配进程描述块PCB空间，得到一个内部数字进程标识。 \n3. 用从父进程传来的参数初始化PCB表。\n4. 产生描述进程空间的数据结构，初始化进程空间，建立程序段，数据段、栈段等。\n5. 用进程运行现场初始值设置处理机现场保护区；造一个进程运行栈帧。\n6. 置好父进程等关系域，同时将进程置成就绪状态。 \n7. 将PCB表挂入就绪队列，等待时机被调度运行\n\n## 进程控制(即对进程进行转换)\n\n对系统中的进程进行有效管理，**创建、撤销、状态切换**，通过就绪队列和阻塞队列来实现状态切换\n\n#### 如何实现进程切换？\n\n**原语的特点：**\n\n1. 操作原子性、运行时间短、调用频繁\n\n2. 运行在核心态，权限内非常大、属于特权指令\n\n3. 位于操作系统最底层，最接近硬件的部分\n\n> 实现并发性-->产生中断处理(CPU从用户态切换到核心态)-->关中断指令-->原语代码-->开中断指令-->继续中断处理\n\n**一气呵成，不可分割**\n\n**原语的任务**无外乎3点\n\n1. 更新PCB中的信息，包括进程状态标志、保存运行环境到PCB、从PCB恢复环境等\n所有进程的控制原语一定修改进程状态标志，抢夺CPU的使用权，必定保存其运行环境，其进程开始运行前必定恢复运行环境\n\n2. 将PCB插入合适的队列（就绪、阻塞队列）\n\n3. 分配回收合适的资源\n\n> 进程的终止\n\n1. 从PCB中找到终止进程\n\n2. 若程序在运行，立即剥夺CPU，将CPU的时间分配给其他进程\n\n3. 终止其所有子进程\n\n4. 将该进程的所有资源归还给父进程或OS\n\n5. 删除该PCB\n\n> 进程的阻塞和唤（状态切换）\n\n**阻塞和唤醒原语必须成对使用**\n\n1. 阻塞原语：\na. 找到阻塞进程对应的PCB\nb. 保持进程环境，PCB信息修改为“阻塞态”，暂停进程的运行\nc. 将PCB插入相应事件的等待队列\n\n2. 唤醒原语：\na. 在事件等待队列中找到PCB\nb. 将PCB从等待队列中移除，设为“就绪态”\nc. 将PCB插入就绪队列，等待被CPU调度\n\n**进程的切换**\n\n1. 将运行环境存入PCB\n\n2. PCB移入相应的队列中\n\n3. 选择另一个进程执行，更新其PCB\n\n4. 根据PCB恢复新进程的运行环境\n\n\n","slug":"2019-10-23-Operating-System-2","published":1,"updated":"2022-01-08T17:42:42.763Z","_id":"cky61ey410004aqox2x0tc4jw","comments":1,"photos":[],"link":"","content":"<h2 id=\"一、进程的定义、组成、组织、特征\"><a href=\"#一、进程的定义、组成、组织、特征\" class=\"headerlink\" title=\"一、进程的定义、组成、组织、特征\"></a>一、进程的定义、组成、组织、特征</h2><h4 id=\"进程的定义\"><a href=\"#进程的定义\" class=\"headerlink\" title=\"进程的定义\"></a>进程的定义</h4><ol>\n<li><p>进程是程序的一次执行过程</p>\n</li>\n<li><p>进程是具有独立功能的程序在数据集合上运行的过程，<strong>是系统进行调度和资源分配的独立单元</strong></p>\n</li>\n</ol>\n<blockquote>\n<p>进程实体 = 程序段 + 数据段 + PCB(进程控制块)</p>\n</blockquote>\n<p><strong>注意区分</strong>：进程和进程实体：进程是动态的，进程实体是静态的</p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/OS-2.png\" alt=\"OS-2\"></p>\n<h4 id=\"PCB-进程管理块\"><a href=\"#PCB-进程管理块\" class=\"headerlink\" title=\"PCB(进程管理块):\"></a>PCB(进程管理块):</h4><p>为了描述控制进程的运行，系统中存放进程的管理和控制信息的数据结构称为进程控制块（Process Control Block）。它是进程实体的一部分，<strong>1.是操作系统中最重要的记录性数据结构</strong>。它是<strong>2.进程管理和控制的最重要的数据结构</strong>，每一个进程均有一个PCB，在创建进程时，建立PCB，伴随进程运行的全过程，直到进程撤消而撤消。所谓的创建进程和撤销进程，都是指对 PCB 的操作。</p>\n<p>程序段: 存放执行的代码；</p>\n<p>数据段: 存放程序运行过程中处理的各种数据；</p>\n<h4 id=\"Question\"><a href=\"#Question\" class=\"headerlink\" title=\"Question:\"></a>Question:</h4><blockquote>\n<p>进程控制块的作用是什么？PCB中应包括哪些信息？</p>\n</blockquote>\n<p>进程控制块的作用是：进程控制块用于保存每个进程和资源的相关信息，包括进程标识、空间、运行状态、资源等信息。以便于操作系统管理和控制进程和资源。<br>PCB中应包括：1、进程标识信息：本进程的标识、父进程的标识、进程所属用户的标识。2、处理机状态信息。保存进程的运行现场信息，包括用户可用寄存器的信息；控制和状态寄存器的信息；栈指针。</p>\n<h4 id=\"进程的组织方式\"><a href=\"#进程的组织方式\" class=\"headerlink\" title=\"进程的组织方式\"></a>进程的组织方式</h4><p>是指多个进程之间的组织形式</p>\n<ol>\n<li><p>链接方式：<br>(1)按照进程状态将PCB划分为多个队列<br>(2)OS持有指向各个队列的指针</p>\n</li>\n<li><p>索引方式：<br>(1)根据进程的状态，建立几张索引表<br>(2)OS持有指向各个索引表的指针</p>\n</li>\n</ol>\n<p><strong>一个系统中，进程成百上千，必须选择合适的合适的方式进行有效的管理。</strong></p>\n<h4 id=\"进程的特征\"><a href=\"#进程的特征\" class=\"headerlink\" title=\"进程的特征\"></a>进程的特征</h4><p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/OS-4.png\" alt=\"OS-4\"></p>\n<h3 id=\"对这块小结下：\"><a href=\"#对这块小结下：\" class=\"headerlink\" title=\"对这块小结下：\"></a>对这块小结下：</h3><p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/OS-5.png\" alt=\"OS-5\"></p>\n<h2 id=\"二、进程的状态与转换\"><a href=\"#二、进程的状态与转换\" class=\"headerlink\" title=\"二、进程的状态与转换\"></a>二、进程的状态与转换</h2><h4 id=\"进程的5种状态\"><a href=\"#进程的5种状态\" class=\"headerlink\" title=\"进程的5种状态\"></a>进程的5种状态</h4><p><strong>3种基本状态：</strong></p>\n<ol>\n<li><p>运行态：占有CPU，并正在运行的进程</p>\n</li>\n<li><p>就绪态：已经分配有运行的资源和条件，可以说：“<strong>万事俱备，只欠CPU</strong>”</p>\n</li>\n<li><p>阻塞态：等待资源的分配，这里不考虑CPU时间的分配，反正暂时不能运行</p>\n</li>\n</ol>\n<p><strong>2种过程中的状态：</strong></p>\n<ol start=\"4\">\n<li><p>创建态：进程正在创建，OS为其分配资源，初始化PCB</p>\n</li>\n<li><p>终止态：进程正在撤销，OS回收其资源，撤销PC（或者是由于bug导致进程无法继续执行，需进行撤销）</p>\n</li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/OS-6.png\" alt=\"OS-6\"></p>\n<blockquote>\n<p>注意以下内容:</p>\n</blockquote>\n<ol>\n<li><p>只有就绪态和运行态可以相互转换，其它的都是单向转换。就绪状态的进程通过调度算法从而获得 CPU 时间，转为运行状态；</p>\n</li>\n<li><p>而运行状态的进程，在分配给它的 CPU 时间片用完之后就会转为就绪状态，等待下一次调度。阻塞状态是缺少需要的资源从而由运行状态转换而来，但是该资源不包括CPU 时间，缺少 CPU 时间会从运行态转换为就绪态；</p>\n</li>\n<li><p>进程只能自己阻塞自己，因为只有进程自身才知道何时需要等待某种事件的发生；</p>\n</li>\n</ol>\n<h3 id=\"本章小节：\"><a href=\"#本章小节：\" class=\"headerlink\" title=\"本章小节：\"></a>本章小节：</h3><p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/OS-7.png\" alt=\"OS-7\"></p>\n<h4 id=\"Question：进程创建的主要工作是什么？\"><a href=\"#Question：进程创建的主要工作是什么？\" class=\"headerlink\" title=\"$$ Question：进程创建的主要工作是什么？\"></a>$$ Question：进程创建的主要工作是什么？</h4><ol>\n<li>接收进程运行现场初始值，初始优先级、执行程序描述，其它资源等参数。</li>\n<li>请求分配进程描述块PCB空间，得到一个内部数字进程标识。 </li>\n<li>用从父进程传来的参数初始化PCB表。</li>\n<li>产生描述进程空间的数据结构，初始化进程空间，建立程序段，数据段、栈段等。</li>\n<li>用进程运行现场初始值设置处理机现场保护区；造一个进程运行栈帧。</li>\n<li>置好父进程等关系域，同时将进程置成就绪状态。 </li>\n<li>将PCB表挂入就绪队列，等待时机被调度运行</li>\n</ol>\n<h2 id=\"进程控制-即对进程进行转换\"><a href=\"#进程控制-即对进程进行转换\" class=\"headerlink\" title=\"进程控制(即对进程进行转换)\"></a>进程控制(即对进程进行转换)</h2><p>对系统中的进程进行有效管理，<strong>创建、撤销、状态切换</strong>，通过就绪队列和阻塞队列来实现状态切换</p>\n<h4 id=\"如何实现进程切换？\"><a href=\"#如何实现进程切换？\" class=\"headerlink\" title=\"如何实现进程切换？\"></a>如何实现进程切换？</h4><p><strong>原语的特点：</strong></p>\n<ol>\n<li><p>操作原子性、运行时间短、调用频繁</p>\n</li>\n<li><p>运行在核心态，权限内非常大、属于特权指令</p>\n</li>\n<li><p>位于操作系统最底层，最接近硬件的部分</p>\n</li>\n</ol>\n<blockquote>\n<p>实现并发性–&gt;产生中断处理(CPU从用户态切换到核心态)–&gt;关中断指令–&gt;原语代码–&gt;开中断指令–&gt;继续中断处理</p>\n</blockquote>\n<p><strong>一气呵成，不可分割</strong></p>\n<p><strong>原语的任务</strong>无外乎3点</p>\n<ol>\n<li><p>更新PCB中的信息，包括进程状态标志、保存运行环境到PCB、从PCB恢复环境等<br>所有进程的控制原语一定修改进程状态标志，抢夺CPU的使用权，必定保存其运行环境，其进程开始运行前必定恢复运行环境</p>\n</li>\n<li><p>将PCB插入合适的队列（就绪、阻塞队列）</p>\n</li>\n<li><p>分配回收合适的资源</p>\n</li>\n</ol>\n<blockquote>\n<p>进程的终止</p>\n</blockquote>\n<ol>\n<li><p>从PCB中找到终止进程</p>\n</li>\n<li><p>若程序在运行，立即剥夺CPU，将CPU的时间分配给其他进程</p>\n</li>\n<li><p>终止其所有子进程</p>\n</li>\n<li><p>将该进程的所有资源归还给父进程或OS</p>\n</li>\n<li><p>删除该PCB</p>\n</li>\n</ol>\n<blockquote>\n<p>进程的阻塞和唤（状态切换）</p>\n</blockquote>\n<p><strong>阻塞和唤醒原语必须成对使用</strong></p>\n<ol>\n<li><p>阻塞原语：<br>a. 找到阻塞进程对应的PCB<br>b. 保持进程环境，PCB信息修改为“阻塞态”，暂停进程的运行<br>c. 将PCB插入相应事件的等待队列</p>\n</li>\n<li><p>唤醒原语：<br>a. 在事件等待队列中找到PCB<br>b. 将PCB从等待队列中移除，设为“就绪态”<br>c. 将PCB插入就绪队列，等待被CPU调度</p>\n</li>\n</ol>\n<p><strong>进程的切换</strong></p>\n<ol>\n<li><p>将运行环境存入PCB</p>\n</li>\n<li><p>PCB移入相应的队列中</p>\n</li>\n<li><p>选择另一个进程执行，更新其PCB</p>\n</li>\n<li><p>根据PCB恢复新进程的运行环境</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"一、进程的定义、组成、组织、特征\"><a href=\"#一、进程的定义、组成、组织、特征\" class=\"headerlink\" title=\"一、进程的定义、组成、组织、特征\"></a>一、进程的定义、组成、组织、特征</h2><h4 id=\"进程的定义\"><a href=\"#进程的定义\" class=\"headerlink\" title=\"进程的定义\"></a>进程的定义</h4><ol>\n<li><p>进程是程序的一次执行过程</p>\n</li>\n<li><p>进程是具有独立功能的程序在数据集合上运行的过程，<strong>是系统进行调度和资源分配的独立单元</strong></p>\n</li>\n</ol>\n<blockquote>\n<p>进程实体 = 程序段 + 数据段 + PCB(进程控制块)</p>\n</blockquote>\n<p><strong>注意区分</strong>：进程和进程实体：进程是动态的，进程实体是静态的</p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/OS-2.png\" alt=\"OS-2\"></p>\n<h4 id=\"PCB-进程管理块\"><a href=\"#PCB-进程管理块\" class=\"headerlink\" title=\"PCB(进程管理块):\"></a>PCB(进程管理块):</h4><p>为了描述控制进程的运行，系统中存放进程的管理和控制信息的数据结构称为进程控制块（Process Control Block）。它是进程实体的一部分，<strong>1.是操作系统中最重要的记录性数据结构</strong>。它是<strong>2.进程管理和控制的最重要的数据结构</strong>，每一个进程均有一个PCB，在创建进程时，建立PCB，伴随进程运行的全过程，直到进程撤消而撤消。所谓的创建进程和撤销进程，都是指对 PCB 的操作。</p>\n<p>程序段: 存放执行的代码；</p>\n<p>数据段: 存放程序运行过程中处理的各种数据；</p>\n<h4 id=\"Question\"><a href=\"#Question\" class=\"headerlink\" title=\"Question:\"></a>Question:</h4><blockquote>\n<p>进程控制块的作用是什么？PCB中应包括哪些信息？</p>\n</blockquote>\n<p>进程控制块的作用是：进程控制块用于保存每个进程和资源的相关信息，包括进程标识、空间、运行状态、资源等信息。以便于操作系统管理和控制进程和资源。<br>PCB中应包括：1、进程标识信息：本进程的标识、父进程的标识、进程所属用户的标识。2、处理机状态信息。保存进程的运行现场信息，包括用户可用寄存器的信息；控制和状态寄存器的信息；栈指针。</p>\n<h4 id=\"进程的组织方式\"><a href=\"#进程的组织方式\" class=\"headerlink\" title=\"进程的组织方式\"></a>进程的组织方式</h4><p>是指多个进程之间的组织形式</p>\n<ol>\n<li><p>链接方式：<br>(1)按照进程状态将PCB划分为多个队列<br>(2)OS持有指向各个队列的指针</p>\n</li>\n<li><p>索引方式：<br>(1)根据进程的状态，建立几张索引表<br>(2)OS持有指向各个索引表的指针</p>\n</li>\n</ol>\n<p><strong>一个系统中，进程成百上千，必须选择合适的合适的方式进行有效的管理。</strong></p>\n<h4 id=\"进程的特征\"><a href=\"#进程的特征\" class=\"headerlink\" title=\"进程的特征\"></a>进程的特征</h4><p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/OS-4.png\" alt=\"OS-4\"></p>\n<h3 id=\"对这块小结下：\"><a href=\"#对这块小结下：\" class=\"headerlink\" title=\"对这块小结下：\"></a>对这块小结下：</h3><p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/OS-5.png\" alt=\"OS-5\"></p>\n<h2 id=\"二、进程的状态与转换\"><a href=\"#二、进程的状态与转换\" class=\"headerlink\" title=\"二、进程的状态与转换\"></a>二、进程的状态与转换</h2><h4 id=\"进程的5种状态\"><a href=\"#进程的5种状态\" class=\"headerlink\" title=\"进程的5种状态\"></a>进程的5种状态</h4><p><strong>3种基本状态：</strong></p>\n<ol>\n<li><p>运行态：占有CPU，并正在运行的进程</p>\n</li>\n<li><p>就绪态：已经分配有运行的资源和条件，可以说：“<strong>万事俱备，只欠CPU</strong>”</p>\n</li>\n<li><p>阻塞态：等待资源的分配，这里不考虑CPU时间的分配，反正暂时不能运行</p>\n</li>\n</ol>\n<p><strong>2种过程中的状态：</strong></p>\n<ol start=\"4\">\n<li><p>创建态：进程正在创建，OS为其分配资源，初始化PCB</p>\n</li>\n<li><p>终止态：进程正在撤销，OS回收其资源，撤销PC（或者是由于bug导致进程无法继续执行，需进行撤销）</p>\n</li>\n</ol>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/OS-6.png\" alt=\"OS-6\"></p>\n<blockquote>\n<p>注意以下内容:</p>\n</blockquote>\n<ol>\n<li><p>只有就绪态和运行态可以相互转换，其它的都是单向转换。就绪状态的进程通过调度算法从而获得 CPU 时间，转为运行状态；</p>\n</li>\n<li><p>而运行状态的进程，在分配给它的 CPU 时间片用完之后就会转为就绪状态，等待下一次调度。阻塞状态是缺少需要的资源从而由运行状态转换而来，但是该资源不包括CPU 时间，缺少 CPU 时间会从运行态转换为就绪态；</p>\n</li>\n<li><p>进程只能自己阻塞自己，因为只有进程自身才知道何时需要等待某种事件的发生；</p>\n</li>\n</ol>\n<h3 id=\"本章小节：\"><a href=\"#本章小节：\" class=\"headerlink\" title=\"本章小节：\"></a>本章小节：</h3><p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/OS-7.png\" alt=\"OS-7\"></p>\n<h4 id=\"Question：进程创建的主要工作是什么？\"><a href=\"#Question：进程创建的主要工作是什么？\" class=\"headerlink\" title=\"$$ Question：进程创建的主要工作是什么？\"></a>$$ Question：进程创建的主要工作是什么？</h4><ol>\n<li>接收进程运行现场初始值，初始优先级、执行程序描述，其它资源等参数。</li>\n<li>请求分配进程描述块PCB空间，得到一个内部数字进程标识。 </li>\n<li>用从父进程传来的参数初始化PCB表。</li>\n<li>产生描述进程空间的数据结构，初始化进程空间，建立程序段，数据段、栈段等。</li>\n<li>用进程运行现场初始值设置处理机现场保护区；造一个进程运行栈帧。</li>\n<li>置好父进程等关系域，同时将进程置成就绪状态。 </li>\n<li>将PCB表挂入就绪队列，等待时机被调度运行</li>\n</ol>\n<h2 id=\"进程控制-即对进程进行转换\"><a href=\"#进程控制-即对进程进行转换\" class=\"headerlink\" title=\"进程控制(即对进程进行转换)\"></a>进程控制(即对进程进行转换)</h2><p>对系统中的进程进行有效管理，<strong>创建、撤销、状态切换</strong>，通过就绪队列和阻塞队列来实现状态切换</p>\n<h4 id=\"如何实现进程切换？\"><a href=\"#如何实现进程切换？\" class=\"headerlink\" title=\"如何实现进程切换？\"></a>如何实现进程切换？</h4><p><strong>原语的特点：</strong></p>\n<ol>\n<li><p>操作原子性、运行时间短、调用频繁</p>\n</li>\n<li><p>运行在核心态，权限内非常大、属于特权指令</p>\n</li>\n<li><p>位于操作系统最底层，最接近硬件的部分</p>\n</li>\n</ol>\n<blockquote>\n<p>实现并发性–&gt;产生中断处理(CPU从用户态切换到核心态)–&gt;关中断指令–&gt;原语代码–&gt;开中断指令–&gt;继续中断处理</p>\n</blockquote>\n<p><strong>一气呵成，不可分割</strong></p>\n<p><strong>原语的任务</strong>无外乎3点</p>\n<ol>\n<li><p>更新PCB中的信息，包括进程状态标志、保存运行环境到PCB、从PCB恢复环境等<br>所有进程的控制原语一定修改进程状态标志，抢夺CPU的使用权，必定保存其运行环境，其进程开始运行前必定恢复运行环境</p>\n</li>\n<li><p>将PCB插入合适的队列（就绪、阻塞队列）</p>\n</li>\n<li><p>分配回收合适的资源</p>\n</li>\n</ol>\n<blockquote>\n<p>进程的终止</p>\n</blockquote>\n<ol>\n<li><p>从PCB中找到终止进程</p>\n</li>\n<li><p>若程序在运行，立即剥夺CPU，将CPU的时间分配给其他进程</p>\n</li>\n<li><p>终止其所有子进程</p>\n</li>\n<li><p>将该进程的所有资源归还给父进程或OS</p>\n</li>\n<li><p>删除该PCB</p>\n</li>\n</ol>\n<blockquote>\n<p>进程的阻塞和唤（状态切换）</p>\n</blockquote>\n<p><strong>阻塞和唤醒原语必须成对使用</strong></p>\n<ol>\n<li><p>阻塞原语：<br>a. 找到阻塞进程对应的PCB<br>b. 保持进程环境，PCB信息修改为“阻塞态”，暂停进程的运行<br>c. 将PCB插入相应事件的等待队列</p>\n</li>\n<li><p>唤醒原语：<br>a. 在事件等待队列中找到PCB<br>b. 将PCB从等待队列中移除，设为“就绪态”<br>c. 将PCB插入就绪队列，等待被CPU调度</p>\n</li>\n</ol>\n<p><strong>进程的切换</strong></p>\n<ol>\n<li><p>将运行环境存入PCB</p>\n</li>\n<li><p>PCB移入相应的队列中</p>\n</li>\n<li><p>选择另一个进程执行，更新其PCB</p>\n</li>\n<li><p>根据PCB恢复新进程的运行环境</p>\n</li>\n</ol>\n"},{"layout":"post","title":"深入浅出IO模型","date":"2019-10-04T15:59:00.000Z","cover":"http://csuzhang.info/photos/2019-10-4-1.jpg","_content":"\n### 前言：\n\n每次谈到IO模型，都会牵扯到同步、异步、阻塞、非阻塞这几个词。从词的表面上看，很多人都觉得很容易理解。但是细细一想，却总会发现有点摸不着头脑。下文就结合具体的实例来讲解一下经典的几个IO模型。\n\n+ IO模型分类：内存IO、磁盘IO、网络IO等，通常的IO指的是后两者\n\n+ 阻塞和非阻塞是函数的实现方式，即在数据就绪之前是立即返回还是等待，就是发起的IO是否被阻塞\n\n+ 以文件IO为例,一个IO读过程是文件数据从磁盘→内核缓冲区→用户内存的过程。同步与异步的区别主要在于数据从内核缓冲区→用户内存这个过程需不需要用户进程等待，即实际的IO读写是否阻塞请求进程。(网络IO把磁盘换做网卡即可)\n\n\n\n\n\n### IO模型\n\n> 同步阻塞\n\n**如果数据没有准备就绪，就一直等待，直到数据准备就绪。**\n\n去麦当劳吃饭，点了一个自己最喜欢的套餐，然后一直在排队等待处等到套餐做好，自己端回到餐桌上就餐。这就是典型的同步阻塞。当厨师给你做饭的时候，你需要一直在那里等着。\n\n![2019-8-23-0](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/2019-10-4-1.jpg)\n\n在网络编程中，读取客户端的数据需要调用recvfrom。在默认情况下，这个调用会一直阻塞直到数据接收完毕，就是一个同步阻塞的IO方式。这也是最简单的IO模型，在通常fd较少、就绪很快的情况下使用是没有问题的。\n\n> 同步非阻塞\n\n**如果没有准备就绪会返回一个标志信息，不需要等待，等到数据准备就绪以后，内核会把数据拷贝到线程中去。但是需要不断询问内核是否已经准备好数据，非阻塞虽然不用等待但是一直占用CPU。**\n\n还是在麦当劳点餐，你每次点完饭就在那里等着，突然有一天你发现自己so stupid 。于是，你点完之后，就回桌子那里坐着，然后估计差不多了，就问服务员💁‍♂️饭好了没，如果好了就去端，没好的话就等一会再去问，循环直到饭做好，这就是同步非阻塞。\n\n这种方式在编程中对socket设置O_NONBLOCK即可。但此方式仅仅针对网络IO有效，对磁盘IO并没有作用。因为本地文件IO就没有被认为是阻塞，我们所说的网络IO的阻塞是因为网路IO有无限阻塞的可能，而本地文件除非是被锁住，否则是不可能无限阻塞的，因此只有锁这种情况下，O_NONBLOCK才会有作用。而且，磁盘IO时要么数据在内核缓冲区中直接可以返回，要么需要调用物理设备去读取，这时候进程的其他工作都需要等待。因此，后续的IO复用和信号驱动IO对文件IO也是没有意义的。\n\n![2019-8-23-0](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/2019-10-4-2.jpg)\n\n> IO多路复用模型\n\n**多路复用IO，会有一个线程不断地去轮询多个socket的状态，当socket有读写事件的时候才会调用IO 读写操作。**\n\n用一个线程管理多个socket，是通过selector.select()查询每个通道是否有事件到达，如果没有事件到达，则会一直阻塞在那里，因此也会带来线程阻塞问题。\n\n还是在麦当劳点餐，你点一份饭然后循环的去问好没好显然有点得不偿失，倒还不如就等在那里直到准备好；但是当你点了好几样饭菜的时候，你每次都去问一下所有饭菜的状态(未做好/已做好)肯定比你每次阻塞在那里等着好多了。当然，你问的时候是需要阻塞的，一直到有准备好的饭菜或者你等的不耐烦(超时)。这就引出了IO复用，也叫多路IO就绪通知。这是一种进程预先告知内核的能力，让内核发现进程指定的一个或多个IO条件就绪了，就通知进程。使得一个进程能在一连串的事件上等待。\n\n> 可以打个比方：如果我们先前创建的几个进程承载不了目前快速发展的业务的话，是不是还得增加进程数？我们都知道系统创建进程是需要消耗大量资源的，所以这样就会导致系统资源不足的情况。\n\n**那么有没有一种方式可以让一个进程同时为多个客户端端提供服务？**\n\n**select模型：**\n\n说的通俗一点就是各个客户端连接的文件描述符也就是套接字，都被放到了一个集合中，调用select函数之后会一直监视这些文件描述符中有哪些可读，如果有可读的描述符那么我们的工作进程就去读取资源。PHP 中有内置的函数来完成 select 系统调用。\n\n**poll模型：**\n\npoll 和 select 的实现非常类似，本质上的区别就是存放 fd 集合的数据结构不一样。select 在一个进程内可以维持最多 1024 个连接，poll 在此基础上做了加强，可以维持任意数量的连接。\n但 select 和 poll 方式有一个很大的问题就是，我们不难看出来 select 是通过轮训的方式来查找是否可读或者可写，打个比方，如果同时有100万个连接都没有断开，而只有一个客户端发送了数据，所以这里它还是需要循环这么多次，造成资源浪费。\n所以后来出现了 epoll系统调用。\n\n**epoll模型：**\n\nepoll 是 select 和 poll 的增强版，epoll 同 poll 一样，文件描述符数量无限制。\nepoll是基于内核的反射机制，在有活跃的 socket 时，系统会调用我们提前设置的回调函数。而 poll 和 select 都是遍历。\n\n但是也并不是所有情况下 epoll 都比 select/poll 好，比如在如下场景：\n在大多数客户端都很活跃的情况下，系统会把所有的回调函数都唤醒，所以会导致负载较高。既然要处理这么多的连接，那倒不如 select 遍历简单有效。\n\n![2019-8-23-0](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/2019-10-4-3.jpg)\n\n> 信号驱动模型\n\n**在信号驱动IO模型中，当用户发起一个IO请求操作时，会给对应的socket注册一个信号函数，线程会继续执行；当数据准备就绪的时候会给线程发送一个信号，线程接受到信号时，会在信号函数中进行IO操作。非阻塞IO、多路复用IO、信号驱动IO都不会造成IO操作的第一步，查看数据是否准备就绪而带来的线程阻塞，但是在第二步，对数据进行拷贝都会使线程阻塞。**\n\n上文的麦当劳就餐情形，还是需要你每次都去问一下饭菜状况。于是，你再次不耐烦了，就跟老板说，哪个饭菜好了就通知我一声吧。然后就自己坐在桌子那里干自己的事情。或者，你可以把手机号留给老板，自己出门，等饭菜好了直接发条短信给你。这就类似信号驱动的IO模型。\n\n![2019-8-23-0](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/2019-10-4-4.jpg)\n\n> 异步非阻塞\n\n**异步IO是最理想的IO模型，当线程发出一个IO请求操作时，接着就去做自己的事情了，内核去查看数据是否准备就绪和准备就绪后对数据的拷贝，拷贝完以后内核会给线程发送一个通知说整个IO操作已经完成了，数据可以直接使用了。**\n\n之前的就餐方式，到最后总是需要你自己去把饭菜端到餐桌。这下你也觉得不耐烦了，于是就告诉老板，能不能饭好了直接端到你的面前或者送到你的家里(外卖)。这就是异步非阻塞IO了。\n\n![2019-8-23-0](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/2019-10-4-5.jpg)\n\n<u>异步IO和信号驱动的主要区别，在于：信号驱动由内核告诉我们何时可以开始一个IO操作(数据在内核缓冲区中)，而异步IO则由内核通知IO操作何时已经完成(数据已经在用户空间中)。</u>\n\n","source":"_posts/2019-10-4-IO-stream.md","raw":"---\nlayout: post\ntitle:  \"深入浅出IO模型\"\ndate: 2019-10-4 23:59:00\ncategories: OS\ntags: \n  - OS :wq\n  - Linux \n  - Java\ncover: >-\n  http://csuzhang.info/photos/2019-10-4-1.jpg\n---\n\n### 前言：\n\n每次谈到IO模型，都会牵扯到同步、异步、阻塞、非阻塞这几个词。从词的表面上看，很多人都觉得很容易理解。但是细细一想，却总会发现有点摸不着头脑。下文就结合具体的实例来讲解一下经典的几个IO模型。\n\n+ IO模型分类：内存IO、磁盘IO、网络IO等，通常的IO指的是后两者\n\n+ 阻塞和非阻塞是函数的实现方式，即在数据就绪之前是立即返回还是等待，就是发起的IO是否被阻塞\n\n+ 以文件IO为例,一个IO读过程是文件数据从磁盘→内核缓冲区→用户内存的过程。同步与异步的区别主要在于数据从内核缓冲区→用户内存这个过程需不需要用户进程等待，即实际的IO读写是否阻塞请求进程。(网络IO把磁盘换做网卡即可)\n\n\n\n\n\n### IO模型\n\n> 同步阻塞\n\n**如果数据没有准备就绪，就一直等待，直到数据准备就绪。**\n\n去麦当劳吃饭，点了一个自己最喜欢的套餐，然后一直在排队等待处等到套餐做好，自己端回到餐桌上就餐。这就是典型的同步阻塞。当厨师给你做饭的时候，你需要一直在那里等着。\n\n![2019-8-23-0](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/2019-10-4-1.jpg)\n\n在网络编程中，读取客户端的数据需要调用recvfrom。在默认情况下，这个调用会一直阻塞直到数据接收完毕，就是一个同步阻塞的IO方式。这也是最简单的IO模型，在通常fd较少、就绪很快的情况下使用是没有问题的。\n\n> 同步非阻塞\n\n**如果没有准备就绪会返回一个标志信息，不需要等待，等到数据准备就绪以后，内核会把数据拷贝到线程中去。但是需要不断询问内核是否已经准备好数据，非阻塞虽然不用等待但是一直占用CPU。**\n\n还是在麦当劳点餐，你每次点完饭就在那里等着，突然有一天你发现自己so stupid 。于是，你点完之后，就回桌子那里坐着，然后估计差不多了，就问服务员💁‍♂️饭好了没，如果好了就去端，没好的话就等一会再去问，循环直到饭做好，这就是同步非阻塞。\n\n这种方式在编程中对socket设置O_NONBLOCK即可。但此方式仅仅针对网络IO有效，对磁盘IO并没有作用。因为本地文件IO就没有被认为是阻塞，我们所说的网络IO的阻塞是因为网路IO有无限阻塞的可能，而本地文件除非是被锁住，否则是不可能无限阻塞的，因此只有锁这种情况下，O_NONBLOCK才会有作用。而且，磁盘IO时要么数据在内核缓冲区中直接可以返回，要么需要调用物理设备去读取，这时候进程的其他工作都需要等待。因此，后续的IO复用和信号驱动IO对文件IO也是没有意义的。\n\n![2019-8-23-0](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/2019-10-4-2.jpg)\n\n> IO多路复用模型\n\n**多路复用IO，会有一个线程不断地去轮询多个socket的状态，当socket有读写事件的时候才会调用IO 读写操作。**\n\n用一个线程管理多个socket，是通过selector.select()查询每个通道是否有事件到达，如果没有事件到达，则会一直阻塞在那里，因此也会带来线程阻塞问题。\n\n还是在麦当劳点餐，你点一份饭然后循环的去问好没好显然有点得不偿失，倒还不如就等在那里直到准备好；但是当你点了好几样饭菜的时候，你每次都去问一下所有饭菜的状态(未做好/已做好)肯定比你每次阻塞在那里等着好多了。当然，你问的时候是需要阻塞的，一直到有准备好的饭菜或者你等的不耐烦(超时)。这就引出了IO复用，也叫多路IO就绪通知。这是一种进程预先告知内核的能力，让内核发现进程指定的一个或多个IO条件就绪了，就通知进程。使得一个进程能在一连串的事件上等待。\n\n> 可以打个比方：如果我们先前创建的几个进程承载不了目前快速发展的业务的话，是不是还得增加进程数？我们都知道系统创建进程是需要消耗大量资源的，所以这样就会导致系统资源不足的情况。\n\n**那么有没有一种方式可以让一个进程同时为多个客户端端提供服务？**\n\n**select模型：**\n\n说的通俗一点就是各个客户端连接的文件描述符也就是套接字，都被放到了一个集合中，调用select函数之后会一直监视这些文件描述符中有哪些可读，如果有可读的描述符那么我们的工作进程就去读取资源。PHP 中有内置的函数来完成 select 系统调用。\n\n**poll模型：**\n\npoll 和 select 的实现非常类似，本质上的区别就是存放 fd 集合的数据结构不一样。select 在一个进程内可以维持最多 1024 个连接，poll 在此基础上做了加强，可以维持任意数量的连接。\n但 select 和 poll 方式有一个很大的问题就是，我们不难看出来 select 是通过轮训的方式来查找是否可读或者可写，打个比方，如果同时有100万个连接都没有断开，而只有一个客户端发送了数据，所以这里它还是需要循环这么多次，造成资源浪费。\n所以后来出现了 epoll系统调用。\n\n**epoll模型：**\n\nepoll 是 select 和 poll 的增强版，epoll 同 poll 一样，文件描述符数量无限制。\nepoll是基于内核的反射机制，在有活跃的 socket 时，系统会调用我们提前设置的回调函数。而 poll 和 select 都是遍历。\n\n但是也并不是所有情况下 epoll 都比 select/poll 好，比如在如下场景：\n在大多数客户端都很活跃的情况下，系统会把所有的回调函数都唤醒，所以会导致负载较高。既然要处理这么多的连接，那倒不如 select 遍历简单有效。\n\n![2019-8-23-0](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/2019-10-4-3.jpg)\n\n> 信号驱动模型\n\n**在信号驱动IO模型中，当用户发起一个IO请求操作时，会给对应的socket注册一个信号函数，线程会继续执行；当数据准备就绪的时候会给线程发送一个信号，线程接受到信号时，会在信号函数中进行IO操作。非阻塞IO、多路复用IO、信号驱动IO都不会造成IO操作的第一步，查看数据是否准备就绪而带来的线程阻塞，但是在第二步，对数据进行拷贝都会使线程阻塞。**\n\n上文的麦当劳就餐情形，还是需要你每次都去问一下饭菜状况。于是，你再次不耐烦了，就跟老板说，哪个饭菜好了就通知我一声吧。然后就自己坐在桌子那里干自己的事情。或者，你可以把手机号留给老板，自己出门，等饭菜好了直接发条短信给你。这就类似信号驱动的IO模型。\n\n![2019-8-23-0](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/2019-10-4-4.jpg)\n\n> 异步非阻塞\n\n**异步IO是最理想的IO模型，当线程发出一个IO请求操作时，接着就去做自己的事情了，内核去查看数据是否准备就绪和准备就绪后对数据的拷贝，拷贝完以后内核会给线程发送一个通知说整个IO操作已经完成了，数据可以直接使用了。**\n\n之前的就餐方式，到最后总是需要你自己去把饭菜端到餐桌。这下你也觉得不耐烦了，于是就告诉老板，能不能饭好了直接端到你的面前或者送到你的家里(外卖)。这就是异步非阻塞IO了。\n\n![2019-8-23-0](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/2019-10-4-5.jpg)\n\n<u>异步IO和信号驱动的主要区别，在于：信号驱动由内核告诉我们何时可以开始一个IO操作(数据在内核缓冲区中)，而异步IO则由内核通知IO操作何时已经完成(数据已经在用户空间中)。</u>\n\n","slug":"2019-10-4-IO-stream","published":1,"updated":"2022-01-08T17:42:20.042Z","_id":"cky61ey420005aqoxhmz9ev8d","comments":1,"photos":[],"link":"","content":"<h3 id=\"前言：\"><a href=\"#前言：\" class=\"headerlink\" title=\"前言：\"></a>前言：</h3><p>每次谈到IO模型，都会牵扯到同步、异步、阻塞、非阻塞这几个词。从词的表面上看，很多人都觉得很容易理解。但是细细一想，却总会发现有点摸不着头脑。下文就结合具体的实例来讲解一下经典的几个IO模型。</p>\n<ul>\n<li><p>IO模型分类：内存IO、磁盘IO、网络IO等，通常的IO指的是后两者</p>\n</li>\n<li><p>阻塞和非阻塞是函数的实现方式，即在数据就绪之前是立即返回还是等待，就是发起的IO是否被阻塞</p>\n</li>\n<li><p>以文件IO为例,一个IO读过程是文件数据从磁盘→内核缓冲区→用户内存的过程。同步与异步的区别主要在于数据从内核缓冲区→用户内存这个过程需不需要用户进程等待，即实际的IO读写是否阻塞请求进程。(网络IO把磁盘换做网卡即可)</p>\n</li>\n</ul>\n<h3 id=\"IO模型\"><a href=\"#IO模型\" class=\"headerlink\" title=\"IO模型\"></a>IO模型</h3><blockquote>\n<p>同步阻塞</p>\n</blockquote>\n<p><strong>如果数据没有准备就绪，就一直等待，直到数据准备就绪。</strong></p>\n<p>去麦当劳吃饭，点了一个自己最喜欢的套餐，然后一直在排队等待处等到套餐做好，自己端回到餐桌上就餐。这就是典型的同步阻塞。当厨师给你做饭的时候，你需要一直在那里等着。</p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/2019-10-4-1.jpg\" alt=\"2019-8-23-0\"></p>\n<p>在网络编程中，读取客户端的数据需要调用recvfrom。在默认情况下，这个调用会一直阻塞直到数据接收完毕，就是一个同步阻塞的IO方式。这也是最简单的IO模型，在通常fd较少、就绪很快的情况下使用是没有问题的。</p>\n<blockquote>\n<p>同步非阻塞</p>\n</blockquote>\n<p><strong>如果没有准备就绪会返回一个标志信息，不需要等待，等到数据准备就绪以后，内核会把数据拷贝到线程中去。但是需要不断询问内核是否已经准备好数据，非阻塞虽然不用等待但是一直占用CPU。</strong></p>\n<p>还是在麦当劳点餐，你每次点完饭就在那里等着，突然有一天你发现自己so stupid 。于是，你点完之后，就回桌子那里坐着，然后估计差不多了，就问服务员💁‍♂️饭好了没，如果好了就去端，没好的话就等一会再去问，循环直到饭做好，这就是同步非阻塞。</p>\n<p>这种方式在编程中对socket设置O_NONBLOCK即可。但此方式仅仅针对网络IO有效，对磁盘IO并没有作用。因为本地文件IO就没有被认为是阻塞，我们所说的网络IO的阻塞是因为网路IO有无限阻塞的可能，而本地文件除非是被锁住，否则是不可能无限阻塞的，因此只有锁这种情况下，O_NONBLOCK才会有作用。而且，磁盘IO时要么数据在内核缓冲区中直接可以返回，要么需要调用物理设备去读取，这时候进程的其他工作都需要等待。因此，后续的IO复用和信号驱动IO对文件IO也是没有意义的。</p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/2019-10-4-2.jpg\" alt=\"2019-8-23-0\"></p>\n<blockquote>\n<p>IO多路复用模型</p>\n</blockquote>\n<p><strong>多路复用IO，会有一个线程不断地去轮询多个socket的状态，当socket有读写事件的时候才会调用IO 读写操作。</strong></p>\n<p>用一个线程管理多个socket，是通过selector.select()查询每个通道是否有事件到达，如果没有事件到达，则会一直阻塞在那里，因此也会带来线程阻塞问题。</p>\n<p>还是在麦当劳点餐，你点一份饭然后循环的去问好没好显然有点得不偿失，倒还不如就等在那里直到准备好；但是当你点了好几样饭菜的时候，你每次都去问一下所有饭菜的状态(未做好/已做好)肯定比你每次阻塞在那里等着好多了。当然，你问的时候是需要阻塞的，一直到有准备好的饭菜或者你等的不耐烦(超时)。这就引出了IO复用，也叫多路IO就绪通知。这是一种进程预先告知内核的能力，让内核发现进程指定的一个或多个IO条件就绪了，就通知进程。使得一个进程能在一连串的事件上等待。</p>\n<blockquote>\n<p>可以打个比方：如果我们先前创建的几个进程承载不了目前快速发展的业务的话，是不是还得增加进程数？我们都知道系统创建进程是需要消耗大量资源的，所以这样就会导致系统资源不足的情况。</p>\n</blockquote>\n<p><strong>那么有没有一种方式可以让一个进程同时为多个客户端端提供服务？</strong></p>\n<p><strong>select模型：</strong></p>\n<p>说的通俗一点就是各个客户端连接的文件描述符也就是套接字，都被放到了一个集合中，调用select函数之后会一直监视这些文件描述符中有哪些可读，如果有可读的描述符那么我们的工作进程就去读取资源。PHP 中有内置的函数来完成 select 系统调用。</p>\n<p><strong>poll模型：</strong></p>\n<p>poll 和 select 的实现非常类似，本质上的区别就是存放 fd 集合的数据结构不一样。select 在一个进程内可以维持最多 1024 个连接，poll 在此基础上做了加强，可以维持任意数量的连接。<br>但 select 和 poll 方式有一个很大的问题就是，我们不难看出来 select 是通过轮训的方式来查找是否可读或者可写，打个比方，如果同时有100万个连接都没有断开，而只有一个客户端发送了数据，所以这里它还是需要循环这么多次，造成资源浪费。<br>所以后来出现了 epoll系统调用。</p>\n<p><strong>epoll模型：</strong></p>\n<p>epoll 是 select 和 poll 的增强版，epoll 同 poll 一样，文件描述符数量无限制。<br>epoll是基于内核的反射机制，在有活跃的 socket 时，系统会调用我们提前设置的回调函数。而 poll 和 select 都是遍历。</p>\n<p>但是也并不是所有情况下 epoll 都比 select/poll 好，比如在如下场景：<br>在大多数客户端都很活跃的情况下，系统会把所有的回调函数都唤醒，所以会导致负载较高。既然要处理这么多的连接，那倒不如 select 遍历简单有效。</p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/2019-10-4-3.jpg\" alt=\"2019-8-23-0\"></p>\n<blockquote>\n<p>信号驱动模型</p>\n</blockquote>\n<p><strong>在信号驱动IO模型中，当用户发起一个IO请求操作时，会给对应的socket注册一个信号函数，线程会继续执行；当数据准备就绪的时候会给线程发送一个信号，线程接受到信号时，会在信号函数中进行IO操作。非阻塞IO、多路复用IO、信号驱动IO都不会造成IO操作的第一步，查看数据是否准备就绪而带来的线程阻塞，但是在第二步，对数据进行拷贝都会使线程阻塞。</strong></p>\n<p>上文的麦当劳就餐情形，还是需要你每次都去问一下饭菜状况。于是，你再次不耐烦了，就跟老板说，哪个饭菜好了就通知我一声吧。然后就自己坐在桌子那里干自己的事情。或者，你可以把手机号留给老板，自己出门，等饭菜好了直接发条短信给你。这就类似信号驱动的IO模型。</p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/2019-10-4-4.jpg\" alt=\"2019-8-23-0\"></p>\n<blockquote>\n<p>异步非阻塞</p>\n</blockquote>\n<p><strong>异步IO是最理想的IO模型，当线程发出一个IO请求操作时，接着就去做自己的事情了，内核去查看数据是否准备就绪和准备就绪后对数据的拷贝，拷贝完以后内核会给线程发送一个通知说整个IO操作已经完成了，数据可以直接使用了。</strong></p>\n<p>之前的就餐方式，到最后总是需要你自己去把饭菜端到餐桌。这下你也觉得不耐烦了，于是就告诉老板，能不能饭好了直接端到你的面前或者送到你的家里(外卖)。这就是异步非阻塞IO了。</p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/2019-10-4-5.jpg\" alt=\"2019-8-23-0\"></p>\n<p><u>异步IO和信号驱动的主要区别，在于：信号驱动由内核告诉我们何时可以开始一个IO操作(数据在内核缓冲区中)，而异步IO则由内核通知IO操作何时已经完成(数据已经在用户空间中)。</u></p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"前言：\"><a href=\"#前言：\" class=\"headerlink\" title=\"前言：\"></a>前言：</h3><p>每次谈到IO模型，都会牵扯到同步、异步、阻塞、非阻塞这几个词。从词的表面上看，很多人都觉得很容易理解。但是细细一想，却总会发现有点摸不着头脑。下文就结合具体的实例来讲解一下经典的几个IO模型。</p>\n<ul>\n<li><p>IO模型分类：内存IO、磁盘IO、网络IO等，通常的IO指的是后两者</p>\n</li>\n<li><p>阻塞和非阻塞是函数的实现方式，即在数据就绪之前是立即返回还是等待，就是发起的IO是否被阻塞</p>\n</li>\n<li><p>以文件IO为例,一个IO读过程是文件数据从磁盘→内核缓冲区→用户内存的过程。同步与异步的区别主要在于数据从内核缓冲区→用户内存这个过程需不需要用户进程等待，即实际的IO读写是否阻塞请求进程。(网络IO把磁盘换做网卡即可)</p>\n</li>\n</ul>\n<h3 id=\"IO模型\"><a href=\"#IO模型\" class=\"headerlink\" title=\"IO模型\"></a>IO模型</h3><blockquote>\n<p>同步阻塞</p>\n</blockquote>\n<p><strong>如果数据没有准备就绪，就一直等待，直到数据准备就绪。</strong></p>\n<p>去麦当劳吃饭，点了一个自己最喜欢的套餐，然后一直在排队等待处等到套餐做好，自己端回到餐桌上就餐。这就是典型的同步阻塞。当厨师给你做饭的时候，你需要一直在那里等着。</p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/2019-10-4-1.jpg\" alt=\"2019-8-23-0\"></p>\n<p>在网络编程中，读取客户端的数据需要调用recvfrom。在默认情况下，这个调用会一直阻塞直到数据接收完毕，就是一个同步阻塞的IO方式。这也是最简单的IO模型，在通常fd较少、就绪很快的情况下使用是没有问题的。</p>\n<blockquote>\n<p>同步非阻塞</p>\n</blockquote>\n<p><strong>如果没有准备就绪会返回一个标志信息，不需要等待，等到数据准备就绪以后，内核会把数据拷贝到线程中去。但是需要不断询问内核是否已经准备好数据，非阻塞虽然不用等待但是一直占用CPU。</strong></p>\n<p>还是在麦当劳点餐，你每次点完饭就在那里等着，突然有一天你发现自己so stupid 。于是，你点完之后，就回桌子那里坐着，然后估计差不多了，就问服务员💁‍♂️饭好了没，如果好了就去端，没好的话就等一会再去问，循环直到饭做好，这就是同步非阻塞。</p>\n<p>这种方式在编程中对socket设置O_NONBLOCK即可。但此方式仅仅针对网络IO有效，对磁盘IO并没有作用。因为本地文件IO就没有被认为是阻塞，我们所说的网络IO的阻塞是因为网路IO有无限阻塞的可能，而本地文件除非是被锁住，否则是不可能无限阻塞的，因此只有锁这种情况下，O_NONBLOCK才会有作用。而且，磁盘IO时要么数据在内核缓冲区中直接可以返回，要么需要调用物理设备去读取，这时候进程的其他工作都需要等待。因此，后续的IO复用和信号驱动IO对文件IO也是没有意义的。</p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/2019-10-4-2.jpg\" alt=\"2019-8-23-0\"></p>\n<blockquote>\n<p>IO多路复用模型</p>\n</blockquote>\n<p><strong>多路复用IO，会有一个线程不断地去轮询多个socket的状态，当socket有读写事件的时候才会调用IO 读写操作。</strong></p>\n<p>用一个线程管理多个socket，是通过selector.select()查询每个通道是否有事件到达，如果没有事件到达，则会一直阻塞在那里，因此也会带来线程阻塞问题。</p>\n<p>还是在麦当劳点餐，你点一份饭然后循环的去问好没好显然有点得不偿失，倒还不如就等在那里直到准备好；但是当你点了好几样饭菜的时候，你每次都去问一下所有饭菜的状态(未做好/已做好)肯定比你每次阻塞在那里等着好多了。当然，你问的时候是需要阻塞的，一直到有准备好的饭菜或者你等的不耐烦(超时)。这就引出了IO复用，也叫多路IO就绪通知。这是一种进程预先告知内核的能力，让内核发现进程指定的一个或多个IO条件就绪了，就通知进程。使得一个进程能在一连串的事件上等待。</p>\n<blockquote>\n<p>可以打个比方：如果我们先前创建的几个进程承载不了目前快速发展的业务的话，是不是还得增加进程数？我们都知道系统创建进程是需要消耗大量资源的，所以这样就会导致系统资源不足的情况。</p>\n</blockquote>\n<p><strong>那么有没有一种方式可以让一个进程同时为多个客户端端提供服务？</strong></p>\n<p><strong>select模型：</strong></p>\n<p>说的通俗一点就是各个客户端连接的文件描述符也就是套接字，都被放到了一个集合中，调用select函数之后会一直监视这些文件描述符中有哪些可读，如果有可读的描述符那么我们的工作进程就去读取资源。PHP 中有内置的函数来完成 select 系统调用。</p>\n<p><strong>poll模型：</strong></p>\n<p>poll 和 select 的实现非常类似，本质上的区别就是存放 fd 集合的数据结构不一样。select 在一个进程内可以维持最多 1024 个连接，poll 在此基础上做了加强，可以维持任意数量的连接。<br>但 select 和 poll 方式有一个很大的问题就是，我们不难看出来 select 是通过轮训的方式来查找是否可读或者可写，打个比方，如果同时有100万个连接都没有断开，而只有一个客户端发送了数据，所以这里它还是需要循环这么多次，造成资源浪费。<br>所以后来出现了 epoll系统调用。</p>\n<p><strong>epoll模型：</strong></p>\n<p>epoll 是 select 和 poll 的增强版，epoll 同 poll 一样，文件描述符数量无限制。<br>epoll是基于内核的反射机制，在有活跃的 socket 时，系统会调用我们提前设置的回调函数。而 poll 和 select 都是遍历。</p>\n<p>但是也并不是所有情况下 epoll 都比 select/poll 好，比如在如下场景：<br>在大多数客户端都很活跃的情况下，系统会把所有的回调函数都唤醒，所以会导致负载较高。既然要处理这么多的连接，那倒不如 select 遍历简单有效。</p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/2019-10-4-3.jpg\" alt=\"2019-8-23-0\"></p>\n<blockquote>\n<p>信号驱动模型</p>\n</blockquote>\n<p><strong>在信号驱动IO模型中，当用户发起一个IO请求操作时，会给对应的socket注册一个信号函数，线程会继续执行；当数据准备就绪的时候会给线程发送一个信号，线程接受到信号时，会在信号函数中进行IO操作。非阻塞IO、多路复用IO、信号驱动IO都不会造成IO操作的第一步，查看数据是否准备就绪而带来的线程阻塞，但是在第二步，对数据进行拷贝都会使线程阻塞。</strong></p>\n<p>上文的麦当劳就餐情形，还是需要你每次都去问一下饭菜状况。于是，你再次不耐烦了，就跟老板说，哪个饭菜好了就通知我一声吧。然后就自己坐在桌子那里干自己的事情。或者，你可以把手机号留给老板，自己出门，等饭菜好了直接发条短信给你。这就类似信号驱动的IO模型。</p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/2019-10-4-4.jpg\" alt=\"2019-8-23-0\"></p>\n<blockquote>\n<p>异步非阻塞</p>\n</blockquote>\n<p><strong>异步IO是最理想的IO模型，当线程发出一个IO请求操作时，接着就去做自己的事情了，内核去查看数据是否准备就绪和准备就绪后对数据的拷贝，拷贝完以后内核会给线程发送一个通知说整个IO操作已经完成了，数据可以直接使用了。</strong></p>\n<p>之前的就餐方式，到最后总是需要你自己去把饭菜端到餐桌。这下你也觉得不耐烦了，于是就告诉老板，能不能饭好了直接端到你的面前或者送到你的家里(外卖)。这就是异步非阻塞IO了。</p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/2019-10-4-5.jpg\" alt=\"2019-8-23-0\"></p>\n<p><u>异步IO和信号驱动的主要区别，在于：信号驱动由内核告诉我们何时可以开始一个IO操作(数据在内核缓冲区中)，而异步IO则由内核通知IO操作何时已经完成(数据已经在用户空间中)。</u></p>\n"},{"layout":"post","title":"API接口测试入门","date":"2020-01-20T12:00:00.000Z","_content":"\n\n\n\n\n## API接口测试入门\n\n> API是Application Programming Interface的简写，我们又把接口测试叫做API测试，主要用于实现多个系统之间或系统内部模块之间的通信和数据交换的能力。\n\n\n\n\n\n\n\n\n### 1.接口定义\n\n接口测试主要用于系统与系统之间以及内部各个子系统或模块之间的交互点。定义特定的交互点，然后通过这些交互点，以及一些特殊的规则也就是协议，来进行数据之间的交互。前后端之间配合工作，就是其中一方定义实现接口，另一方来调用接口，以实现预期功能。\n\n举个简单的例子，我们在开车踩油门时，并不需要知道油门内部的零线/火线以及具体的电路结构，因为汽车制造商已经将给油的一系列操作全部封装成了油门这样一个接口，用户只要傻瓜式地进行踩油门的操作就可以让汽车实现加速。\n\n### 2.接口分类\n\n> WebService和HTTP\n\n（1）WebService接口走soap协议，请求报文和返回报文都是xml格式，通过SoapUI工具进行测试；\n\n（2）HTTP API接口走HTTP协议，通过路径来区分调用的方法，请求报文入参有多种形式，返回报文一般为json串，最常见的是get和post方法。\n\n### 3.接口测试必要性\n\n（1）效率上：\n现在系统的复杂性与日俱增，传统测试方法人工成本过高且效率低下，而接口测试比较容易实现自动化集成，减少人工成本与时间，缩短测试周期；\n\n（2）安全上：\n前后端架构分离，只依靠前端进行测试已经完全不能满足系统安全要求，绕过前面实在太容易，需要后端同样进行控制，在这种情况下就需要从接口层面验证。\n\n### 4.接口测试原理\n\n通过程序模拟客户端向服务器发送请求报文，服务器接收请求报文后对报文做处理并向客户端返回应答，客户端再接收应答的一个过程。\n\n### 5.接口文档关键部分\n\n接口说明\n\n调用的url\n\n请求方法（get、post）\n\n请求参数，参数类型、请求参数说明\n\n返回参数说明\n\n返回示例\n\n### 6.接口测试分类\n\n（1）功能测试：\n由于是针对基本业务功能进行测试，这部分是两种测试重合度最高的一块，开发同学通常所指的也主要是这部分的内容。\n测试覆盖：业务流程，参数类型、可选项等。\n\n（2）边界分析测试：\n在基本功能测试的基础上考虑输入输出的边界条件。相对来说接口可以覆盖的范围很广，同样的，接口出现问题的概率也更高。\n测试覆盖：边界值、特殊字符等。\n\n（3）性能测试：\n接口性能主要关注接口响应时间、并发、服务端资源的使用情况等。越靠近底层，对于系统的性能优化越有利。\n测试覆盖：并发数、吞吐量、tps等\n\n### 7.接口测试工具\n\nPostman，jmeter，soupUI等测试工具。\n\n\n## 测试用例基本概念拓展\n\n> 简单来说，测试用例就是一个文档，描述输入、输出、动作、时间等，其目的是确定应用程序的某个特性是否正常工作，并且达到程序所设计的期望结果。\n\n### 测试用例的作用\n\n+ 有效性\n\n避免穷举测试，选取代表性的测试数据进行测试，节省时间和资源，提高测试效率\n\n+ 避免测试的盲目性\n\n开始测试之前设计好测试用例，避免盲目测试，使得重点突出、目的明确\n\n+ 可维护性\n\n软件版本更新后，只需部分修正测试用例即可继续开展，降低工作强度，缩短项目周期\n\n+ 可复用性\n\n项目功能的模块化，使软件易于开发，使得测试过程事半功倍\n\n+ 可评估性\n\n程序代码的质量的量化标准应该用测试用例的通过率和测试输出软件缺陷的数目来进行评估\n\n+ 可管理性\n\n测试用例是测试人员的重要参考依据，也可以作为检验测试进度、测试工作量的因素，来对测试工作进行有效管理\n\n### 测试用例的设计\n\n通常由经验丰富的测试人员设计测试用例，经验较少的人员从执行测试用例开始进行，随着经验和技术的积累，再逐渐开始参与测试用例的设计工作。\n\n### tip1.测试设计说明\n\n类似开发人员有项目开发功能书一样，测试人员也要有说明书来指导测试人员如何设计测试用例，包括但不限于：被测特性、测试所用的方法、测试准则等。\n\n+ 标识符\n\n+ 被测特性\n\n+ 方法\n\n+ 测试用例信息\n\n+ 通过/失败规则\n\n### tip2.测试用例编写\n\n+ 用例的编号\n\n由测试引用的唯一标识符，便于查找测试用例，也便于用例的追踪和管理\n\n+ 测试标题\n\n对测试用例的描述，清楚表达用例的相关用途等\n\n+ 测试项\n\n测试用例应该具体详细的描述所测试项的详细特征，更加详细具体\n\n+ 测试环境要求\n\n该测试用例执行的外部条件，软硬件具体指标和测试工具等\n\n+ 特殊要求\n\n对环境的特殊需求，如所需设备型号、对防火墙等的特殊设置\n\n+ 测试输入说明\n\n提供测试执行中的各种输入条件。根据需求中的输入条件，确定测试用例的输入。\n\n+ 操作步骤\n\n提供测试执行的过程步骤，对于复杂的用例，应该分为几个步骤分别完成测试。\n\n+ 预期结果\n\n提供测试执行的预期结果，预期结果应该根据软件需求中的输出得出。如实际结果与预期结果不符合，则测试不通过。\n\n+ 测试用例之间的关联\n\n用来标示该测试用例和其他测试用例之间的依赖关系。在实际测试中，很多测试用例并不是单独存在的，而是可能存在 某种相互依赖关系。\n\n+ 测试用例设计人员和测试人员\n\n+ 测试优先级\n\n一般分为0～4的一共5个等级，通过优先级来标注出软件测试的重点和先后顺序。\n\n### 测试用例的分类和阶段\n\n测试阶段|测试类型|执行人员\n--|:--:|--:\n单元测试|模块功能测试、部分接口测试、覆盖测试、路径测试|开发与测试结合\n集成测试|接口测试、路径测试、部分功能测试|开发与测试结合或测试\n系统测试|功能测试、兼容性测试、性能测试、用户界面测试、安全性测试、强度测试、可靠性测试|测试人员\n验收测试|对于实际项目基本同上、包含文档测试|测试人员或包含用户\n\n\n\n","source":"_posts/2020-1-20-API-test-learning.md","raw":"---\nlayout: post\ntitle:  \"API接口测试入门\"\ndate: 2020-1-20 20:00:00\ncategories: Test\ntags: \n  - OS \n  - Test\n---\n\n\n\n\n\n## API接口测试入门\n\n> API是Application Programming Interface的简写，我们又把接口测试叫做API测试，主要用于实现多个系统之间或系统内部模块之间的通信和数据交换的能力。\n\n\n\n\n\n\n\n\n### 1.接口定义\n\n接口测试主要用于系统与系统之间以及内部各个子系统或模块之间的交互点。定义特定的交互点，然后通过这些交互点，以及一些特殊的规则也就是协议，来进行数据之间的交互。前后端之间配合工作，就是其中一方定义实现接口，另一方来调用接口，以实现预期功能。\n\n举个简单的例子，我们在开车踩油门时，并不需要知道油门内部的零线/火线以及具体的电路结构，因为汽车制造商已经将给油的一系列操作全部封装成了油门这样一个接口，用户只要傻瓜式地进行踩油门的操作就可以让汽车实现加速。\n\n### 2.接口分类\n\n> WebService和HTTP\n\n（1）WebService接口走soap协议，请求报文和返回报文都是xml格式，通过SoapUI工具进行测试；\n\n（2）HTTP API接口走HTTP协议，通过路径来区分调用的方法，请求报文入参有多种形式，返回报文一般为json串，最常见的是get和post方法。\n\n### 3.接口测试必要性\n\n（1）效率上：\n现在系统的复杂性与日俱增，传统测试方法人工成本过高且效率低下，而接口测试比较容易实现自动化集成，减少人工成本与时间，缩短测试周期；\n\n（2）安全上：\n前后端架构分离，只依靠前端进行测试已经完全不能满足系统安全要求，绕过前面实在太容易，需要后端同样进行控制，在这种情况下就需要从接口层面验证。\n\n### 4.接口测试原理\n\n通过程序模拟客户端向服务器发送请求报文，服务器接收请求报文后对报文做处理并向客户端返回应答，客户端再接收应答的一个过程。\n\n### 5.接口文档关键部分\n\n接口说明\n\n调用的url\n\n请求方法（get、post）\n\n请求参数，参数类型、请求参数说明\n\n返回参数说明\n\n返回示例\n\n### 6.接口测试分类\n\n（1）功能测试：\n由于是针对基本业务功能进行测试，这部分是两种测试重合度最高的一块，开发同学通常所指的也主要是这部分的内容。\n测试覆盖：业务流程，参数类型、可选项等。\n\n（2）边界分析测试：\n在基本功能测试的基础上考虑输入输出的边界条件。相对来说接口可以覆盖的范围很广，同样的，接口出现问题的概率也更高。\n测试覆盖：边界值、特殊字符等。\n\n（3）性能测试：\n接口性能主要关注接口响应时间、并发、服务端资源的使用情况等。越靠近底层，对于系统的性能优化越有利。\n测试覆盖：并发数、吞吐量、tps等\n\n### 7.接口测试工具\n\nPostman，jmeter，soupUI等测试工具。\n\n\n## 测试用例基本概念拓展\n\n> 简单来说，测试用例就是一个文档，描述输入、输出、动作、时间等，其目的是确定应用程序的某个特性是否正常工作，并且达到程序所设计的期望结果。\n\n### 测试用例的作用\n\n+ 有效性\n\n避免穷举测试，选取代表性的测试数据进行测试，节省时间和资源，提高测试效率\n\n+ 避免测试的盲目性\n\n开始测试之前设计好测试用例，避免盲目测试，使得重点突出、目的明确\n\n+ 可维护性\n\n软件版本更新后，只需部分修正测试用例即可继续开展，降低工作强度，缩短项目周期\n\n+ 可复用性\n\n项目功能的模块化，使软件易于开发，使得测试过程事半功倍\n\n+ 可评估性\n\n程序代码的质量的量化标准应该用测试用例的通过率和测试输出软件缺陷的数目来进行评估\n\n+ 可管理性\n\n测试用例是测试人员的重要参考依据，也可以作为检验测试进度、测试工作量的因素，来对测试工作进行有效管理\n\n### 测试用例的设计\n\n通常由经验丰富的测试人员设计测试用例，经验较少的人员从执行测试用例开始进行，随着经验和技术的积累，再逐渐开始参与测试用例的设计工作。\n\n### tip1.测试设计说明\n\n类似开发人员有项目开发功能书一样，测试人员也要有说明书来指导测试人员如何设计测试用例，包括但不限于：被测特性、测试所用的方法、测试准则等。\n\n+ 标识符\n\n+ 被测特性\n\n+ 方法\n\n+ 测试用例信息\n\n+ 通过/失败规则\n\n### tip2.测试用例编写\n\n+ 用例的编号\n\n由测试引用的唯一标识符，便于查找测试用例，也便于用例的追踪和管理\n\n+ 测试标题\n\n对测试用例的描述，清楚表达用例的相关用途等\n\n+ 测试项\n\n测试用例应该具体详细的描述所测试项的详细特征，更加详细具体\n\n+ 测试环境要求\n\n该测试用例执行的外部条件，软硬件具体指标和测试工具等\n\n+ 特殊要求\n\n对环境的特殊需求，如所需设备型号、对防火墙等的特殊设置\n\n+ 测试输入说明\n\n提供测试执行中的各种输入条件。根据需求中的输入条件，确定测试用例的输入。\n\n+ 操作步骤\n\n提供测试执行的过程步骤，对于复杂的用例，应该分为几个步骤分别完成测试。\n\n+ 预期结果\n\n提供测试执行的预期结果，预期结果应该根据软件需求中的输出得出。如实际结果与预期结果不符合，则测试不通过。\n\n+ 测试用例之间的关联\n\n用来标示该测试用例和其他测试用例之间的依赖关系。在实际测试中，很多测试用例并不是单独存在的，而是可能存在 某种相互依赖关系。\n\n+ 测试用例设计人员和测试人员\n\n+ 测试优先级\n\n一般分为0～4的一共5个等级，通过优先级来标注出软件测试的重点和先后顺序。\n\n### 测试用例的分类和阶段\n\n测试阶段|测试类型|执行人员\n--|:--:|--:\n单元测试|模块功能测试、部分接口测试、覆盖测试、路径测试|开发与测试结合\n集成测试|接口测试、路径测试、部分功能测试|开发与测试结合或测试\n系统测试|功能测试、兼容性测试、性能测试、用户界面测试、安全性测试、强度测试、可靠性测试|测试人员\n验收测试|对于实际项目基本同上、包含文档测试|测试人员或包含用户\n\n\n\n","slug":"2020-1-20-API-test-learning","published":1,"updated":"2022-01-08T16:23:49.355Z","_id":"cky61ey420006aqoxa2r4fd4o","comments":1,"photos":[],"link":"","content":"<h2 id=\"API接口测试入门\"><a href=\"#API接口测试入门\" class=\"headerlink\" title=\"API接口测试入门\"></a>API接口测试入门</h2><blockquote>\n<p>API是Application Programming Interface的简写，我们又把接口测试叫做API测试，主要用于实现多个系统之间或系统内部模块之间的通信和数据交换的能力。</p>\n</blockquote>\n<h3 id=\"1-接口定义\"><a href=\"#1-接口定义\" class=\"headerlink\" title=\"1.接口定义\"></a>1.接口定义</h3><p>接口测试主要用于系统与系统之间以及内部各个子系统或模块之间的交互点。定义特定的交互点，然后通过这些交互点，以及一些特殊的规则也就是协议，来进行数据之间的交互。前后端之间配合工作，就是其中一方定义实现接口，另一方来调用接口，以实现预期功能。</p>\n<p>举个简单的例子，我们在开车踩油门时，并不需要知道油门内部的零线/火线以及具体的电路结构，因为汽车制造商已经将给油的一系列操作全部封装成了油门这样一个接口，用户只要傻瓜式地进行踩油门的操作就可以让汽车实现加速。</p>\n<h3 id=\"2-接口分类\"><a href=\"#2-接口分类\" class=\"headerlink\" title=\"2.接口分类\"></a>2.接口分类</h3><blockquote>\n<p>WebService和HTTP</p>\n</blockquote>\n<p>（1）WebService接口走soap协议，请求报文和返回报文都是xml格式，通过SoapUI工具进行测试；</p>\n<p>（2）HTTP API接口走HTTP协议，通过路径来区分调用的方法，请求报文入参有多种形式，返回报文一般为json串，最常见的是get和post方法。</p>\n<h3 id=\"3-接口测试必要性\"><a href=\"#3-接口测试必要性\" class=\"headerlink\" title=\"3.接口测试必要性\"></a>3.接口测试必要性</h3><p>（1）效率上：<br>现在系统的复杂性与日俱增，传统测试方法人工成本过高且效率低下，而接口测试比较容易实现自动化集成，减少人工成本与时间，缩短测试周期；</p>\n<p>（2）安全上：<br>前后端架构分离，只依靠前端进行测试已经完全不能满足系统安全要求，绕过前面实在太容易，需要后端同样进行控制，在这种情况下就需要从接口层面验证。</p>\n<h3 id=\"4-接口测试原理\"><a href=\"#4-接口测试原理\" class=\"headerlink\" title=\"4.接口测试原理\"></a>4.接口测试原理</h3><p>通过程序模拟客户端向服务器发送请求报文，服务器接收请求报文后对报文做处理并向客户端返回应答，客户端再接收应答的一个过程。</p>\n<h3 id=\"5-接口文档关键部分\"><a href=\"#5-接口文档关键部分\" class=\"headerlink\" title=\"5.接口文档关键部分\"></a>5.接口文档关键部分</h3><p>接口说明</p>\n<p>调用的url</p>\n<p>请求方法（get、post）</p>\n<p>请求参数，参数类型、请求参数说明</p>\n<p>返回参数说明</p>\n<p>返回示例</p>\n<h3 id=\"6-接口测试分类\"><a href=\"#6-接口测试分类\" class=\"headerlink\" title=\"6.接口测试分类\"></a>6.接口测试分类</h3><p>（1）功能测试：<br>由于是针对基本业务功能进行测试，这部分是两种测试重合度最高的一块，开发同学通常所指的也主要是这部分的内容。<br>测试覆盖：业务流程，参数类型、可选项等。</p>\n<p>（2）边界分析测试：<br>在基本功能测试的基础上考虑输入输出的边界条件。相对来说接口可以覆盖的范围很广，同样的，接口出现问题的概率也更高。<br>测试覆盖：边界值、特殊字符等。</p>\n<p>（3）性能测试：<br>接口性能主要关注接口响应时间、并发、服务端资源的使用情况等。越靠近底层，对于系统的性能优化越有利。<br>测试覆盖：并发数、吞吐量、tps等</p>\n<h3 id=\"7-接口测试工具\"><a href=\"#7-接口测试工具\" class=\"headerlink\" title=\"7.接口测试工具\"></a>7.接口测试工具</h3><p>Postman，jmeter，soupUI等测试工具。</p>\n<h2 id=\"测试用例基本概念拓展\"><a href=\"#测试用例基本概念拓展\" class=\"headerlink\" title=\"测试用例基本概念拓展\"></a>测试用例基本概念拓展</h2><blockquote>\n<p>简单来说，测试用例就是一个文档，描述输入、输出、动作、时间等，其目的是确定应用程序的某个特性是否正常工作，并且达到程序所设计的期望结果。</p>\n</blockquote>\n<h3 id=\"测试用例的作用\"><a href=\"#测试用例的作用\" class=\"headerlink\" title=\"测试用例的作用\"></a>测试用例的作用</h3><ul>\n<li>有效性</li>\n</ul>\n<p>避免穷举测试，选取代表性的测试数据进行测试，节省时间和资源，提高测试效率</p>\n<ul>\n<li>避免测试的盲目性</li>\n</ul>\n<p>开始测试之前设计好测试用例，避免盲目测试，使得重点突出、目的明确</p>\n<ul>\n<li>可维护性</li>\n</ul>\n<p>软件版本更新后，只需部分修正测试用例即可继续开展，降低工作强度，缩短项目周期</p>\n<ul>\n<li>可复用性</li>\n</ul>\n<p>项目功能的模块化，使软件易于开发，使得测试过程事半功倍</p>\n<ul>\n<li>可评估性</li>\n</ul>\n<p>程序代码的质量的量化标准应该用测试用例的通过率和测试输出软件缺陷的数目来进行评估</p>\n<ul>\n<li>可管理性</li>\n</ul>\n<p>测试用例是测试人员的重要参考依据，也可以作为检验测试进度、测试工作量的因素，来对测试工作进行有效管理</p>\n<h3 id=\"测试用例的设计\"><a href=\"#测试用例的设计\" class=\"headerlink\" title=\"测试用例的设计\"></a>测试用例的设计</h3><p>通常由经验丰富的测试人员设计测试用例，经验较少的人员从执行测试用例开始进行，随着经验和技术的积累，再逐渐开始参与测试用例的设计工作。</p>\n<h3 id=\"tip1-测试设计说明\"><a href=\"#tip1-测试设计说明\" class=\"headerlink\" title=\"tip1.测试设计说明\"></a>tip1.测试设计说明</h3><p>类似开发人员有项目开发功能书一样，测试人员也要有说明书来指导测试人员如何设计测试用例，包括但不限于：被测特性、测试所用的方法、测试准则等。</p>\n<ul>\n<li><p>标识符</p>\n</li>\n<li><p>被测特性</p>\n</li>\n<li><p>方法</p>\n</li>\n<li><p>测试用例信息</p>\n</li>\n<li><p>通过/失败规则</p>\n</li>\n</ul>\n<h3 id=\"tip2-测试用例编写\"><a href=\"#tip2-测试用例编写\" class=\"headerlink\" title=\"tip2.测试用例编写\"></a>tip2.测试用例编写</h3><ul>\n<li>用例的编号</li>\n</ul>\n<p>由测试引用的唯一标识符，便于查找测试用例，也便于用例的追踪和管理</p>\n<ul>\n<li>测试标题</li>\n</ul>\n<p>对测试用例的描述，清楚表达用例的相关用途等</p>\n<ul>\n<li>测试项</li>\n</ul>\n<p>测试用例应该具体详细的描述所测试项的详细特征，更加详细具体</p>\n<ul>\n<li>测试环境要求</li>\n</ul>\n<p>该测试用例执行的外部条件，软硬件具体指标和测试工具等</p>\n<ul>\n<li>特殊要求</li>\n</ul>\n<p>对环境的特殊需求，如所需设备型号、对防火墙等的特殊设置</p>\n<ul>\n<li>测试输入说明</li>\n</ul>\n<p>提供测试执行中的各种输入条件。根据需求中的输入条件，确定测试用例的输入。</p>\n<ul>\n<li>操作步骤</li>\n</ul>\n<p>提供测试执行的过程步骤，对于复杂的用例，应该分为几个步骤分别完成测试。</p>\n<ul>\n<li>预期结果</li>\n</ul>\n<p>提供测试执行的预期结果，预期结果应该根据软件需求中的输出得出。如实际结果与预期结果不符合，则测试不通过。</p>\n<ul>\n<li>测试用例之间的关联</li>\n</ul>\n<p>用来标示该测试用例和其他测试用例之间的依赖关系。在实际测试中，很多测试用例并不是单独存在的，而是可能存在 某种相互依赖关系。</p>\n<ul>\n<li><p>测试用例设计人员和测试人员</p>\n</li>\n<li><p>测试优先级</p>\n</li>\n</ul>\n<p>一般分为0～4的一共5个等级，通过优先级来标注出软件测试的重点和先后顺序。</p>\n<h3 id=\"测试用例的分类和阶段\"><a href=\"#测试用例的分类和阶段\" class=\"headerlink\" title=\"测试用例的分类和阶段\"></a>测试用例的分类和阶段</h3><table>\n<thead>\n<tr>\n<th>测试阶段</th>\n<th align=\"center\">测试类型</th>\n<th align=\"right\">执行人员</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>单元测试</td>\n<td align=\"center\">模块功能测试、部分接口测试、覆盖测试、路径测试</td>\n<td align=\"right\">开发与测试结合</td>\n</tr>\n<tr>\n<td>集成测试</td>\n<td align=\"center\">接口测试、路径测试、部分功能测试</td>\n<td align=\"right\">开发与测试结合或测试</td>\n</tr>\n<tr>\n<td>系统测试</td>\n<td align=\"center\">功能测试、兼容性测试、性能测试、用户界面测试、安全性测试、强度测试、可靠性测试</td>\n<td align=\"right\">测试人员</td>\n</tr>\n<tr>\n<td>验收测试</td>\n<td align=\"center\">对于实际项目基本同上、包含文档测试</td>\n<td align=\"right\">测试人员或包含用户</td>\n</tr>\n</tbody></table>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"API接口测试入门\"><a href=\"#API接口测试入门\" class=\"headerlink\" title=\"API接口测试入门\"></a>API接口测试入门</h2><blockquote>\n<p>API是Application Programming Interface的简写，我们又把接口测试叫做API测试，主要用于实现多个系统之间或系统内部模块之间的通信和数据交换的能力。</p>\n</blockquote>\n<h3 id=\"1-接口定义\"><a href=\"#1-接口定义\" class=\"headerlink\" title=\"1.接口定义\"></a>1.接口定义</h3><p>接口测试主要用于系统与系统之间以及内部各个子系统或模块之间的交互点。定义特定的交互点，然后通过这些交互点，以及一些特殊的规则也就是协议，来进行数据之间的交互。前后端之间配合工作，就是其中一方定义实现接口，另一方来调用接口，以实现预期功能。</p>\n<p>举个简单的例子，我们在开车踩油门时，并不需要知道油门内部的零线/火线以及具体的电路结构，因为汽车制造商已经将给油的一系列操作全部封装成了油门这样一个接口，用户只要傻瓜式地进行踩油门的操作就可以让汽车实现加速。</p>\n<h3 id=\"2-接口分类\"><a href=\"#2-接口分类\" class=\"headerlink\" title=\"2.接口分类\"></a>2.接口分类</h3><blockquote>\n<p>WebService和HTTP</p>\n</blockquote>\n<p>（1）WebService接口走soap协议，请求报文和返回报文都是xml格式，通过SoapUI工具进行测试；</p>\n<p>（2）HTTP API接口走HTTP协议，通过路径来区分调用的方法，请求报文入参有多种形式，返回报文一般为json串，最常见的是get和post方法。</p>\n<h3 id=\"3-接口测试必要性\"><a href=\"#3-接口测试必要性\" class=\"headerlink\" title=\"3.接口测试必要性\"></a>3.接口测试必要性</h3><p>（1）效率上：<br>现在系统的复杂性与日俱增，传统测试方法人工成本过高且效率低下，而接口测试比较容易实现自动化集成，减少人工成本与时间，缩短测试周期；</p>\n<p>（2）安全上：<br>前后端架构分离，只依靠前端进行测试已经完全不能满足系统安全要求，绕过前面实在太容易，需要后端同样进行控制，在这种情况下就需要从接口层面验证。</p>\n<h3 id=\"4-接口测试原理\"><a href=\"#4-接口测试原理\" class=\"headerlink\" title=\"4.接口测试原理\"></a>4.接口测试原理</h3><p>通过程序模拟客户端向服务器发送请求报文，服务器接收请求报文后对报文做处理并向客户端返回应答，客户端再接收应答的一个过程。</p>\n<h3 id=\"5-接口文档关键部分\"><a href=\"#5-接口文档关键部分\" class=\"headerlink\" title=\"5.接口文档关键部分\"></a>5.接口文档关键部分</h3><p>接口说明</p>\n<p>调用的url</p>\n<p>请求方法（get、post）</p>\n<p>请求参数，参数类型、请求参数说明</p>\n<p>返回参数说明</p>\n<p>返回示例</p>\n<h3 id=\"6-接口测试分类\"><a href=\"#6-接口测试分类\" class=\"headerlink\" title=\"6.接口测试分类\"></a>6.接口测试分类</h3><p>（1）功能测试：<br>由于是针对基本业务功能进行测试，这部分是两种测试重合度最高的一块，开发同学通常所指的也主要是这部分的内容。<br>测试覆盖：业务流程，参数类型、可选项等。</p>\n<p>（2）边界分析测试：<br>在基本功能测试的基础上考虑输入输出的边界条件。相对来说接口可以覆盖的范围很广，同样的，接口出现问题的概率也更高。<br>测试覆盖：边界值、特殊字符等。</p>\n<p>（3）性能测试：<br>接口性能主要关注接口响应时间、并发、服务端资源的使用情况等。越靠近底层，对于系统的性能优化越有利。<br>测试覆盖：并发数、吞吐量、tps等</p>\n<h3 id=\"7-接口测试工具\"><a href=\"#7-接口测试工具\" class=\"headerlink\" title=\"7.接口测试工具\"></a>7.接口测试工具</h3><p>Postman，jmeter，soupUI等测试工具。</p>\n<h2 id=\"测试用例基本概念拓展\"><a href=\"#测试用例基本概念拓展\" class=\"headerlink\" title=\"测试用例基本概念拓展\"></a>测试用例基本概念拓展</h2><blockquote>\n<p>简单来说，测试用例就是一个文档，描述输入、输出、动作、时间等，其目的是确定应用程序的某个特性是否正常工作，并且达到程序所设计的期望结果。</p>\n</blockquote>\n<h3 id=\"测试用例的作用\"><a href=\"#测试用例的作用\" class=\"headerlink\" title=\"测试用例的作用\"></a>测试用例的作用</h3><ul>\n<li>有效性</li>\n</ul>\n<p>避免穷举测试，选取代表性的测试数据进行测试，节省时间和资源，提高测试效率</p>\n<ul>\n<li>避免测试的盲目性</li>\n</ul>\n<p>开始测试之前设计好测试用例，避免盲目测试，使得重点突出、目的明确</p>\n<ul>\n<li>可维护性</li>\n</ul>\n<p>软件版本更新后，只需部分修正测试用例即可继续开展，降低工作强度，缩短项目周期</p>\n<ul>\n<li>可复用性</li>\n</ul>\n<p>项目功能的模块化，使软件易于开发，使得测试过程事半功倍</p>\n<ul>\n<li>可评估性</li>\n</ul>\n<p>程序代码的质量的量化标准应该用测试用例的通过率和测试输出软件缺陷的数目来进行评估</p>\n<ul>\n<li>可管理性</li>\n</ul>\n<p>测试用例是测试人员的重要参考依据，也可以作为检验测试进度、测试工作量的因素，来对测试工作进行有效管理</p>\n<h3 id=\"测试用例的设计\"><a href=\"#测试用例的设计\" class=\"headerlink\" title=\"测试用例的设计\"></a>测试用例的设计</h3><p>通常由经验丰富的测试人员设计测试用例，经验较少的人员从执行测试用例开始进行，随着经验和技术的积累，再逐渐开始参与测试用例的设计工作。</p>\n<h3 id=\"tip1-测试设计说明\"><a href=\"#tip1-测试设计说明\" class=\"headerlink\" title=\"tip1.测试设计说明\"></a>tip1.测试设计说明</h3><p>类似开发人员有项目开发功能书一样，测试人员也要有说明书来指导测试人员如何设计测试用例，包括但不限于：被测特性、测试所用的方法、测试准则等。</p>\n<ul>\n<li><p>标识符</p>\n</li>\n<li><p>被测特性</p>\n</li>\n<li><p>方法</p>\n</li>\n<li><p>测试用例信息</p>\n</li>\n<li><p>通过/失败规则</p>\n</li>\n</ul>\n<h3 id=\"tip2-测试用例编写\"><a href=\"#tip2-测试用例编写\" class=\"headerlink\" title=\"tip2.测试用例编写\"></a>tip2.测试用例编写</h3><ul>\n<li>用例的编号</li>\n</ul>\n<p>由测试引用的唯一标识符，便于查找测试用例，也便于用例的追踪和管理</p>\n<ul>\n<li>测试标题</li>\n</ul>\n<p>对测试用例的描述，清楚表达用例的相关用途等</p>\n<ul>\n<li>测试项</li>\n</ul>\n<p>测试用例应该具体详细的描述所测试项的详细特征，更加详细具体</p>\n<ul>\n<li>测试环境要求</li>\n</ul>\n<p>该测试用例执行的外部条件，软硬件具体指标和测试工具等</p>\n<ul>\n<li>特殊要求</li>\n</ul>\n<p>对环境的特殊需求，如所需设备型号、对防火墙等的特殊设置</p>\n<ul>\n<li>测试输入说明</li>\n</ul>\n<p>提供测试执行中的各种输入条件。根据需求中的输入条件，确定测试用例的输入。</p>\n<ul>\n<li>操作步骤</li>\n</ul>\n<p>提供测试执行的过程步骤，对于复杂的用例，应该分为几个步骤分别完成测试。</p>\n<ul>\n<li>预期结果</li>\n</ul>\n<p>提供测试执行的预期结果，预期结果应该根据软件需求中的输出得出。如实际结果与预期结果不符合，则测试不通过。</p>\n<ul>\n<li>测试用例之间的关联</li>\n</ul>\n<p>用来标示该测试用例和其他测试用例之间的依赖关系。在实际测试中，很多测试用例并不是单独存在的，而是可能存在 某种相互依赖关系。</p>\n<ul>\n<li><p>测试用例设计人员和测试人员</p>\n</li>\n<li><p>测试优先级</p>\n</li>\n</ul>\n<p>一般分为0～4的一共5个等级，通过优先级来标注出软件测试的重点和先后顺序。</p>\n<h3 id=\"测试用例的分类和阶段\"><a href=\"#测试用例的分类和阶段\" class=\"headerlink\" title=\"测试用例的分类和阶段\"></a>测试用例的分类和阶段</h3><table>\n<thead>\n<tr>\n<th>测试阶段</th>\n<th align=\"center\">测试类型</th>\n<th align=\"right\">执行人员</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>单元测试</td>\n<td align=\"center\">模块功能测试、部分接口测试、覆盖测试、路径测试</td>\n<td align=\"right\">开发与测试结合</td>\n</tr>\n<tr>\n<td>集成测试</td>\n<td align=\"center\">接口测试、路径测试、部分功能测试</td>\n<td align=\"right\">开发与测试结合或测试</td>\n</tr>\n<tr>\n<td>系统测试</td>\n<td align=\"center\">功能测试、兼容性测试、性能测试、用户界面测试、安全性测试、强度测试、可靠性测试</td>\n<td align=\"right\">测试人员</td>\n</tr>\n<tr>\n<td>验收测试</td>\n<td align=\"center\">对于实际项目基本同上、包含文档测试</td>\n<td align=\"right\">测试人员或包含用户</td>\n</tr>\n</tbody></table>\n"},{"layout":"post","title":"Operating System 1","date":"2019-10-22T10:00:00.000Z","cover":"http://csuzhang.info/photos/OS-1.png","_content":"\n\n\n## OS基本概念、系统调用、中断\n\n### 一、操作系统特征\n\n1. 并发：多个事件在同一时间间隔内同时发生，在宏观上是同时发生的，在微观上是交替发生的；\n**区分：并行（多个事件在同一时刻同时发生，同一时刻运行多个指令，需要硬件支持：比如多处理器）**\n\n\n\n\n\n\n2. 共享：系统中的资源被多个并发的进程共同使用，分为互斥共享和同时共享；\n\n互斥共享：互斥共享的资源被称为临界资源，即同一时间只允许一个进程访问，需要同步机制来实现\n\n同时共享：同时共享比如有对硬件资源的访问\n\n3. 虚拟：将一个物理实体转换为多个逻辑实体，分为时分复用和时分复用；\n\n时分复用：多进程在同一处理器上并发执行（类似于轮询的方式）\n\n空分复用：将物理内存抽象为地址空间，每个进程有各自的地址空间\n\n4. 异步：进程不是一次执行完毕，而是走走停停。\n\n#### Question\n\n试述多道程序设计技术的基本思想。为什么采用多道程序设计技术可以提高资源利用率？\n\n> 多批道程序设计技术的**基本思想**是，在主存同时保持多道程序，主机以交替的方式同时处理多道程序。从宏观上看，主机内同时保持和处理若干道已开始运行但尚未结束的程序。从微观上看，某一时刻处理机只运行某道程序。 可以提高资源利用率的原因：由于任何一道作业的运行总是交替地串行使用CPU、外设等资源，即使用一段时间的CPU，然后使用一段时间的I/O设备，由于采用多道程序设计技术，加之对多道程序实施合理的运行调度，则可以实现CPU和I/O设备的高度并行，可以大大提高CPU与外设的利用率。\n\n什么是分时系统？其主要特征是什么？适用于哪些应用？\n\n> 分时系统是以多批道程序设计技术为基础的交互式系统，在此系统中，一台计算机与多台终端相连接，用户通过各自的终端和终端命令以交互的方式使用计算机系统。每个用户都感觉到好像是自己在独占计算机系统，而在系统内部则由操作系统以时间片轮转的方式负责协调多个用户分享CPU。 主要特征是： \n**并行性**：系统能协调多个终端用户同时使用计算机系统，能控制多道程序同时运行。\n**共享性**：对资源而言，系统在宏观上使各终端用户共享计算机系统中的各种资源，而在微观上它们则分时使用这些资源。\n**交互性**：人与计算机以交互的方式进行工作。 \n**独占性**：使用户感觉到他在独占使用计算机。现在的系统大部分都是分时系统，主要应用于人机交互的方面。\n\n### 二、系统调用\n\nDefinition: 如果一个进程在用户态需要使用内核态的功能，就进行系统调用从而陷入内核，由操作系统代为完成 。\n\n即为操作系统的作用，作为用户和操作系统你底层硬件之间的接口，系统调用是操作系统为上层提供接口，包括有**命令接口**和**程序接口**\n\n通过汇编语言可以进行系统调用，而汇编语言又为C语言向上提供了接口；C语言经过封装，又为上层的高级语言提供了接口，最终形成了我们使用的高级计算机语言，比如java、phthon等。**这种系统调用->汇编语言->C语言->高级语言->应用程序**的模式就是硬件和用户使用的应用程序之间的交互模式，是不是很有意思呢？haha\n\n### 三、操作系统的体系结构\n\n![OS-1](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/OS-1.png)\n\n> 通过程序状态寄存器PSW中的某个标记位来标记当前处理器的状态\n\n**OS的内核程序是操作系统的管理者，运行在核心态。**\n\n大内核、微内核：大内核相比之下多了系统资源管理部分的功能（不同操作系统，对于内核功能的划分可能不太一样）\n\n大内核：是将操作系统功能作为一个紧密结合的整体放到内核。由于各模块共享信息，因此有很高的性能。\n\n微内核：操作系统被划分成小的、定义良好的模块，只有微内核这一个模块运行在内核态，其余模块运行在用户态。**因为需要频繁地在用户态和核心态之间进行切换，所以会有一定的性能损失。**\n\n### 四、中断异常处理\n\nDefinition：\n\n中断:是指来自CPU执行指令以外的事件发生后，处理机暂停正在运行的程序，转去执行处理该事件的程序的过程。\n\n异常:是指源自CPU执行指令内部的事件发生后，处理机暂停正在执行的程序，转去处理该事件的过程。\n\n区别：广义的中断包括中断和异常，统一称为中断。狭义的中断(外中断，平常说的中断)和异常的区别在于是否与正在执行的指令有关，中断可以屏蔽，而异常不可屏蔽。\n\n#### 中断\n\n产生：为了实现多道程序并发执行而引入的技术\n\n作用：发生中断后，CPU会进入核心态\n\n> 中断是CPU从用户态进入核心态的唯一途径\n\n分类：外中断: 由 CPU 执行指令以外的事件引起，如I/O完成中断，表示设备输入/输出处理已经完成，处理器能够发送下一个输入/输出请求。此外还有时钟中断、控制台中断等。\n\n内中断: ①异常: 由 CPU 执行指令的内部事件引起，如非法操作码、地址越界、算术溢出等。②陷入: 在用户程序中使用系统调用。\n\n> **如何判断内外中断**\n中断信号来自内部还是外部\n\n#### 总结中断、异常和系统调用: \n\n|类型|源头|响应方式|处理机制|\n|--|--|--|--|\n|中断(外中断)|外设|异步|持续、对用户应用程序是透明的|\n|异常(内中断)|应用程序未知的行为|同步|杀死或重新执行这些未知的应用程序指令|\n|系统调用|应用程序请求操作系统提供服务|异步或者同步|等待和持续|\n\n\n#### Question\n\n1. 什么是中断向量？其内容是什么？试述中断的处理过程。\n\n**中断向量**：为处理方便，一般为系统中每个中断信号编制一个相应的中断处理程序，并把这些程序的入口地址放在特定的主存单元中。通常将这一片存放中断处理程序入口地址的主存单元称为中断向量。 **中断向量的内容**：对不同的系统，中断向量中的内容也不尽相同。一般每一个中断信号占用连续的两个单元：一个用来存放中断处理程序的入口地址，另一个用来保存在处理中断时CPU应具有的状态。 **中断的处理过程**：一般包括保存现场，分析中断原因，进入相应的中断处理程序，最后重新选择程序运行，恢复现场等过程。\n\n2. 为什么要把中断分级？如何设定中断的优先级？试述多级中断的处理原则。 (有关中断优先级)\n\n**为什么要把中断分级**：在计算机系统中，不同的中断源可能在同一时刻向CPU发出不同的中断信号，也可能前一中断尚未处理完，紧接着又发生了新的中断。此时，存在谁先被响应和谁先被处理的优先次序问题。为了使系统能及时地响应和处理所发生的紧急中断，根据中断的轻重缓急，对各类中断规定了高低不同的响应级别。 **如何设定中断的优先级**：中断分级的原则是根据中断的轻重缓急来排序，把紧迫程度大致相当的中断源归并在同一级，而把紧迫程度差别较大的中断源放在不同的级别。一般来说，高速设备的中断优先级高，慢速设备的中断优先级低。 **多级中断的处理原则**：当多级中断同时发生时，CPU按照由高到低的顺序响应。高级中断可以打断低级中断处理程序的运行，转而执行高级中断处理程序。当同级中断同时到时，则按位响应。\n","source":"_posts/2019-10-22-Operating-System-1.md","raw":"---\nlayout: post\ntitle:  \"Operating System 1\"\ndate: 2019-10-22 18:00:00\ncategories: OS\ntags: \n  - OS \n  - Linux\ncover: >- \n  http://csuzhang.info/photos/OS-1.png\n---\n\n\n\n## OS基本概念、系统调用、中断\n\n### 一、操作系统特征\n\n1. 并发：多个事件在同一时间间隔内同时发生，在宏观上是同时发生的，在微观上是交替发生的；\n**区分：并行（多个事件在同一时刻同时发生，同一时刻运行多个指令，需要硬件支持：比如多处理器）**\n\n\n\n\n\n\n2. 共享：系统中的资源被多个并发的进程共同使用，分为互斥共享和同时共享；\n\n互斥共享：互斥共享的资源被称为临界资源，即同一时间只允许一个进程访问，需要同步机制来实现\n\n同时共享：同时共享比如有对硬件资源的访问\n\n3. 虚拟：将一个物理实体转换为多个逻辑实体，分为时分复用和时分复用；\n\n时分复用：多进程在同一处理器上并发执行（类似于轮询的方式）\n\n空分复用：将物理内存抽象为地址空间，每个进程有各自的地址空间\n\n4. 异步：进程不是一次执行完毕，而是走走停停。\n\n#### Question\n\n试述多道程序设计技术的基本思想。为什么采用多道程序设计技术可以提高资源利用率？\n\n> 多批道程序设计技术的**基本思想**是，在主存同时保持多道程序，主机以交替的方式同时处理多道程序。从宏观上看，主机内同时保持和处理若干道已开始运行但尚未结束的程序。从微观上看，某一时刻处理机只运行某道程序。 可以提高资源利用率的原因：由于任何一道作业的运行总是交替地串行使用CPU、外设等资源，即使用一段时间的CPU，然后使用一段时间的I/O设备，由于采用多道程序设计技术，加之对多道程序实施合理的运行调度，则可以实现CPU和I/O设备的高度并行，可以大大提高CPU与外设的利用率。\n\n什么是分时系统？其主要特征是什么？适用于哪些应用？\n\n> 分时系统是以多批道程序设计技术为基础的交互式系统，在此系统中，一台计算机与多台终端相连接，用户通过各自的终端和终端命令以交互的方式使用计算机系统。每个用户都感觉到好像是自己在独占计算机系统，而在系统内部则由操作系统以时间片轮转的方式负责协调多个用户分享CPU。 主要特征是： \n**并行性**：系统能协调多个终端用户同时使用计算机系统，能控制多道程序同时运行。\n**共享性**：对资源而言，系统在宏观上使各终端用户共享计算机系统中的各种资源，而在微观上它们则分时使用这些资源。\n**交互性**：人与计算机以交互的方式进行工作。 \n**独占性**：使用户感觉到他在独占使用计算机。现在的系统大部分都是分时系统，主要应用于人机交互的方面。\n\n### 二、系统调用\n\nDefinition: 如果一个进程在用户态需要使用内核态的功能，就进行系统调用从而陷入内核，由操作系统代为完成 。\n\n即为操作系统的作用，作为用户和操作系统你底层硬件之间的接口，系统调用是操作系统为上层提供接口，包括有**命令接口**和**程序接口**\n\n通过汇编语言可以进行系统调用，而汇编语言又为C语言向上提供了接口；C语言经过封装，又为上层的高级语言提供了接口，最终形成了我们使用的高级计算机语言，比如java、phthon等。**这种系统调用->汇编语言->C语言->高级语言->应用程序**的模式就是硬件和用户使用的应用程序之间的交互模式，是不是很有意思呢？haha\n\n### 三、操作系统的体系结构\n\n![OS-1](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/OS-1.png)\n\n> 通过程序状态寄存器PSW中的某个标记位来标记当前处理器的状态\n\n**OS的内核程序是操作系统的管理者，运行在核心态。**\n\n大内核、微内核：大内核相比之下多了系统资源管理部分的功能（不同操作系统，对于内核功能的划分可能不太一样）\n\n大内核：是将操作系统功能作为一个紧密结合的整体放到内核。由于各模块共享信息，因此有很高的性能。\n\n微内核：操作系统被划分成小的、定义良好的模块，只有微内核这一个模块运行在内核态，其余模块运行在用户态。**因为需要频繁地在用户态和核心态之间进行切换，所以会有一定的性能损失。**\n\n### 四、中断异常处理\n\nDefinition：\n\n中断:是指来自CPU执行指令以外的事件发生后，处理机暂停正在运行的程序，转去执行处理该事件的程序的过程。\n\n异常:是指源自CPU执行指令内部的事件发生后，处理机暂停正在执行的程序，转去处理该事件的过程。\n\n区别：广义的中断包括中断和异常，统一称为中断。狭义的中断(外中断，平常说的中断)和异常的区别在于是否与正在执行的指令有关，中断可以屏蔽，而异常不可屏蔽。\n\n#### 中断\n\n产生：为了实现多道程序并发执行而引入的技术\n\n作用：发生中断后，CPU会进入核心态\n\n> 中断是CPU从用户态进入核心态的唯一途径\n\n分类：外中断: 由 CPU 执行指令以外的事件引起，如I/O完成中断，表示设备输入/输出处理已经完成，处理器能够发送下一个输入/输出请求。此外还有时钟中断、控制台中断等。\n\n内中断: ①异常: 由 CPU 执行指令的内部事件引起，如非法操作码、地址越界、算术溢出等。②陷入: 在用户程序中使用系统调用。\n\n> **如何判断内外中断**\n中断信号来自内部还是外部\n\n#### 总结中断、异常和系统调用: \n\n|类型|源头|响应方式|处理机制|\n|--|--|--|--|\n|中断(外中断)|外设|异步|持续、对用户应用程序是透明的|\n|异常(内中断)|应用程序未知的行为|同步|杀死或重新执行这些未知的应用程序指令|\n|系统调用|应用程序请求操作系统提供服务|异步或者同步|等待和持续|\n\n\n#### Question\n\n1. 什么是中断向量？其内容是什么？试述中断的处理过程。\n\n**中断向量**：为处理方便，一般为系统中每个中断信号编制一个相应的中断处理程序，并把这些程序的入口地址放在特定的主存单元中。通常将这一片存放中断处理程序入口地址的主存单元称为中断向量。 **中断向量的内容**：对不同的系统，中断向量中的内容也不尽相同。一般每一个中断信号占用连续的两个单元：一个用来存放中断处理程序的入口地址，另一个用来保存在处理中断时CPU应具有的状态。 **中断的处理过程**：一般包括保存现场，分析中断原因，进入相应的中断处理程序，最后重新选择程序运行，恢复现场等过程。\n\n2. 为什么要把中断分级？如何设定中断的优先级？试述多级中断的处理原则。 (有关中断优先级)\n\n**为什么要把中断分级**：在计算机系统中，不同的中断源可能在同一时刻向CPU发出不同的中断信号，也可能前一中断尚未处理完，紧接着又发生了新的中断。此时，存在谁先被响应和谁先被处理的优先次序问题。为了使系统能及时地响应和处理所发生的紧急中断，根据中断的轻重缓急，对各类中断规定了高低不同的响应级别。 **如何设定中断的优先级**：中断分级的原则是根据中断的轻重缓急来排序，把紧迫程度大致相当的中断源归并在同一级，而把紧迫程度差别较大的中断源放在不同的级别。一般来说，高速设备的中断优先级高，慢速设备的中断优先级低。 **多级中断的处理原则**：当多级中断同时发生时，CPU按照由高到低的顺序响应。高级中断可以打断低级中断处理程序的运行，转而执行高级中断处理程序。当同级中断同时到时，则按位响应。\n","slug":"2019-10-22-Operating-System-1","published":1,"updated":"2022-01-08T17:42:42.768Z","_id":"cky61ey430009aqoxanadgyzn","comments":1,"photos":[],"link":"","content":"<h2 id=\"OS基本概念、系统调用、中断\"><a href=\"#OS基本概念、系统调用、中断\" class=\"headerlink\" title=\"OS基本概念、系统调用、中断\"></a>OS基本概念、系统调用、中断</h2><h3 id=\"一、操作系统特征\"><a href=\"#一、操作系统特征\" class=\"headerlink\" title=\"一、操作系统特征\"></a>一、操作系统特征</h3><ol>\n<li>并发：多个事件在同一时间间隔内同时发生，在宏观上是同时发生的，在微观上是交替发生的；</li>\n</ol>\n<p><strong>区分：并行（多个事件在同一时刻同时发生，同一时刻运行多个指令，需要硬件支持：比如多处理器）</strong></p>\n<ol start=\"2\">\n<li>共享：系统中的资源被多个并发的进程共同使用，分为互斥共享和同时共享；</li>\n</ol>\n<p>互斥共享：互斥共享的资源被称为临界资源，即同一时间只允许一个进程访问，需要同步机制来实现</p>\n<p>同时共享：同时共享比如有对硬件资源的访问</p>\n<ol start=\"3\">\n<li>虚拟：将一个物理实体转换为多个逻辑实体，分为时分复用和时分复用；</li>\n</ol>\n<p>时分复用：多进程在同一处理器上并发执行（类似于轮询的方式）</p>\n<p>空分复用：将物理内存抽象为地址空间，每个进程有各自的地址空间</p>\n<ol start=\"4\">\n<li>异步：进程不是一次执行完毕，而是走走停停。</li>\n</ol>\n<h4 id=\"Question\"><a href=\"#Question\" class=\"headerlink\" title=\"Question\"></a>Question</h4><p>试述多道程序设计技术的基本思想。为什么采用多道程序设计技术可以提高资源利用率？</p>\n<blockquote>\n<p>多批道程序设计技术的<strong>基本思想</strong>是，在主存同时保持多道程序，主机以交替的方式同时处理多道程序。从宏观上看，主机内同时保持和处理若干道已开始运行但尚未结束的程序。从微观上看，某一时刻处理机只运行某道程序。 可以提高资源利用率的原因：由于任何一道作业的运行总是交替地串行使用CPU、外设等资源，即使用一段时间的CPU，然后使用一段时间的I/O设备，由于采用多道程序设计技术，加之对多道程序实施合理的运行调度，则可以实现CPU和I/O设备的高度并行，可以大大提高CPU与外设的利用率。</p>\n</blockquote>\n<p>什么是分时系统？其主要特征是什么？适用于哪些应用？</p>\n<blockquote>\n<p>分时系统是以多批道程序设计技术为基础的交互式系统，在此系统中，一台计算机与多台终端相连接，用户通过各自的终端和终端命令以交互的方式使用计算机系统。每个用户都感觉到好像是自己在独占计算机系统，而在系统内部则由操作系统以时间片轮转的方式负责协调多个用户分享CPU。 主要特征是：<br><strong>并行性</strong>：系统能协调多个终端用户同时使用计算机系统，能控制多道程序同时运行。<br><strong>共享性</strong>：对资源而言，系统在宏观上使各终端用户共享计算机系统中的各种资源，而在微观上它们则分时使用这些资源。<br><strong>交互性</strong>：人与计算机以交互的方式进行工作。<br><strong>独占性</strong>：使用户感觉到他在独占使用计算机。现在的系统大部分都是分时系统，主要应用于人机交互的方面。</p>\n</blockquote>\n<h3 id=\"二、系统调用\"><a href=\"#二、系统调用\" class=\"headerlink\" title=\"二、系统调用\"></a>二、系统调用</h3><p>Definition: 如果一个进程在用户态需要使用内核态的功能，就进行系统调用从而陷入内核，由操作系统代为完成 。</p>\n<p>即为操作系统的作用，作为用户和操作系统你底层硬件之间的接口，系统调用是操作系统为上层提供接口，包括有<strong>命令接口</strong>和<strong>程序接口</strong></p>\n<p>通过汇编语言可以进行系统调用，而汇编语言又为C语言向上提供了接口；C语言经过封装，又为上层的高级语言提供了接口，最终形成了我们使用的高级计算机语言，比如java、phthon等。<strong>这种系统调用-&gt;汇编语言-&gt;C语言-&gt;高级语言-&gt;应用程序</strong>的模式就是硬件和用户使用的应用程序之间的交互模式，是不是很有意思呢？haha</p>\n<h3 id=\"三、操作系统的体系结构\"><a href=\"#三、操作系统的体系结构\" class=\"headerlink\" title=\"三、操作系统的体系结构\"></a>三、操作系统的体系结构</h3><p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/OS-1.png\" alt=\"OS-1\"></p>\n<blockquote>\n<p>通过程序状态寄存器PSW中的某个标记位来标记当前处理器的状态</p>\n</blockquote>\n<p><strong>OS的内核程序是操作系统的管理者，运行在核心态。</strong></p>\n<p>大内核、微内核：大内核相比之下多了系统资源管理部分的功能（不同操作系统，对于内核功能的划分可能不太一样）</p>\n<p>大内核：是将操作系统功能作为一个紧密结合的整体放到内核。由于各模块共享信息，因此有很高的性能。</p>\n<p>微内核：操作系统被划分成小的、定义良好的模块，只有微内核这一个模块运行在内核态，其余模块运行在用户态。<strong>因为需要频繁地在用户态和核心态之间进行切换，所以会有一定的性能损失。</strong></p>\n<h3 id=\"四、中断异常处理\"><a href=\"#四、中断异常处理\" class=\"headerlink\" title=\"四、中断异常处理\"></a>四、中断异常处理</h3><p>Definition：</p>\n<p>中断:是指来自CPU执行指令以外的事件发生后，处理机暂停正在运行的程序，转去执行处理该事件的程序的过程。</p>\n<p>异常:是指源自CPU执行指令内部的事件发生后，处理机暂停正在执行的程序，转去处理该事件的过程。</p>\n<p>区别：广义的中断包括中断和异常，统一称为中断。狭义的中断(外中断，平常说的中断)和异常的区别在于是否与正在执行的指令有关，中断可以屏蔽，而异常不可屏蔽。</p>\n<h4 id=\"中断\"><a href=\"#中断\" class=\"headerlink\" title=\"中断\"></a>中断</h4><p>产生：为了实现多道程序并发执行而引入的技术</p>\n<p>作用：发生中断后，CPU会进入核心态</p>\n<blockquote>\n<p>中断是CPU从用户态进入核心态的唯一途径</p>\n</blockquote>\n<p>分类：外中断: 由 CPU 执行指令以外的事件引起，如I/O完成中断，表示设备输入/输出处理已经完成，处理器能够发送下一个输入/输出请求。此外还有时钟中断、控制台中断等。</p>\n<p>内中断: ①异常: 由 CPU 执行指令的内部事件引起，如非法操作码、地址越界、算术溢出等。②陷入: 在用户程序中使用系统调用。</p>\n<blockquote>\n<p><strong>如何判断内外中断</strong><br>中断信号来自内部还是外部</p>\n</blockquote>\n<h4 id=\"总结中断、异常和系统调用\"><a href=\"#总结中断、异常和系统调用\" class=\"headerlink\" title=\"总结中断、异常和系统调用:\"></a>总结中断、异常和系统调用:</h4><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>源头</th>\n<th>响应方式</th>\n<th>处理机制</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>中断(外中断)</td>\n<td>外设</td>\n<td>异步</td>\n<td>持续、对用户应用程序是透明的</td>\n</tr>\n<tr>\n<td>异常(内中断)</td>\n<td>应用程序未知的行为</td>\n<td>同步</td>\n<td>杀死或重新执行这些未知的应用程序指令</td>\n</tr>\n<tr>\n<td>系统调用</td>\n<td>应用程序请求操作系统提供服务</td>\n<td>异步或者同步</td>\n<td>等待和持续</td>\n</tr>\n</tbody></table>\n<h4 id=\"Question-1\"><a href=\"#Question-1\" class=\"headerlink\" title=\"Question\"></a>Question</h4><ol>\n<li>什么是中断向量？其内容是什么？试述中断的处理过程。</li>\n</ol>\n<p><strong>中断向量</strong>：为处理方便，一般为系统中每个中断信号编制一个相应的中断处理程序，并把这些程序的入口地址放在特定的主存单元中。通常将这一片存放中断处理程序入口地址的主存单元称为中断向量。 <strong>中断向量的内容</strong>：对不同的系统，中断向量中的内容也不尽相同。一般每一个中断信号占用连续的两个单元：一个用来存放中断处理程序的入口地址，另一个用来保存在处理中断时CPU应具有的状态。 <strong>中断的处理过程</strong>：一般包括保存现场，分析中断原因，进入相应的中断处理程序，最后重新选择程序运行，恢复现场等过程。</p>\n<ol start=\"2\">\n<li>为什么要把中断分级？如何设定中断的优先级？试述多级中断的处理原则。 (有关中断优先级)</li>\n</ol>\n<p><strong>为什么要把中断分级</strong>：在计算机系统中，不同的中断源可能在同一时刻向CPU发出不同的中断信号，也可能前一中断尚未处理完，紧接着又发生了新的中断。此时，存在谁先被响应和谁先被处理的优先次序问题。为了使系统能及时地响应和处理所发生的紧急中断，根据中断的轻重缓急，对各类中断规定了高低不同的响应级别。 <strong>如何设定中断的优先级</strong>：中断分级的原则是根据中断的轻重缓急来排序，把紧迫程度大致相当的中断源归并在同一级，而把紧迫程度差别较大的中断源放在不同的级别。一般来说，高速设备的中断优先级高，慢速设备的中断优先级低。 <strong>多级中断的处理原则</strong>：当多级中断同时发生时，CPU按照由高到低的顺序响应。高级中断可以打断低级中断处理程序的运行，转而执行高级中断处理程序。当同级中断同时到时，则按位响应。</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"OS基本概念、系统调用、中断\"><a href=\"#OS基本概念、系统调用、中断\" class=\"headerlink\" title=\"OS基本概念、系统调用、中断\"></a>OS基本概念、系统调用、中断</h2><h3 id=\"一、操作系统特征\"><a href=\"#一、操作系统特征\" class=\"headerlink\" title=\"一、操作系统特征\"></a>一、操作系统特征</h3><ol>\n<li>并发：多个事件在同一时间间隔内同时发生，在宏观上是同时发生的，在微观上是交替发生的；</li>\n</ol>\n<p><strong>区分：并行（多个事件在同一时刻同时发生，同一时刻运行多个指令，需要硬件支持：比如多处理器）</strong></p>\n<ol start=\"2\">\n<li>共享：系统中的资源被多个并发的进程共同使用，分为互斥共享和同时共享；</li>\n</ol>\n<p>互斥共享：互斥共享的资源被称为临界资源，即同一时间只允许一个进程访问，需要同步机制来实现</p>\n<p>同时共享：同时共享比如有对硬件资源的访问</p>\n<ol start=\"3\">\n<li>虚拟：将一个物理实体转换为多个逻辑实体，分为时分复用和时分复用；</li>\n</ol>\n<p>时分复用：多进程在同一处理器上并发执行（类似于轮询的方式）</p>\n<p>空分复用：将物理内存抽象为地址空间，每个进程有各自的地址空间</p>\n<ol start=\"4\">\n<li>异步：进程不是一次执行完毕，而是走走停停。</li>\n</ol>\n<h4 id=\"Question\"><a href=\"#Question\" class=\"headerlink\" title=\"Question\"></a>Question</h4><p>试述多道程序设计技术的基本思想。为什么采用多道程序设计技术可以提高资源利用率？</p>\n<blockquote>\n<p>多批道程序设计技术的<strong>基本思想</strong>是，在主存同时保持多道程序，主机以交替的方式同时处理多道程序。从宏观上看，主机内同时保持和处理若干道已开始运行但尚未结束的程序。从微观上看，某一时刻处理机只运行某道程序。 可以提高资源利用率的原因：由于任何一道作业的运行总是交替地串行使用CPU、外设等资源，即使用一段时间的CPU，然后使用一段时间的I/O设备，由于采用多道程序设计技术，加之对多道程序实施合理的运行调度，则可以实现CPU和I/O设备的高度并行，可以大大提高CPU与外设的利用率。</p>\n</blockquote>\n<p>什么是分时系统？其主要特征是什么？适用于哪些应用？</p>\n<blockquote>\n<p>分时系统是以多批道程序设计技术为基础的交互式系统，在此系统中，一台计算机与多台终端相连接，用户通过各自的终端和终端命令以交互的方式使用计算机系统。每个用户都感觉到好像是自己在独占计算机系统，而在系统内部则由操作系统以时间片轮转的方式负责协调多个用户分享CPU。 主要特征是：<br><strong>并行性</strong>：系统能协调多个终端用户同时使用计算机系统，能控制多道程序同时运行。<br><strong>共享性</strong>：对资源而言，系统在宏观上使各终端用户共享计算机系统中的各种资源，而在微观上它们则分时使用这些资源。<br><strong>交互性</strong>：人与计算机以交互的方式进行工作。<br><strong>独占性</strong>：使用户感觉到他在独占使用计算机。现在的系统大部分都是分时系统，主要应用于人机交互的方面。</p>\n</blockquote>\n<h3 id=\"二、系统调用\"><a href=\"#二、系统调用\" class=\"headerlink\" title=\"二、系统调用\"></a>二、系统调用</h3><p>Definition: 如果一个进程在用户态需要使用内核态的功能，就进行系统调用从而陷入内核，由操作系统代为完成 。</p>\n<p>即为操作系统的作用，作为用户和操作系统你底层硬件之间的接口，系统调用是操作系统为上层提供接口，包括有<strong>命令接口</strong>和<strong>程序接口</strong></p>\n<p>通过汇编语言可以进行系统调用，而汇编语言又为C语言向上提供了接口；C语言经过封装，又为上层的高级语言提供了接口，最终形成了我们使用的高级计算机语言，比如java、phthon等。<strong>这种系统调用-&gt;汇编语言-&gt;C语言-&gt;高级语言-&gt;应用程序</strong>的模式就是硬件和用户使用的应用程序之间的交互模式，是不是很有意思呢？haha</p>\n<h3 id=\"三、操作系统的体系结构\"><a href=\"#三、操作系统的体系结构\" class=\"headerlink\" title=\"三、操作系统的体系结构\"></a>三、操作系统的体系结构</h3><p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/OS-1.png\" alt=\"OS-1\"></p>\n<blockquote>\n<p>通过程序状态寄存器PSW中的某个标记位来标记当前处理器的状态</p>\n</blockquote>\n<p><strong>OS的内核程序是操作系统的管理者，运行在核心态。</strong></p>\n<p>大内核、微内核：大内核相比之下多了系统资源管理部分的功能（不同操作系统，对于内核功能的划分可能不太一样）</p>\n<p>大内核：是将操作系统功能作为一个紧密结合的整体放到内核。由于各模块共享信息，因此有很高的性能。</p>\n<p>微内核：操作系统被划分成小的、定义良好的模块，只有微内核这一个模块运行在内核态，其余模块运行在用户态。<strong>因为需要频繁地在用户态和核心态之间进行切换，所以会有一定的性能损失。</strong></p>\n<h3 id=\"四、中断异常处理\"><a href=\"#四、中断异常处理\" class=\"headerlink\" title=\"四、中断异常处理\"></a>四、中断异常处理</h3><p>Definition：</p>\n<p>中断:是指来自CPU执行指令以外的事件发生后，处理机暂停正在运行的程序，转去执行处理该事件的程序的过程。</p>\n<p>异常:是指源自CPU执行指令内部的事件发生后，处理机暂停正在执行的程序，转去处理该事件的过程。</p>\n<p>区别：广义的中断包括中断和异常，统一称为中断。狭义的中断(外中断，平常说的中断)和异常的区别在于是否与正在执行的指令有关，中断可以屏蔽，而异常不可屏蔽。</p>\n<h4 id=\"中断\"><a href=\"#中断\" class=\"headerlink\" title=\"中断\"></a>中断</h4><p>产生：为了实现多道程序并发执行而引入的技术</p>\n<p>作用：发生中断后，CPU会进入核心态</p>\n<blockquote>\n<p>中断是CPU从用户态进入核心态的唯一途径</p>\n</blockquote>\n<p>分类：外中断: 由 CPU 执行指令以外的事件引起，如I/O完成中断，表示设备输入/输出处理已经完成，处理器能够发送下一个输入/输出请求。此外还有时钟中断、控制台中断等。</p>\n<p>内中断: ①异常: 由 CPU 执行指令的内部事件引起，如非法操作码、地址越界、算术溢出等。②陷入: 在用户程序中使用系统调用。</p>\n<blockquote>\n<p><strong>如何判断内外中断</strong><br>中断信号来自内部还是外部</p>\n</blockquote>\n<h4 id=\"总结中断、异常和系统调用\"><a href=\"#总结中断、异常和系统调用\" class=\"headerlink\" title=\"总结中断、异常和系统调用:\"></a>总结中断、异常和系统调用:</h4><table>\n<thead>\n<tr>\n<th>类型</th>\n<th>源头</th>\n<th>响应方式</th>\n<th>处理机制</th>\n</tr>\n</thead>\n<tbody><tr>\n<td>中断(外中断)</td>\n<td>外设</td>\n<td>异步</td>\n<td>持续、对用户应用程序是透明的</td>\n</tr>\n<tr>\n<td>异常(内中断)</td>\n<td>应用程序未知的行为</td>\n<td>同步</td>\n<td>杀死或重新执行这些未知的应用程序指令</td>\n</tr>\n<tr>\n<td>系统调用</td>\n<td>应用程序请求操作系统提供服务</td>\n<td>异步或者同步</td>\n<td>等待和持续</td>\n</tr>\n</tbody></table>\n<h4 id=\"Question-1\"><a href=\"#Question-1\" class=\"headerlink\" title=\"Question\"></a>Question</h4><ol>\n<li>什么是中断向量？其内容是什么？试述中断的处理过程。</li>\n</ol>\n<p><strong>中断向量</strong>：为处理方便，一般为系统中每个中断信号编制一个相应的中断处理程序，并把这些程序的入口地址放在特定的主存单元中。通常将这一片存放中断处理程序入口地址的主存单元称为中断向量。 <strong>中断向量的内容</strong>：对不同的系统，中断向量中的内容也不尽相同。一般每一个中断信号占用连续的两个单元：一个用来存放中断处理程序的入口地址，另一个用来保存在处理中断时CPU应具有的状态。 <strong>中断的处理过程</strong>：一般包括保存现场，分析中断原因，进入相应的中断处理程序，最后重新选择程序运行，恢复现场等过程。</p>\n<ol start=\"2\">\n<li>为什么要把中断分级？如何设定中断的优先级？试述多级中断的处理原则。 (有关中断优先级)</li>\n</ol>\n<p><strong>为什么要把中断分级</strong>：在计算机系统中，不同的中断源可能在同一时刻向CPU发出不同的中断信号，也可能前一中断尚未处理完，紧接着又发生了新的中断。此时，存在谁先被响应和谁先被处理的优先次序问题。为了使系统能及时地响应和处理所发生的紧急中断，根据中断的轻重缓急，对各类中断规定了高低不同的响应级别。 <strong>如何设定中断的优先级</strong>：中断分级的原则是根据中断的轻重缓急来排序，把紧迫程度大致相当的中断源归并在同一级，而把紧迫程度差别较大的中断源放在不同的级别。一般来说，高速设备的中断优先级高，慢速设备的中断优先级低。 <strong>多级中断的处理原则</strong>：当多级中断同时发生时，CPU按照由高到低的顺序响应。高级中断可以打断低级中断处理程序的运行，转而执行高级中断处理程序。当同级中断同时到时，则按位响应。</p>\n"},{"layout":"post","title":"Shell脚本2小时速学","date":"2020-02-21T13:00:00.000Z","_content":"\n\n### Shell简介\n\nShell 是一个用 C 语言编写的程序，它是用户使用Linux的桥梁。Shell 既是一种命令语言，又是一种程序设计语言。Shell 是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问操作系统内核的服务。Ken Thompson 的 sh 是第一种 Unix Shell，Windows Explorer 是一个典型的图形界面 Shell。\n\n\n\n\n\n\n而Shell 脚本（shell script），是一种为 shell 编写的脚本程序。业界所说的 shell 通常都是指 shell 脚本，但读者朋友要知道，shell 和 shell script 是两个不同的概念。\n\n### 创建第一个Shell脚本\n\n打开文本编辑器(我用的是macOS，可以使用 vi/vim 命令来创建文件)，新建一个文件 test.sh，扩展名为 sh（sh代表shell），扩展名并不影响脚本执行，见名知意就好，如果你用 php 写 shell 脚本，扩展名就用 php 好了。\n\n输入一些代码，第一行一般是这样：\n```\n#!/bin/bash\necho \"Hello World !\"\n```\n**#! 是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行，即使用哪一种 Shell。**\n\n### 运行第一个Shell脚本(1/2)\n\n> 1、作为可执行程序\n\n将上面的代码保存为 test.sh，并 cd 到相应目录：\n```\nchmod +x ./test.sh  #使脚本具有执行权限\n./test.sh  #执行脚本\n```\n注意，一定要写成 ./test.sh，而不是 test.sh，运行其它二进制的程序也一样，直接写 test.sh，linux 系统会去 PATH 里寻找有没有叫 test.sh 的，而只有 /bin, /sbin, /usr/bin，/usr/sbin 等在 PATH 里，你的当前目录通常不在 PATH 里，所以写成 test.sh 是会找不到命令的，要用 ./test.sh 告诉系统说，就在当前目录找。\n\n> 2、作为解释器参数\n\n这种运行方式是，直接运行解释器，其参数就是 shell 脚本的文件名，如：\n```\n/bin/sh test.sh\n/bin/php test.php\n```\n\n### 定义Shell变量\n\n定义变量时，变量名不加美元符号（$，PHP语言中变量需要）\n\n**注意，变量名和等号之间不能有空格，这可能和你熟悉的所有编程语言都不一样。同时，变量名的命名须遵循如下规则：**\n\n+ 命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。\n+ 中间不能有空格，可以使用下划线（_）。\n+ 不能使用标点符号。\n+ 不能使用bash里的关键字（可用help命令查看保留关键字）。\n\n> 除了显式地直接赋值，还可以用语句给变量赋值，如：\n```\nfor file in `ls /etc`\n或\nfor file in $(ls /etc)\n```\n以上语句将 /etc 下目录的文件名循环出来。\n\n### 使用Shell变量\n\n使用一个定义过的变量，只要在变量名前面加美元符号即可，如：\n```php\nyour_name=\"qinjx\"\necho $your_name\necho ${your_name}\n```\n变量名外面的花括号是可选的，加不加都行，加花括号是为了帮助解释器识别变量的边界，比如下面这种情况：\n```php\nfor skill in Ada Coffe Action Java; do\n    echo \"I am good at ${skill}Script\"\ndone\n```\n\n如果不给skill变量加花括号，写成echo \"I am good at $skillScript\"，解释器就会把$skillScript当成一个变量（其值为空），代码执行结果就不是我们期望的样子了。\n\n**强烈推荐给所有变量加上花括号，这是个好的编程习惯。**\n\n> 已定义的变量，可以被重新定义\n\n\n","source":"_posts/2020-2-21-shell.md","raw":"---\nlayout: post\ntitle:  \"Shell脚本2小时速学\"\ndate: 2020-2-21 21:00:00\ncategories: Test\ntags: \n  - OS \n  - shell \n  - Test\n---\n\n\n### Shell简介\n\nShell 是一个用 C 语言编写的程序，它是用户使用Linux的桥梁。Shell 既是一种命令语言，又是一种程序设计语言。Shell 是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问操作系统内核的服务。Ken Thompson 的 sh 是第一种 Unix Shell，Windows Explorer 是一个典型的图形界面 Shell。\n\n\n\n\n\n\n而Shell 脚本（shell script），是一种为 shell 编写的脚本程序。业界所说的 shell 通常都是指 shell 脚本，但读者朋友要知道，shell 和 shell script 是两个不同的概念。\n\n### 创建第一个Shell脚本\n\n打开文本编辑器(我用的是macOS，可以使用 vi/vim 命令来创建文件)，新建一个文件 test.sh，扩展名为 sh（sh代表shell），扩展名并不影响脚本执行，见名知意就好，如果你用 php 写 shell 脚本，扩展名就用 php 好了。\n\n输入一些代码，第一行一般是这样：\n```\n#!/bin/bash\necho \"Hello World !\"\n```\n**#! 是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行，即使用哪一种 Shell。**\n\n### 运行第一个Shell脚本(1/2)\n\n> 1、作为可执行程序\n\n将上面的代码保存为 test.sh，并 cd 到相应目录：\n```\nchmod +x ./test.sh  #使脚本具有执行权限\n./test.sh  #执行脚本\n```\n注意，一定要写成 ./test.sh，而不是 test.sh，运行其它二进制的程序也一样，直接写 test.sh，linux 系统会去 PATH 里寻找有没有叫 test.sh 的，而只有 /bin, /sbin, /usr/bin，/usr/sbin 等在 PATH 里，你的当前目录通常不在 PATH 里，所以写成 test.sh 是会找不到命令的，要用 ./test.sh 告诉系统说，就在当前目录找。\n\n> 2、作为解释器参数\n\n这种运行方式是，直接运行解释器，其参数就是 shell 脚本的文件名，如：\n```\n/bin/sh test.sh\n/bin/php test.php\n```\n\n### 定义Shell变量\n\n定义变量时，变量名不加美元符号（$，PHP语言中变量需要）\n\n**注意，变量名和等号之间不能有空格，这可能和你熟悉的所有编程语言都不一样。同时，变量名的命名须遵循如下规则：**\n\n+ 命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。\n+ 中间不能有空格，可以使用下划线（_）。\n+ 不能使用标点符号。\n+ 不能使用bash里的关键字（可用help命令查看保留关键字）。\n\n> 除了显式地直接赋值，还可以用语句给变量赋值，如：\n```\nfor file in `ls /etc`\n或\nfor file in $(ls /etc)\n```\n以上语句将 /etc 下目录的文件名循环出来。\n\n### 使用Shell变量\n\n使用一个定义过的变量，只要在变量名前面加美元符号即可，如：\n```php\nyour_name=\"qinjx\"\necho $your_name\necho ${your_name}\n```\n变量名外面的花括号是可选的，加不加都行，加花括号是为了帮助解释器识别变量的边界，比如下面这种情况：\n```php\nfor skill in Ada Coffe Action Java; do\n    echo \"I am good at ${skill}Script\"\ndone\n```\n\n如果不给skill变量加花括号，写成echo \"I am good at $skillScript\"，解释器就会把$skillScript当成一个变量（其值为空），代码执行结果就不是我们期望的样子了。\n\n**强烈推荐给所有变量加上花括号，这是个好的编程习惯。**\n\n> 已定义的变量，可以被重新定义\n\n\n","slug":"2020-2-21-shell","published":1,"updated":"2022-01-08T16:23:49.355Z","_id":"cky61ey44000aaqoxem0b4u1h","comments":1,"photos":[],"link":"","content":"<h3 id=\"Shell简介\"><a href=\"#Shell简介\" class=\"headerlink\" title=\"Shell简介\"></a>Shell简介</h3><p>Shell 是一个用 C 语言编写的程序，它是用户使用Linux的桥梁。Shell 既是一种命令语言，又是一种程序设计语言。Shell 是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问操作系统内核的服务。Ken Thompson 的 sh 是第一种 Unix Shell，Windows Explorer 是一个典型的图形界面 Shell。</p>\n<p>而Shell 脚本（shell script），是一种为 shell 编写的脚本程序。业界所说的 shell 通常都是指 shell 脚本，但读者朋友要知道，shell 和 shell script 是两个不同的概念。</p>\n<h3 id=\"创建第一个Shell脚本\"><a href=\"#创建第一个Shell脚本\" class=\"headerlink\" title=\"创建第一个Shell脚本\"></a>创建第一个Shell脚本</h3><p>打开文本编辑器(我用的是macOS，可以使用 vi/vim 命令来创建文件)，新建一个文件 test.sh，扩展名为 sh（sh代表shell），扩展名并不影响脚本执行，见名知意就好，如果你用 php 写 shell 脚本，扩展名就用 php 好了。</p>\n<p>输入一些代码，第一行一般是这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">echo &quot;Hello World !&quot;</span><br></pre></td></tr></table></figure>\n<p><strong>#! 是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行，即使用哪一种 Shell。</strong></p>\n<h3 id=\"运行第一个Shell脚本-1-2\"><a href=\"#运行第一个Shell脚本-1-2\" class=\"headerlink\" title=\"运行第一个Shell脚本(1/2)\"></a>运行第一个Shell脚本(1/2)</h3><blockquote>\n<p>1、作为可执行程序</p>\n</blockquote>\n<p>将上面的代码保存为 test.sh，并 cd 到相应目录：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x ./test.sh  #使脚本具有执行权限</span><br><span class=\"line\">./test.sh  #执行脚本</span><br></pre></td></tr></table></figure>\n<p>注意，一定要写成 ./test.sh，而不是 test.sh，运行其它二进制的程序也一样，直接写 test.sh，linux 系统会去 PATH 里寻找有没有叫 test.sh 的，而只有 /bin, /sbin, /usr/bin，/usr/sbin 等在 PATH 里，你的当前目录通常不在 PATH 里，所以写成 test.sh 是会找不到命令的，要用 ./test.sh 告诉系统说，就在当前目录找。</p>\n<blockquote>\n<p>2、作为解释器参数</p>\n</blockquote>\n<p>这种运行方式是，直接运行解释器，其参数就是 shell 脚本的文件名，如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/bin/sh test.sh</span><br><span class=\"line\">/bin/php test.php</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"定义Shell变量\"><a href=\"#定义Shell变量\" class=\"headerlink\" title=\"定义Shell变量\"></a>定义Shell变量</h3><p>定义变量时，变量名不加美元符号（$，PHP语言中变量需要）</p>\n<p><strong>注意，变量名和等号之间不能有空格，这可能和你熟悉的所有编程语言都不一样。同时，变量名的命名须遵循如下规则：</strong></p>\n<ul>\n<li>命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。</li>\n<li>中间不能有空格，可以使用下划线（_）。</li>\n<li>不能使用标点符号。</li>\n<li>不能使用bash里的关键字（可用help命令查看保留关键字）。</li>\n</ul>\n<blockquote>\n<p>除了显式地直接赋值，还可以用语句给变量赋值，如：</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for file in `ls /etc`</span><br><span class=\"line\">或</span><br><span class=\"line\">for file in $(ls /etc)</span><br></pre></td></tr></table></figure>\n<p>以上语句将 /etc 下目录的文件名循环出来。</p>\n<h3 id=\"使用Shell变量\"><a href=\"#使用Shell变量\" class=\"headerlink\" title=\"使用Shell变量\"></a>使用Shell变量</h3><p>使用一个定义过的变量，只要在变量名前面加美元符号即可，如：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">your_name=<span class=\"string\">&quot;qinjx&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$your_name</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> $&#123;your_name&#125;</span><br></pre></td></tr></table></figure>\n<p>变量名外面的花括号是可选的，加不加都行，加花括号是为了帮助解释器识别变量的边界，比如下面这种情况：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> skill in Ada Coffe Action Java; <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&quot;I am good at $&#123;skill&#125;Script&quot;</span></span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n\n<p>如果不给skill变量加花括号，写成echo “I am good at $skillScript”，解释器就会把$skillScript当成一个变量（其值为空），代码执行结果就不是我们期望的样子了。</p>\n<p><strong>强烈推荐给所有变量加上花括号，这是个好的编程习惯。</strong></p>\n<blockquote>\n<p>已定义的变量，可以被重新定义</p>\n</blockquote>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"Shell简介\"><a href=\"#Shell简介\" class=\"headerlink\" title=\"Shell简介\"></a>Shell简介</h3><p>Shell 是一个用 C 语言编写的程序，它是用户使用Linux的桥梁。Shell 既是一种命令语言，又是一种程序设计语言。Shell 是指一种应用程序，这个应用程序提供了一个界面，用户通过这个界面访问操作系统内核的服务。Ken Thompson 的 sh 是第一种 Unix Shell，Windows Explorer 是一个典型的图形界面 Shell。</p>\n<p>而Shell 脚本（shell script），是一种为 shell 编写的脚本程序。业界所说的 shell 通常都是指 shell 脚本，但读者朋友要知道，shell 和 shell script 是两个不同的概念。</p>\n<h3 id=\"创建第一个Shell脚本\"><a href=\"#创建第一个Shell脚本\" class=\"headerlink\" title=\"创建第一个Shell脚本\"></a>创建第一个Shell脚本</h3><p>打开文本编辑器(我用的是macOS，可以使用 vi/vim 命令来创建文件)，新建一个文件 test.sh，扩展名为 sh（sh代表shell），扩展名并不影响脚本执行，见名知意就好，如果你用 php 写 shell 脚本，扩展名就用 php 好了。</p>\n<p>输入一些代码，第一行一般是这样：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">#!/bin/bash</span><br><span class=\"line\">echo &quot;Hello World !&quot;</span><br></pre></td></tr></table></figure>\n<p><strong>#! 是一个约定的标记，它告诉系统这个脚本需要什么解释器来执行，即使用哪一种 Shell。</strong></p>\n<h3 id=\"运行第一个Shell脚本-1-2\"><a href=\"#运行第一个Shell脚本-1-2\" class=\"headerlink\" title=\"运行第一个Shell脚本(1/2)\"></a>运行第一个Shell脚本(1/2)</h3><blockquote>\n<p>1、作为可执行程序</p>\n</blockquote>\n<p>将上面的代码保存为 test.sh，并 cd 到相应目录：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">chmod +x ./test.sh  #使脚本具有执行权限</span><br><span class=\"line\">./test.sh  #执行脚本</span><br></pre></td></tr></table></figure>\n<p>注意，一定要写成 ./test.sh，而不是 test.sh，运行其它二进制的程序也一样，直接写 test.sh，linux 系统会去 PATH 里寻找有没有叫 test.sh 的，而只有 /bin, /sbin, /usr/bin，/usr/sbin 等在 PATH 里，你的当前目录通常不在 PATH 里，所以写成 test.sh 是会找不到命令的，要用 ./test.sh 告诉系统说，就在当前目录找。</p>\n<blockquote>\n<p>2、作为解释器参数</p>\n</blockquote>\n<p>这种运行方式是，直接运行解释器，其参数就是 shell 脚本的文件名，如：</p>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">/bin/sh test.sh</span><br><span class=\"line\">/bin/php test.php</span><br></pre></td></tr></table></figure>\n\n<h3 id=\"定义Shell变量\"><a href=\"#定义Shell变量\" class=\"headerlink\" title=\"定义Shell变量\"></a>定义Shell变量</h3><p>定义变量时，变量名不加美元符号（$，PHP语言中变量需要）</p>\n<p><strong>注意，变量名和等号之间不能有空格，这可能和你熟悉的所有编程语言都不一样。同时，变量名的命名须遵循如下规则：</strong></p>\n<ul>\n<li>命名只能使用英文字母，数字和下划线，首个字符不能以数字开头。</li>\n<li>中间不能有空格，可以使用下划线（_）。</li>\n<li>不能使用标点符号。</li>\n<li>不能使用bash里的关键字（可用help命令查看保留关键字）。</li>\n</ul>\n<blockquote>\n<p>除了显式地直接赋值，还可以用语句给变量赋值，如：</p>\n</blockquote>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">for file in `ls /etc`</span><br><span class=\"line\">或</span><br><span class=\"line\">for file in $(ls /etc)</span><br></pre></td></tr></table></figure>\n<p>以上语句将 /etc 下目录的文件名循环出来。</p>\n<h3 id=\"使用Shell变量\"><a href=\"#使用Shell变量\" class=\"headerlink\" title=\"使用Shell变量\"></a>使用Shell变量</h3><p>使用一个定义过的变量，只要在变量名前面加美元符号即可，如：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">your_name=<span class=\"string\">&quot;qinjx&quot;</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> <span class=\"variable\">$your_name</span></span><br><span class=\"line\"><span class=\"keyword\">echo</span> $&#123;your_name&#125;</span><br></pre></td></tr></table></figure>\n<p>变量名外面的花括号是可选的，加不加都行，加花括号是为了帮助解释器识别变量的边界，比如下面这种情况：</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">for</span> skill in Ada Coffe Action Java; <span class=\"keyword\">do</span></span><br><span class=\"line\">    <span class=\"keyword\">echo</span> <span class=\"string\">&quot;I am good at $&#123;skill&#125;Script&quot;</span></span><br><span class=\"line\">done</span><br></pre></td></tr></table></figure>\n\n<p>如果不给skill变量加花括号，写成echo “I am good at $skillScript”，解释器就会把$skillScript当成一个变量（其值为空），代码执行结果就不是我们期望的样子了。</p>\n<p><strong>强烈推荐给所有变量加上花括号，这是个好的编程习惯。</strong></p>\n<blockquote>\n<p>已定义的变量，可以被重新定义</p>\n</blockquote>\n"},{"layout":"post","title":"Operating System 3","date":"2019-10-24T10:00:00.000Z","cover":"http://csuzhang.info/photos/OS-8.png","_content":"\n\n## 四、进程通信\n\n定义：进程之间的信息交换\n\n**进程是资源分配的最小单位**，因此，各个进程的内存地址空间相互独立\n\n通常来说，为了保证安全，一个进程不能直接访问另一个的地址空间\n\n> 三种通信方式: 共享存储、 管道通信、消息传递\n\n\n\n\n\n\n\n\n\n#### 共享存储\n\n![OS-8](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/OS-8.png)\n\n设置一个共享空间，进程间互斥的进行访问；\n\n分为：\n1. 基于数据结构的共享存储，共享速度慢，限制多，低级通信\n\n2. 基于存储区的共享存储，内存中划分出存储区，数据形式、存储位置都由进程来控制，速度快，高级通信\n\n#### 管道通信pipe\n\n> 主要用于父子进程间通信\n\n![OS-9](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/OS-9.png)\n\n“管道”指用于连接读写进程的共享文件，称为pipe文件（内存中开辟固定大小的缓冲区）\n\n```php\n@Test\npublic void testPipe() throws IOException {\n    // 1、获取通道\n    Pipe pipe = Pipe.open();\n\n    // 2、获取sink管道，用来传送数据\n    Pipe.SinkChannel sinkChannel = pipe.sink();\n\n    // 3、申请一定大小的缓冲区\n    ByteBuffer byteBuffer = ByteBuffer.allocate(1024);\n    byteBuffer.put(\"123232142345234\".getBytes());\n    byteBuffer.flip();\n\n    // 4、sink发送数据\n    sinkChannel.write(byteBuffer);\n\n    // 5、创建接收pipe数据的source管道\n    Pipe.SourceChannel sourceChannel = pipe.source();\n    // 6、接收数据，并保存到缓冲区中\n    ByteBuffer byteBuffer2 = ByteBuffer.allocate(1024);\n    byteBuffer2.flip();\n    int length = sourceChannel.read(byteBuffer2);\n\n    System.out.println(new String(byteBuffer2.array(), 0, length));\n\n    sourceChannel.close();\n    sinkChannel.close();\n}\n```\n\n**注意：**\n\n1. 半双工通信：某时间段内只能单向传输（进程互斥进行访问），若要实现双向通信，就设置两个管道\n\n2. 数据以字符流的形式写入管道\n\n3. 如果没有写满，就不允许读；同样，如果没读空，就不允许写\n\n4. pipe写满时，write()系统调用被阻塞，等待读进程将数据取走后，管道变空，read()被阻塞\n\n#### 消息传递\n\n![OS-10](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/OS-10.png)\n\n数据交换以格式化消息Message为单位，通过OS的“发送/接收消息”的原语进行\n\n**消息 = 消息头 + 消息体**\n（消息头：发送ID、接收ID、消息类型、长度）\n\n## 五、多线程概念模型\n\n引入线程的目的：提高并发度\n\n传统的进程是程序执行流的最小单位；有了多线程，线程就成了程序执行流的最小单位\n\n**进程是资源分配的最小单位，线程是调度的最小单位**\n\n1. 进程间并发，需要切换进程的运行环境，开销大\n\n2. 线程间并发，若在同一进程内，不切换环境，开销小\n\n#### 属性要点\n\n1. 每个线程都由独立的ID、线程控制块TCB\n\n2. 线程几乎不拥有系统资源\n\n3. 同一进程的线程之间共享进程的资源\n\n#### 实现方式\n\n用户级线程、内核级线程\n\n> 用户级线程——多对一模型\n由应用程序通过线程池来管理实现。**用户级线程中，线程切换可在用户态下完成**\n\n理解：**从用户角度可以看到的线程**\n\n> 内核级线程——一对一模型\n由操作系统完成该进程的管理。**内核级线程中，线程切换需要在核心态下完成**\n\n理解：**从OS内核视角看到的线程**\n\n> 二者组合\n将n 个用户级线程映射到m个内核级线程（n >= m）\n\n克服了多对一模型并发度不高的缺点，克服了一对一模型中每个用户进程占用太多资源的缺点\n\n通过下图进行小节下：\n\n![OS-11](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/OS-11.png)\n\n## 六、CPU的调度\n\n从就绪队列中按照一定的算法选择一个进程并将CPU时间分配给他调度，实现进程的并发\n\n**三种调度:高级调度(作业调度)、中级调度(内存调度)、低级调度(进程调度)**\n\n> 高级调度\n是外存与内存之间的调度\n\n按一定的原则从外存上处于后备队列的作业中挑选一个或多个作业，分配内存等必要资源，建立进程\n\n> 中级调度\n提高系统内存利用率、系统吞吐量\n\n决定将哪个处于挂起状态的进程重新调入内存，一个进程可能多次被调出、调入内存，**发生频率高于高级调度**\n\n> 低级调度\n最基本的一种调度\n\n按照某种策略或方法，从就绪队列中选取一个进程分配CPU时间，**调用的频率很高**\n\n![OS-12](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/OS-12.png)\n\n","source":"_posts/2019-10-24-Operating-System-3.md","raw":"---\nlayout: post\ntitle:  \"Operating System 3\"\ndate: 2019-10-24 18:00:00\ncategories: OS\ntags: \n  - OS \n  - Linux\ncover: >- \n  http://csuzhang.info/photos/OS-8.png\n---\n\n\n## 四、进程通信\n\n定义：进程之间的信息交换\n\n**进程是资源分配的最小单位**，因此，各个进程的内存地址空间相互独立\n\n通常来说，为了保证安全，一个进程不能直接访问另一个的地址空间\n\n> 三种通信方式: 共享存储、 管道通信、消息传递\n\n\n\n\n\n\n\n\n\n#### 共享存储\n\n![OS-8](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/OS-8.png)\n\n设置一个共享空间，进程间互斥的进行访问；\n\n分为：\n1. 基于数据结构的共享存储，共享速度慢，限制多，低级通信\n\n2. 基于存储区的共享存储，内存中划分出存储区，数据形式、存储位置都由进程来控制，速度快，高级通信\n\n#### 管道通信pipe\n\n> 主要用于父子进程间通信\n\n![OS-9](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/OS-9.png)\n\n“管道”指用于连接读写进程的共享文件，称为pipe文件（内存中开辟固定大小的缓冲区）\n\n```php\n@Test\npublic void testPipe() throws IOException {\n    // 1、获取通道\n    Pipe pipe = Pipe.open();\n\n    // 2、获取sink管道，用来传送数据\n    Pipe.SinkChannel sinkChannel = pipe.sink();\n\n    // 3、申请一定大小的缓冲区\n    ByteBuffer byteBuffer = ByteBuffer.allocate(1024);\n    byteBuffer.put(\"123232142345234\".getBytes());\n    byteBuffer.flip();\n\n    // 4、sink发送数据\n    sinkChannel.write(byteBuffer);\n\n    // 5、创建接收pipe数据的source管道\n    Pipe.SourceChannel sourceChannel = pipe.source();\n    // 6、接收数据，并保存到缓冲区中\n    ByteBuffer byteBuffer2 = ByteBuffer.allocate(1024);\n    byteBuffer2.flip();\n    int length = sourceChannel.read(byteBuffer2);\n\n    System.out.println(new String(byteBuffer2.array(), 0, length));\n\n    sourceChannel.close();\n    sinkChannel.close();\n}\n```\n\n**注意：**\n\n1. 半双工通信：某时间段内只能单向传输（进程互斥进行访问），若要实现双向通信，就设置两个管道\n\n2. 数据以字符流的形式写入管道\n\n3. 如果没有写满，就不允许读；同样，如果没读空，就不允许写\n\n4. pipe写满时，write()系统调用被阻塞，等待读进程将数据取走后，管道变空，read()被阻塞\n\n#### 消息传递\n\n![OS-10](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/OS-10.png)\n\n数据交换以格式化消息Message为单位，通过OS的“发送/接收消息”的原语进行\n\n**消息 = 消息头 + 消息体**\n（消息头：发送ID、接收ID、消息类型、长度）\n\n## 五、多线程概念模型\n\n引入线程的目的：提高并发度\n\n传统的进程是程序执行流的最小单位；有了多线程，线程就成了程序执行流的最小单位\n\n**进程是资源分配的最小单位，线程是调度的最小单位**\n\n1. 进程间并发，需要切换进程的运行环境，开销大\n\n2. 线程间并发，若在同一进程内，不切换环境，开销小\n\n#### 属性要点\n\n1. 每个线程都由独立的ID、线程控制块TCB\n\n2. 线程几乎不拥有系统资源\n\n3. 同一进程的线程之间共享进程的资源\n\n#### 实现方式\n\n用户级线程、内核级线程\n\n> 用户级线程——多对一模型\n由应用程序通过线程池来管理实现。**用户级线程中，线程切换可在用户态下完成**\n\n理解：**从用户角度可以看到的线程**\n\n> 内核级线程——一对一模型\n由操作系统完成该进程的管理。**内核级线程中，线程切换需要在核心态下完成**\n\n理解：**从OS内核视角看到的线程**\n\n> 二者组合\n将n 个用户级线程映射到m个内核级线程（n >= m）\n\n克服了多对一模型并发度不高的缺点，克服了一对一模型中每个用户进程占用太多资源的缺点\n\n通过下图进行小节下：\n\n![OS-11](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/OS-11.png)\n\n## 六、CPU的调度\n\n从就绪队列中按照一定的算法选择一个进程并将CPU时间分配给他调度，实现进程的并发\n\n**三种调度:高级调度(作业调度)、中级调度(内存调度)、低级调度(进程调度)**\n\n> 高级调度\n是外存与内存之间的调度\n\n按一定的原则从外存上处于后备队列的作业中挑选一个或多个作业，分配内存等必要资源，建立进程\n\n> 中级调度\n提高系统内存利用率、系统吞吐量\n\n决定将哪个处于挂起状态的进程重新调入内存，一个进程可能多次被调出、调入内存，**发生频率高于高级调度**\n\n> 低级调度\n最基本的一种调度\n\n按照某种策略或方法，从就绪队列中选取一个进程分配CPU时间，**调用的频率很高**\n\n![OS-12](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/OS-12.png)\n\n","slug":"2019-10-24-Operating-System-3","published":1,"updated":"2022-01-08T17:43:07.563Z","_id":"cky61ey45000eaqox0g5l09gv","comments":1,"photos":[],"link":"","content":"<h2 id=\"四、进程通信\"><a href=\"#四、进程通信\" class=\"headerlink\" title=\"四、进程通信\"></a>四、进程通信</h2><p>定义：进程之间的信息交换</p>\n<p><strong>进程是资源分配的最小单位</strong>，因此，各个进程的内存地址空间相互独立</p>\n<p>通常来说，为了保证安全，一个进程不能直接访问另一个的地址空间</p>\n<blockquote>\n<p>三种通信方式: 共享存储、 管道通信、消息传递</p>\n</blockquote>\n<h4 id=\"共享存储\"><a href=\"#共享存储\" class=\"headerlink\" title=\"共享存储\"></a>共享存储</h4><p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/OS-8.png\" alt=\"OS-8\"></p>\n<p>设置一个共享空间，进程间互斥的进行访问；</p>\n<p>分为：</p>\n<ol>\n<li><p>基于数据结构的共享存储，共享速度慢，限制多，低级通信</p>\n</li>\n<li><p>基于存储区的共享存储，内存中划分出存储区，数据形式、存储位置都由进程来控制，速度快，高级通信</p>\n</li>\n</ol>\n<h4 id=\"管道通信pipe\"><a href=\"#管道通信pipe\" class=\"headerlink\" title=\"管道通信pipe\"></a>管道通信pipe</h4><blockquote>\n<p>主要用于父子进程间通信</p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/OS-9.png\" alt=\"OS-9\"></p>\n<p>“管道”指用于连接读写进程的共享文件，称为pipe文件（内存中开辟固定大小的缓冲区）</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> testPipe() throws IOException &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1、获取通道</span></span><br><span class=\"line\">    Pipe pipe = Pipe.open();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 2、获取sink管道，用来传送数据</span></span><br><span class=\"line\">    Pipe.SinkChannel sinkChannel = pipe.sink();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 3、申请一定大小的缓冲区</span></span><br><span class=\"line\">    ByteBuffer byteBuffer = ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\">    byteBuffer.put(<span class=\"string\">&quot;123232142345234&quot;</span>.getBytes());</span><br><span class=\"line\">    byteBuffer.flip();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 4、sink发送数据</span></span><br><span class=\"line\">    sinkChannel.write(byteBuffer);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 5、创建接收pipe数据的source管道</span></span><br><span class=\"line\">    Pipe.SourceChannel sourceChannel = pipe.source();</span><br><span class=\"line\">    <span class=\"comment\">// 6、接收数据，并保存到缓冲区中</span></span><br><span class=\"line\">    ByteBuffer byteBuffer2 = ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\">    byteBuffer2.flip();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> length = sourceChannel.read(byteBuffer2);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(<span class=\"keyword\">new</span> <span class=\"keyword\">String</span>(byteBuffer2.<span class=\"keyword\">array</span>(), <span class=\"number\">0</span>, length));</span><br><span class=\"line\"></span><br><span class=\"line\">    sourceChannel.close();</span><br><span class=\"line\">    sinkChannel.close();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：</strong></p>\n<ol>\n<li><p>半双工通信：某时间段内只能单向传输（进程互斥进行访问），若要实现双向通信，就设置两个管道</p>\n</li>\n<li><p>数据以字符流的形式写入管道</p>\n</li>\n<li><p>如果没有写满，就不允许读；同样，如果没读空，就不允许写</p>\n</li>\n<li><p>pipe写满时，write()系统调用被阻塞，等待读进程将数据取走后，管道变空，read()被阻塞</p>\n</li>\n</ol>\n<h4 id=\"消息传递\"><a href=\"#消息传递\" class=\"headerlink\" title=\"消息传递\"></a>消息传递</h4><p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/OS-10.png\" alt=\"OS-10\"></p>\n<p>数据交换以格式化消息Message为单位，通过OS的“发送/接收消息”的原语进行</p>\n<p><strong>消息 = 消息头 + 消息体</strong><br>（消息头：发送ID、接收ID、消息类型、长度）</p>\n<h2 id=\"五、多线程概念模型\"><a href=\"#五、多线程概念模型\" class=\"headerlink\" title=\"五、多线程概念模型\"></a>五、多线程概念模型</h2><p>引入线程的目的：提高并发度</p>\n<p>传统的进程是程序执行流的最小单位；有了多线程，线程就成了程序执行流的最小单位</p>\n<p><strong>进程是资源分配的最小单位，线程是调度的最小单位</strong></p>\n<ol>\n<li><p>进程间并发，需要切换进程的运行环境，开销大</p>\n</li>\n<li><p>线程间并发，若在同一进程内，不切换环境，开销小</p>\n</li>\n</ol>\n<h4 id=\"属性要点\"><a href=\"#属性要点\" class=\"headerlink\" title=\"属性要点\"></a>属性要点</h4><ol>\n<li><p>每个线程都由独立的ID、线程控制块TCB</p>\n</li>\n<li><p>线程几乎不拥有系统资源</p>\n</li>\n<li><p>同一进程的线程之间共享进程的资源</p>\n</li>\n</ol>\n<h4 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h4><p>用户级线程、内核级线程</p>\n<blockquote>\n<p>用户级线程——多对一模型<br>由应用程序通过线程池来管理实现。<strong>用户级线程中，线程切换可在用户态下完成</strong></p>\n</blockquote>\n<p>理解：<strong>从用户角度可以看到的线程</strong></p>\n<blockquote>\n<p>内核级线程——一对一模型<br>由操作系统完成该进程的管理。<strong>内核级线程中，线程切换需要在核心态下完成</strong></p>\n</blockquote>\n<p>理解：<strong>从OS内核视角看到的线程</strong></p>\n<blockquote>\n<p>二者组合<br>将n 个用户级线程映射到m个内核级线程（n &gt;= m）</p>\n</blockquote>\n<p>克服了多对一模型并发度不高的缺点，克服了一对一模型中每个用户进程占用太多资源的缺点</p>\n<p>通过下图进行小节下：</p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/OS-11.png\" alt=\"OS-11\"></p>\n<h2 id=\"六、CPU的调度\"><a href=\"#六、CPU的调度\" class=\"headerlink\" title=\"六、CPU的调度\"></a>六、CPU的调度</h2><p>从就绪队列中按照一定的算法选择一个进程并将CPU时间分配给他调度，实现进程的并发</p>\n<p><strong>三种调度:高级调度(作业调度)、中级调度(内存调度)、低级调度(进程调度)</strong></p>\n<blockquote>\n<p>高级调度<br>是外存与内存之间的调度</p>\n</blockquote>\n<p>按一定的原则从外存上处于后备队列的作业中挑选一个或多个作业，分配内存等必要资源，建立进程</p>\n<blockquote>\n<p>中级调度<br>提高系统内存利用率、系统吞吐量</p>\n</blockquote>\n<p>决定将哪个处于挂起状态的进程重新调入内存，一个进程可能多次被调出、调入内存，<strong>发生频率高于高级调度</strong></p>\n<blockquote>\n<p>低级调度<br>最基本的一种调度</p>\n</blockquote>\n<p>按照某种策略或方法，从就绪队列中选取一个进程分配CPU时间，<strong>调用的频率很高</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/OS-12.png\" alt=\"OS-12\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"四、进程通信\"><a href=\"#四、进程通信\" class=\"headerlink\" title=\"四、进程通信\"></a>四、进程通信</h2><p>定义：进程之间的信息交换</p>\n<p><strong>进程是资源分配的最小单位</strong>，因此，各个进程的内存地址空间相互独立</p>\n<p>通常来说，为了保证安全，一个进程不能直接访问另一个的地址空间</p>\n<blockquote>\n<p>三种通信方式: 共享存储、 管道通信、消息传递</p>\n</blockquote>\n<h4 id=\"共享存储\"><a href=\"#共享存储\" class=\"headerlink\" title=\"共享存储\"></a>共享存储</h4><p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/OS-8.png\" alt=\"OS-8\"></p>\n<p>设置一个共享空间，进程间互斥的进行访问；</p>\n<p>分为：</p>\n<ol>\n<li><p>基于数据结构的共享存储，共享速度慢，限制多，低级通信</p>\n</li>\n<li><p>基于存储区的共享存储，内存中划分出存储区，数据形式、存储位置都由进程来控制，速度快，高级通信</p>\n</li>\n</ol>\n<h4 id=\"管道通信pipe\"><a href=\"#管道通信pipe\" class=\"headerlink\" title=\"管道通信pipe\"></a>管道通信pipe</h4><blockquote>\n<p>主要用于父子进程间通信</p>\n</blockquote>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/OS-9.png\" alt=\"OS-9\"></p>\n<p>“管道”指用于连接读写进程的共享文件，称为pipe文件（内存中开辟固定大小的缓冲区）</p>\n<figure class=\"highlight php\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">@Test</span><br><span class=\"line\"><span class=\"keyword\">public</span> <span class=\"keyword\">void</span> testPipe() throws IOException &#123;</span><br><span class=\"line\">    <span class=\"comment\">// 1、获取通道</span></span><br><span class=\"line\">    Pipe pipe = Pipe.open();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 2、获取sink管道，用来传送数据</span></span><br><span class=\"line\">    Pipe.SinkChannel sinkChannel = pipe.sink();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 3、申请一定大小的缓冲区</span></span><br><span class=\"line\">    ByteBuffer byteBuffer = ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\">    byteBuffer.put(<span class=\"string\">&quot;123232142345234&quot;</span>.getBytes());</span><br><span class=\"line\">    byteBuffer.flip();</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 4、sink发送数据</span></span><br><span class=\"line\">    sinkChannel.write(byteBuffer);</span><br><span class=\"line\"></span><br><span class=\"line\">    <span class=\"comment\">// 5、创建接收pipe数据的source管道</span></span><br><span class=\"line\">    Pipe.SourceChannel sourceChannel = pipe.source();</span><br><span class=\"line\">    <span class=\"comment\">// 6、接收数据，并保存到缓冲区中</span></span><br><span class=\"line\">    ByteBuffer byteBuffer2 = ByteBuffer.allocate(<span class=\"number\">1024</span>);</span><br><span class=\"line\">    byteBuffer2.flip();</span><br><span class=\"line\">    <span class=\"keyword\">int</span> length = sourceChannel.read(byteBuffer2);</span><br><span class=\"line\"></span><br><span class=\"line\">    System.out.println(<span class=\"keyword\">new</span> <span class=\"keyword\">String</span>(byteBuffer2.<span class=\"keyword\">array</span>(), <span class=\"number\">0</span>, length));</span><br><span class=\"line\"></span><br><span class=\"line\">    sourceChannel.close();</span><br><span class=\"line\">    sinkChannel.close();</span><br><span class=\"line\">&#125;</span><br></pre></td></tr></table></figure>\n\n<p><strong>注意：</strong></p>\n<ol>\n<li><p>半双工通信：某时间段内只能单向传输（进程互斥进行访问），若要实现双向通信，就设置两个管道</p>\n</li>\n<li><p>数据以字符流的形式写入管道</p>\n</li>\n<li><p>如果没有写满，就不允许读；同样，如果没读空，就不允许写</p>\n</li>\n<li><p>pipe写满时，write()系统调用被阻塞，等待读进程将数据取走后，管道变空，read()被阻塞</p>\n</li>\n</ol>\n<h4 id=\"消息传递\"><a href=\"#消息传递\" class=\"headerlink\" title=\"消息传递\"></a>消息传递</h4><p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/OS-10.png\" alt=\"OS-10\"></p>\n<p>数据交换以格式化消息Message为单位，通过OS的“发送/接收消息”的原语进行</p>\n<p><strong>消息 = 消息头 + 消息体</strong><br>（消息头：发送ID、接收ID、消息类型、长度）</p>\n<h2 id=\"五、多线程概念模型\"><a href=\"#五、多线程概念模型\" class=\"headerlink\" title=\"五、多线程概念模型\"></a>五、多线程概念模型</h2><p>引入线程的目的：提高并发度</p>\n<p>传统的进程是程序执行流的最小单位；有了多线程，线程就成了程序执行流的最小单位</p>\n<p><strong>进程是资源分配的最小单位，线程是调度的最小单位</strong></p>\n<ol>\n<li><p>进程间并发，需要切换进程的运行环境，开销大</p>\n</li>\n<li><p>线程间并发，若在同一进程内，不切换环境，开销小</p>\n</li>\n</ol>\n<h4 id=\"属性要点\"><a href=\"#属性要点\" class=\"headerlink\" title=\"属性要点\"></a>属性要点</h4><ol>\n<li><p>每个线程都由独立的ID、线程控制块TCB</p>\n</li>\n<li><p>线程几乎不拥有系统资源</p>\n</li>\n<li><p>同一进程的线程之间共享进程的资源</p>\n</li>\n</ol>\n<h4 id=\"实现方式\"><a href=\"#实现方式\" class=\"headerlink\" title=\"实现方式\"></a>实现方式</h4><p>用户级线程、内核级线程</p>\n<blockquote>\n<p>用户级线程——多对一模型<br>由应用程序通过线程池来管理实现。<strong>用户级线程中，线程切换可在用户态下完成</strong></p>\n</blockquote>\n<p>理解：<strong>从用户角度可以看到的线程</strong></p>\n<blockquote>\n<p>内核级线程——一对一模型<br>由操作系统完成该进程的管理。<strong>内核级线程中，线程切换需要在核心态下完成</strong></p>\n</blockquote>\n<p>理解：<strong>从OS内核视角看到的线程</strong></p>\n<blockquote>\n<p>二者组合<br>将n 个用户级线程映射到m个内核级线程（n &gt;= m）</p>\n</blockquote>\n<p>克服了多对一模型并发度不高的缺点，克服了一对一模型中每个用户进程占用太多资源的缺点</p>\n<p>通过下图进行小节下：</p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/OS-11.png\" alt=\"OS-11\"></p>\n<h2 id=\"六、CPU的调度\"><a href=\"#六、CPU的调度\" class=\"headerlink\" title=\"六、CPU的调度\"></a>六、CPU的调度</h2><p>从就绪队列中按照一定的算法选择一个进程并将CPU时间分配给他调度，实现进程的并发</p>\n<p><strong>三种调度:高级调度(作业调度)、中级调度(内存调度)、低级调度(进程调度)</strong></p>\n<blockquote>\n<p>高级调度<br>是外存与内存之间的调度</p>\n</blockquote>\n<p>按一定的原则从外存上处于后备队列的作业中挑选一个或多个作业，分配内存等必要资源，建立进程</p>\n<blockquote>\n<p>中级调度<br>提高系统内存利用率、系统吞吐量</p>\n</blockquote>\n<p>决定将哪个处于挂起状态的进程重新调入内存，一个进程可能多次被调出、调入内存，<strong>发生频率高于高级调度</strong></p>\n<blockquote>\n<p>低级调度<br>最基本的一种调度</p>\n</blockquote>\n<p>按照某种策略或方法，从就绪队列中选取一个进程分配CPU时间，<strong>调用的频率很高</strong></p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/OS-12.png\" alt=\"OS-12\"></p>\n"},{"layout":"post","title":"手握日月摘星辰，更藉浊酒祭风尘","date":"2019-12-01T12:00:00.000Z","cover":"http://csuzhang.info/photos/friend4.jpg","feature":true,"_content":"\n\n### ——2019不负盛世年华，2020拼命奋发有为\n\n\n\n\n\n\n今天是2019年12月1日，距离这一年的结束只剩下了最后一个月的韶光，回首2019年的所遇所为、所闻所感，有着颇深的感悟，也正巧受到山西天美集团张永芬姐姐的邀请，和来长沙团建的哥哥姐姐们一起吃了晚饭，刚刚结束了狼人杀局，睡不着觉之间突然开始思考，在酒店写下这一年时间的感悟。\n\n首先这一年的开端是个不良的开始。由于2018的残留感情问题，2019的前几个月仍然徘徊在分手的边缘，就是那种知道早晚会分还在苦苦坚持的状态，现在想想真的佩服当时傻傻的自己，过年都自己一个人大半夜喝着闷酒。\n\n直到3月多彻底分道扬镳才从那种状态中醒悟过来。这个其实还要感谢胡总，在那段感情挣扎的期间，每天帮我找各种项目做，各种实验室进，各种大佬一起蹭饭，使挣扎于感情无法脱身的我明白了自己想追求的是什么。也许那段时间是我这一年中最充实最踏实的时光。\n\n从一个个小的demo做起，画图板、五子棋、飞机大战、图像处理、美颜相机，再到后来的Hadoop、Kafka、Zookeeper、Linux0.11等等......不到2个月的时间里就实现了代码真正的入门，我觉得这才是蓝杰带给我的最有意义和价值的收获之一：学会学习写代码的能力。\n\n![蓝杰时光](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/friend4.jpg)\n\n然后2019中间那段时间，一部分时间是在实验室度过的，另外一段时间是在美国密苏里州哥伦比亚大学度过的。实验室从张校长的“英特尔透明计算实验室”到陈老师的“智能驾驶实验室”，学到了不少、看到了不少，算是部分体验到了做研究生的感觉；\n\n在暑研期间从北京飞到远在地球另一边的美利坚，在壮阔无垠的米国中部地区体验到别样的异国风情。这段经历极大的拓宽了视野范围，让我亲身感受到了去国外实验室做科研是一种怎样的体验，对我日后选择道路起到了非常重要的作用，也让我开始觉得每天闷在实验室搞研究不适合我。\n\n![Missouri University](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/missuri.jpg)\n\n![transparent computing lab](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/tcl.jpg)\n\n**感谢在此期间各位大佬学长/师兄们给予我的诸多指点，这里就不再一一列举。多亏了学长的开导，从最开始的畏畏缩缩畏首畏尾，到现在的不问三七二十一先干再说，我找到了属于自己的方向，明白了自己短期内未来想走的路。这段时间，使我蜕变了。**\n\n2019年走过了很多城市，造访了许多地区：太原、长沙、西安、北京、上海、广州、济南、杭州、昆明、香格里拉、西双版纳、大理、丽江、达拉斯、圣路易斯、哥伦比亚、堪萨斯城等城市；\n\n2019年参观过互联网公司，逛了很多大厂：百度、滴滴、微软、IBM、谷歌、网易、阿里巴巴、商汤、远大等众多互联网公司；\n\n![Microsoft](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/company1.jpg)\n\n![Microsoft Research](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/company5.jpg)\n\n![baidu](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/company4.jpg)\n\n![alibaba](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/company2.jpg)\n\n2019年结识到不少有趣的人，睁眼看了世界：青年创业者、大厂开发工程师、offer收割机、亿万富翁、环游世界者、热衷公益者、两院院士等；\n\n![GSF](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/friend1.jpg)\n\n![2050 guys](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/friend2.jpg)\n\n![yuanda company](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/friend3.jpg)\n\n![American even](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/friend5.jpg)\n\n![HackFun](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/friend6.jpg)\n\n2019年有过坎坷、有过挫折、有过徘徊、有过迷茫、有过悲恸欲绝、也有过“蓦然回首，那人却在灯火阑珊处”的欣喜。\n\n......\n\n![2050logo](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/friend7.jpg)\n\n2018后半年，我完全没有进入大学生活的状态，完完整整的活在高中的回忆中，算是搞对象荒废掉了半年的时间；2019前半年，我实现了完美的华丽转身，逆境中完成了阶段性逆袭，不仅找到了未来的路而且收获颇丰。即使成绩上并没有太大的建树，但没有荒废掉自己这段宝贵时光。\n\n![GSF certification](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/certifi.jpg)\n\n2019也是参加各种比赛的一年，刚进入大学的时候，想参加各种竞赛但苦于没有队友、没有路子，对各种情形都不了解，再加上自己的能力不足，所以对任何比赛都挺无感的。\n\n但2019一年，我经过前辈们的指点，利用一年时间参加了许许多多的各种比赛，在团队中担任的角色也在pm、dev、leader、speaker之间来回切换，对整体项目流程已经烂熟于心。下面简单列举下这一年时间参加过的比赛，不管结果如何，都是一段宝贵的经历：\n\n> + 2019年中国高校智能机器人创意大赛\n> + 2019年上半年中南大学智能互联大赛\n> + 2019年全国大学生创新创业大赛(到校赛)\n> + 2019年中国互联网+大学生创新创业大赛(到校赛)\n> + 2019年华中HackFun黑客马拉松\n> + 2019年清华大学GSF Innovation Accelerator创新孵化器(到决赛，3rd)\n> + Kaggle Competition 未来预测 & 泰坦尼克号预测\n> + 湖南省柳枝行动2019年9月(到终审)\n> + 京东5G应用设计创意大赛\n> + 2019年上海XdHack黑客马拉松\n> + 2019年湖南省大学生智能导航科技创新大赛(到省赛，3rd)\n> + 2019年全国大学生软件创新大赛(到国赛)\n\n到现在仍然在不停的充实完善自己，可以看下我的自我介绍就能知道啦：\n\n[About me](https://hanyuancheung.github.io/about/)\n\n虽然参加很多，但是失败占到了大多数，很少有能走到最后的项目，但是在这个过程中收获了很多，俗称“面向过程”的学习。跟着几个学长也搞过项目，大多数都是自己想出idea，然后组建team，完善创意文档，完成项目实现，现场陈述答辩，每个过程都给了我非常好的经历和体验。虽说少部分项目过程中难免有划水的嫌疑，但是凭良心问还是基本上尽到了自己的全力，也因此结交到不少志同道合的岳麓青年，大家聚首麓山脚下，凭江共饮，何其快哉！\n\n![蓝杰时光](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/friend4.jpg)\n\n2019也圆了高中时期的创业梦——自己开一家公司运营。于是，决定空余时间玩点和别人不一样的打法，和几个学长们一起合伙探索互联网人才服务领域的新模式，2018年底组建“这很江湖工作室”，2019年7月工作室成功升级成为“长沙派荐网络科技有限公司”.\n\n在伙伴们的信任下，我有幸担任了公司的法人代表，作为团队CTO积极开拓线上业务。到现在为止，已经成功服务梦洁、理诚、简聘等20+中小型公司，为500+学生提供了个人发展方向指点，拥有1000+忠实线上粉丝，这个创业过程更是让我获益匪浅。\n\n![my company](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/certifi2.jpg)\n\n9月开学初想找实习试试水，于是写简历、投简历、一面、二面、HR面，成功拿到了滴滴出行的offer，应该算是我们这边圈子内今年第一个拿到offer的大二学生；到后来快到年底差不多11月份左右，我准备正式找寒假实习，继续每天刷题面试，大约不到两周时间吧，成功拿到了商汤科技、京东等公司offer，实现了阶段性小目标。\n\n![SenseTime](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/shangtang.png)\n\n![DiDi](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/didi.jpg)\n\n最后自己总结这一年的时光，微醉中写下了内心的感悟：**手握日月摘星辰，更藉浊酒祭风尘**。\n\n![2020 Best wishes](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/horizon2020.jpg)\n\n希望自己不负青春、不负韶华，以梦为马、奋发有为！祝愿即将到来的2020年一切顺利，能得到想得到的一切，收获该收获的喜悦！\n","source":"_posts/2019-12-1-2019Summary.md","raw":"---\nlayout: post\ntitle:  \"手握日月摘星辰，更藉浊酒祭风尘\"\ndate: 2019-12-1 20:00:00\ncategories: thinking\ntags: thinking\ncover: >-\n  http://csuzhang.info/photos/friend4.jpg\nfeature: true\n---\n\n\n### ——2019不负盛世年华，2020拼命奋发有为\n\n\n\n\n\n\n今天是2019年12月1日，距离这一年的结束只剩下了最后一个月的韶光，回首2019年的所遇所为、所闻所感，有着颇深的感悟，也正巧受到山西天美集团张永芬姐姐的邀请，和来长沙团建的哥哥姐姐们一起吃了晚饭，刚刚结束了狼人杀局，睡不着觉之间突然开始思考，在酒店写下这一年时间的感悟。\n\n首先这一年的开端是个不良的开始。由于2018的残留感情问题，2019的前几个月仍然徘徊在分手的边缘，就是那种知道早晚会分还在苦苦坚持的状态，现在想想真的佩服当时傻傻的自己，过年都自己一个人大半夜喝着闷酒。\n\n直到3月多彻底分道扬镳才从那种状态中醒悟过来。这个其实还要感谢胡总，在那段感情挣扎的期间，每天帮我找各种项目做，各种实验室进，各种大佬一起蹭饭，使挣扎于感情无法脱身的我明白了自己想追求的是什么。也许那段时间是我这一年中最充实最踏实的时光。\n\n从一个个小的demo做起，画图板、五子棋、飞机大战、图像处理、美颜相机，再到后来的Hadoop、Kafka、Zookeeper、Linux0.11等等......不到2个月的时间里就实现了代码真正的入门，我觉得这才是蓝杰带给我的最有意义和价值的收获之一：学会学习写代码的能力。\n\n![蓝杰时光](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/friend4.jpg)\n\n然后2019中间那段时间，一部分时间是在实验室度过的，另外一段时间是在美国密苏里州哥伦比亚大学度过的。实验室从张校长的“英特尔透明计算实验室”到陈老师的“智能驾驶实验室”，学到了不少、看到了不少，算是部分体验到了做研究生的感觉；\n\n在暑研期间从北京飞到远在地球另一边的美利坚，在壮阔无垠的米国中部地区体验到别样的异国风情。这段经历极大的拓宽了视野范围，让我亲身感受到了去国外实验室做科研是一种怎样的体验，对我日后选择道路起到了非常重要的作用，也让我开始觉得每天闷在实验室搞研究不适合我。\n\n![Missouri University](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/missuri.jpg)\n\n![transparent computing lab](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/tcl.jpg)\n\n**感谢在此期间各位大佬学长/师兄们给予我的诸多指点，这里就不再一一列举。多亏了学长的开导，从最开始的畏畏缩缩畏首畏尾，到现在的不问三七二十一先干再说，我找到了属于自己的方向，明白了自己短期内未来想走的路。这段时间，使我蜕变了。**\n\n2019年走过了很多城市，造访了许多地区：太原、长沙、西安、北京、上海、广州、济南、杭州、昆明、香格里拉、西双版纳、大理、丽江、达拉斯、圣路易斯、哥伦比亚、堪萨斯城等城市；\n\n2019年参观过互联网公司，逛了很多大厂：百度、滴滴、微软、IBM、谷歌、网易、阿里巴巴、商汤、远大等众多互联网公司；\n\n![Microsoft](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/company1.jpg)\n\n![Microsoft Research](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/company5.jpg)\n\n![baidu](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/company4.jpg)\n\n![alibaba](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/company2.jpg)\n\n2019年结识到不少有趣的人，睁眼看了世界：青年创业者、大厂开发工程师、offer收割机、亿万富翁、环游世界者、热衷公益者、两院院士等；\n\n![GSF](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/friend1.jpg)\n\n![2050 guys](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/friend2.jpg)\n\n![yuanda company](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/friend3.jpg)\n\n![American even](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/friend5.jpg)\n\n![HackFun](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/friend6.jpg)\n\n2019年有过坎坷、有过挫折、有过徘徊、有过迷茫、有过悲恸欲绝、也有过“蓦然回首，那人却在灯火阑珊处”的欣喜。\n\n......\n\n![2050logo](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/friend7.jpg)\n\n2018后半年，我完全没有进入大学生活的状态，完完整整的活在高中的回忆中，算是搞对象荒废掉了半年的时间；2019前半年，我实现了完美的华丽转身，逆境中完成了阶段性逆袭，不仅找到了未来的路而且收获颇丰。即使成绩上并没有太大的建树，但没有荒废掉自己这段宝贵时光。\n\n![GSF certification](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/certifi.jpg)\n\n2019也是参加各种比赛的一年，刚进入大学的时候，想参加各种竞赛但苦于没有队友、没有路子，对各种情形都不了解，再加上自己的能力不足，所以对任何比赛都挺无感的。\n\n但2019一年，我经过前辈们的指点，利用一年时间参加了许许多多的各种比赛，在团队中担任的角色也在pm、dev、leader、speaker之间来回切换，对整体项目流程已经烂熟于心。下面简单列举下这一年时间参加过的比赛，不管结果如何，都是一段宝贵的经历：\n\n> + 2019年中国高校智能机器人创意大赛\n> + 2019年上半年中南大学智能互联大赛\n> + 2019年全国大学生创新创业大赛(到校赛)\n> + 2019年中国互联网+大学生创新创业大赛(到校赛)\n> + 2019年华中HackFun黑客马拉松\n> + 2019年清华大学GSF Innovation Accelerator创新孵化器(到决赛，3rd)\n> + Kaggle Competition 未来预测 & 泰坦尼克号预测\n> + 湖南省柳枝行动2019年9月(到终审)\n> + 京东5G应用设计创意大赛\n> + 2019年上海XdHack黑客马拉松\n> + 2019年湖南省大学生智能导航科技创新大赛(到省赛，3rd)\n> + 2019年全国大学生软件创新大赛(到国赛)\n\n到现在仍然在不停的充实完善自己，可以看下我的自我介绍就能知道啦：\n\n[About me](https://hanyuancheung.github.io/about/)\n\n虽然参加很多，但是失败占到了大多数，很少有能走到最后的项目，但是在这个过程中收获了很多，俗称“面向过程”的学习。跟着几个学长也搞过项目，大多数都是自己想出idea，然后组建team，完善创意文档，完成项目实现，现场陈述答辩，每个过程都给了我非常好的经历和体验。虽说少部分项目过程中难免有划水的嫌疑，但是凭良心问还是基本上尽到了自己的全力，也因此结交到不少志同道合的岳麓青年，大家聚首麓山脚下，凭江共饮，何其快哉！\n\n![蓝杰时光](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/friend4.jpg)\n\n2019也圆了高中时期的创业梦——自己开一家公司运营。于是，决定空余时间玩点和别人不一样的打法，和几个学长们一起合伙探索互联网人才服务领域的新模式，2018年底组建“这很江湖工作室”，2019年7月工作室成功升级成为“长沙派荐网络科技有限公司”.\n\n在伙伴们的信任下，我有幸担任了公司的法人代表，作为团队CTO积极开拓线上业务。到现在为止，已经成功服务梦洁、理诚、简聘等20+中小型公司，为500+学生提供了个人发展方向指点，拥有1000+忠实线上粉丝，这个创业过程更是让我获益匪浅。\n\n![my company](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/certifi2.jpg)\n\n9月开学初想找实习试试水，于是写简历、投简历、一面、二面、HR面，成功拿到了滴滴出行的offer，应该算是我们这边圈子内今年第一个拿到offer的大二学生；到后来快到年底差不多11月份左右，我准备正式找寒假实习，继续每天刷题面试，大约不到两周时间吧，成功拿到了商汤科技、京东等公司offer，实现了阶段性小目标。\n\n![SenseTime](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/shangtang.png)\n\n![DiDi](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/didi.jpg)\n\n最后自己总结这一年的时光，微醉中写下了内心的感悟：**手握日月摘星辰，更藉浊酒祭风尘**。\n\n![2020 Best wishes](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/horizon2020.jpg)\n\n希望自己不负青春、不负韶华，以梦为马、奋发有为！祝愿即将到来的2020年一切顺利，能得到想得到的一切，收获该收获的喜悦！\n","slug":"2019-12-1-2019Summary","published":1,"updated":"2022-01-08T17:43:20.471Z","_id":"cky61ey46000faqoxd0725i6x","comments":1,"photos":[],"link":"","content":"<h3 id=\"——2019不负盛世年华，2020拼命奋发有为\"><a href=\"#——2019不负盛世年华，2020拼命奋发有为\" class=\"headerlink\" title=\"——2019不负盛世年华，2020拼命奋发有为\"></a>——2019不负盛世年华，2020拼命奋发有为</h3><p>今天是2019年12月1日，距离这一年的结束只剩下了最后一个月的韶光，回首2019年的所遇所为、所闻所感，有着颇深的感悟，也正巧受到山西天美集团张永芬姐姐的邀请，和来长沙团建的哥哥姐姐们一起吃了晚饭，刚刚结束了狼人杀局，睡不着觉之间突然开始思考，在酒店写下这一年时间的感悟。</p>\n<p>首先这一年的开端是个不良的开始。由于2018的残留感情问题，2019的前几个月仍然徘徊在分手的边缘，就是那种知道早晚会分还在苦苦坚持的状态，现在想想真的佩服当时傻傻的自己，过年都自己一个人大半夜喝着闷酒。</p>\n<p>直到3月多彻底分道扬镳才从那种状态中醒悟过来。这个其实还要感谢胡总，在那段感情挣扎的期间，每天帮我找各种项目做，各种实验室进，各种大佬一起蹭饭，使挣扎于感情无法脱身的我明白了自己想追求的是什么。也许那段时间是我这一年中最充实最踏实的时光。</p>\n<p>从一个个小的demo做起，画图板、五子棋、飞机大战、图像处理、美颜相机，再到后来的Hadoop、Kafka、Zookeeper、Linux0.11等等……不到2个月的时间里就实现了代码真正的入门，我觉得这才是蓝杰带给我的最有意义和价值的收获之一：学会学习写代码的能力。</p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/friend4.jpg\" alt=\"蓝杰时光\"></p>\n<p>然后2019中间那段时间，一部分时间是在实验室度过的，另外一段时间是在美国密苏里州哥伦比亚大学度过的。实验室从张校长的“英特尔透明计算实验室”到陈老师的“智能驾驶实验室”，学到了不少、看到了不少，算是部分体验到了做研究生的感觉；</p>\n<p>在暑研期间从北京飞到远在地球另一边的美利坚，在壮阔无垠的米国中部地区体验到别样的异国风情。这段经历极大的拓宽了视野范围，让我亲身感受到了去国外实验室做科研是一种怎样的体验，对我日后选择道路起到了非常重要的作用，也让我开始觉得每天闷在实验室搞研究不适合我。</p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/missuri.jpg\" alt=\"Missouri University\"></p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/tcl.jpg\" alt=\"transparent computing lab\"></p>\n<p><strong>感谢在此期间各位大佬学长/师兄们给予我的诸多指点，这里就不再一一列举。多亏了学长的开导，从最开始的畏畏缩缩畏首畏尾，到现在的不问三七二十一先干再说，我找到了属于自己的方向，明白了自己短期内未来想走的路。这段时间，使我蜕变了。</strong></p>\n<p>2019年走过了很多城市，造访了许多地区：太原、长沙、西安、北京、上海、广州、济南、杭州、昆明、香格里拉、西双版纳、大理、丽江、达拉斯、圣路易斯、哥伦比亚、堪萨斯城等城市；</p>\n<p>2019年参观过互联网公司，逛了很多大厂：百度、滴滴、微软、IBM、谷歌、网易、阿里巴巴、商汤、远大等众多互联网公司；</p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/company1.jpg\" alt=\"Microsoft\"></p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/company5.jpg\" alt=\"Microsoft Research\"></p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/company4.jpg\" alt=\"baidu\"></p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/company2.jpg\" alt=\"alibaba\"></p>\n<p>2019年结识到不少有趣的人，睁眼看了世界：青年创业者、大厂开发工程师、offer收割机、亿万富翁、环游世界者、热衷公益者、两院院士等；</p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/friend1.jpg\" alt=\"GSF\"></p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/friend2.jpg\" alt=\"2050 guys\"></p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/friend3.jpg\" alt=\"yuanda company\"></p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/friend5.jpg\" alt=\"American even\"></p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/friend6.jpg\" alt=\"HackFun\"></p>\n<p>2019年有过坎坷、有过挫折、有过徘徊、有过迷茫、有过悲恸欲绝、也有过“蓦然回首，那人却在灯火阑珊处”的欣喜。</p>\n<p>……</p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/friend7.jpg\" alt=\"2050logo\"></p>\n<p>2018后半年，我完全没有进入大学生活的状态，完完整整的活在高中的回忆中，算是搞对象荒废掉了半年的时间；2019前半年，我实现了完美的华丽转身，逆境中完成了阶段性逆袭，不仅找到了未来的路而且收获颇丰。即使成绩上并没有太大的建树，但没有荒废掉自己这段宝贵时光。</p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/certifi.jpg\" alt=\"GSF certification\"></p>\n<p>2019也是参加各种比赛的一年，刚进入大学的时候，想参加各种竞赛但苦于没有队友、没有路子，对各种情形都不了解，再加上自己的能力不足，所以对任何比赛都挺无感的。</p>\n<p>但2019一年，我经过前辈们的指点，利用一年时间参加了许许多多的各种比赛，在团队中担任的角色也在pm、dev、leader、speaker之间来回切换，对整体项目流程已经烂熟于心。下面简单列举下这一年时间参加过的比赛，不管结果如何，都是一段宝贵的经历：</p>\n<blockquote>\n<ul>\n<li>2019年中国高校智能机器人创意大赛</li>\n<li>2019年上半年中南大学智能互联大赛</li>\n<li>2019年全国大学生创新创业大赛(到校赛)</li>\n<li>2019年中国互联网+大学生创新创业大赛(到校赛)</li>\n<li>2019年华中HackFun黑客马拉松</li>\n<li>2019年清华大学GSF Innovation Accelerator创新孵化器(到决赛，3rd)</li>\n<li>Kaggle Competition 未来预测 &amp; 泰坦尼克号预测</li>\n<li>湖南省柳枝行动2019年9月(到终审)</li>\n<li>京东5G应用设计创意大赛</li>\n<li>2019年上海XdHack黑客马拉松</li>\n<li>2019年湖南省大学生智能导航科技创新大赛(到省赛，3rd)</li>\n<li>2019年全国大学生软件创新大赛(到国赛)</li>\n</ul>\n</blockquote>\n<p>到现在仍然在不停的充实完善自己，可以看下我的自我介绍就能知道啦：</p>\n<p><a href=\"https://hanyuancheung.github.io/about/\">About me</a></p>\n<p>虽然参加很多，但是失败占到了大多数，很少有能走到最后的项目，但是在这个过程中收获了很多，俗称“面向过程”的学习。跟着几个学长也搞过项目，大多数都是自己想出idea，然后组建team，完善创意文档，完成项目实现，现场陈述答辩，每个过程都给了我非常好的经历和体验。虽说少部分项目过程中难免有划水的嫌疑，但是凭良心问还是基本上尽到了自己的全力，也因此结交到不少志同道合的岳麓青年，大家聚首麓山脚下，凭江共饮，何其快哉！</p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/friend4.jpg\" alt=\"蓝杰时光\"></p>\n<p>2019也圆了高中时期的创业梦——自己开一家公司运营。于是，决定空余时间玩点和别人不一样的打法，和几个学长们一起合伙探索互联网人才服务领域的新模式，2018年底组建“这很江湖工作室”，2019年7月工作室成功升级成为“长沙派荐网络科技有限公司”.</p>\n<p>在伙伴们的信任下，我有幸担任了公司的法人代表，作为团队CTO积极开拓线上业务。到现在为止，已经成功服务梦洁、理诚、简聘等20+中小型公司，为500+学生提供了个人发展方向指点，拥有1000+忠实线上粉丝，这个创业过程更是让我获益匪浅。</p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/certifi2.jpg\" alt=\"my company\"></p>\n<p>9月开学初想找实习试试水，于是写简历、投简历、一面、二面、HR面，成功拿到了滴滴出行的offer，应该算是我们这边圈子内今年第一个拿到offer的大二学生；到后来快到年底差不多11月份左右，我准备正式找寒假实习，继续每天刷题面试，大约不到两周时间吧，成功拿到了商汤科技、京东等公司offer，实现了阶段性小目标。</p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/shangtang.png\" alt=\"SenseTime\"></p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/didi.jpg\" alt=\"DiDi\"></p>\n<p>最后自己总结这一年的时光，微醉中写下了内心的感悟：<strong>手握日月摘星辰，更藉浊酒祭风尘</strong>。</p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/horizon2020.jpg\" alt=\"2020 Best wishes\"></p>\n<p>希望自己不负青春、不负韶华，以梦为马、奋发有为！祝愿即将到来的2020年一切顺利，能得到想得到的一切，收获该收获的喜悦！</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"——2019不负盛世年华，2020拼命奋发有为\"><a href=\"#——2019不负盛世年华，2020拼命奋发有为\" class=\"headerlink\" title=\"——2019不负盛世年华，2020拼命奋发有为\"></a>——2019不负盛世年华，2020拼命奋发有为</h3><p>今天是2019年12月1日，距离这一年的结束只剩下了最后一个月的韶光，回首2019年的所遇所为、所闻所感，有着颇深的感悟，也正巧受到山西天美集团张永芬姐姐的邀请，和来长沙团建的哥哥姐姐们一起吃了晚饭，刚刚结束了狼人杀局，睡不着觉之间突然开始思考，在酒店写下这一年时间的感悟。</p>\n<p>首先这一年的开端是个不良的开始。由于2018的残留感情问题，2019的前几个月仍然徘徊在分手的边缘，就是那种知道早晚会分还在苦苦坚持的状态，现在想想真的佩服当时傻傻的自己，过年都自己一个人大半夜喝着闷酒。</p>\n<p>直到3月多彻底分道扬镳才从那种状态中醒悟过来。这个其实还要感谢胡总，在那段感情挣扎的期间，每天帮我找各种项目做，各种实验室进，各种大佬一起蹭饭，使挣扎于感情无法脱身的我明白了自己想追求的是什么。也许那段时间是我这一年中最充实最踏实的时光。</p>\n<p>从一个个小的demo做起，画图板、五子棋、飞机大战、图像处理、美颜相机，再到后来的Hadoop、Kafka、Zookeeper、Linux0.11等等……不到2个月的时间里就实现了代码真正的入门，我觉得这才是蓝杰带给我的最有意义和价值的收获之一：学会学习写代码的能力。</p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/friend4.jpg\" alt=\"蓝杰时光\"></p>\n<p>然后2019中间那段时间，一部分时间是在实验室度过的，另外一段时间是在美国密苏里州哥伦比亚大学度过的。实验室从张校长的“英特尔透明计算实验室”到陈老师的“智能驾驶实验室”，学到了不少、看到了不少，算是部分体验到了做研究生的感觉；</p>\n<p>在暑研期间从北京飞到远在地球另一边的美利坚，在壮阔无垠的米国中部地区体验到别样的异国风情。这段经历极大的拓宽了视野范围，让我亲身感受到了去国外实验室做科研是一种怎样的体验，对我日后选择道路起到了非常重要的作用，也让我开始觉得每天闷在实验室搞研究不适合我。</p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/missuri.jpg\" alt=\"Missouri University\"></p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/tcl.jpg\" alt=\"transparent computing lab\"></p>\n<p><strong>感谢在此期间各位大佬学长/师兄们给予我的诸多指点，这里就不再一一列举。多亏了学长的开导，从最开始的畏畏缩缩畏首畏尾，到现在的不问三七二十一先干再说，我找到了属于自己的方向，明白了自己短期内未来想走的路。这段时间，使我蜕变了。</strong></p>\n<p>2019年走过了很多城市，造访了许多地区：太原、长沙、西安、北京、上海、广州、济南、杭州、昆明、香格里拉、西双版纳、大理、丽江、达拉斯、圣路易斯、哥伦比亚、堪萨斯城等城市；</p>\n<p>2019年参观过互联网公司，逛了很多大厂：百度、滴滴、微软、IBM、谷歌、网易、阿里巴巴、商汤、远大等众多互联网公司；</p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/company1.jpg\" alt=\"Microsoft\"></p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/company5.jpg\" alt=\"Microsoft Research\"></p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/company4.jpg\" alt=\"baidu\"></p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/company2.jpg\" alt=\"alibaba\"></p>\n<p>2019年结识到不少有趣的人，睁眼看了世界：青年创业者、大厂开发工程师、offer收割机、亿万富翁、环游世界者、热衷公益者、两院院士等；</p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/friend1.jpg\" alt=\"GSF\"></p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/friend2.jpg\" alt=\"2050 guys\"></p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/friend3.jpg\" alt=\"yuanda company\"></p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/friend5.jpg\" alt=\"American even\"></p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/friend6.jpg\" alt=\"HackFun\"></p>\n<p>2019年有过坎坷、有过挫折、有过徘徊、有过迷茫、有过悲恸欲绝、也有过“蓦然回首，那人却在灯火阑珊处”的欣喜。</p>\n<p>……</p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/friend7.jpg\" alt=\"2050logo\"></p>\n<p>2018后半年，我完全没有进入大学生活的状态，完完整整的活在高中的回忆中，算是搞对象荒废掉了半年的时间；2019前半年，我实现了完美的华丽转身，逆境中完成了阶段性逆袭，不仅找到了未来的路而且收获颇丰。即使成绩上并没有太大的建树，但没有荒废掉自己这段宝贵时光。</p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/certifi.jpg\" alt=\"GSF certification\"></p>\n<p>2019也是参加各种比赛的一年，刚进入大学的时候，想参加各种竞赛但苦于没有队友、没有路子，对各种情形都不了解，再加上自己的能力不足，所以对任何比赛都挺无感的。</p>\n<p>但2019一年，我经过前辈们的指点，利用一年时间参加了许许多多的各种比赛，在团队中担任的角色也在pm、dev、leader、speaker之间来回切换，对整体项目流程已经烂熟于心。下面简单列举下这一年时间参加过的比赛，不管结果如何，都是一段宝贵的经历：</p>\n<blockquote>\n<ul>\n<li>2019年中国高校智能机器人创意大赛</li>\n<li>2019年上半年中南大学智能互联大赛</li>\n<li>2019年全国大学生创新创业大赛(到校赛)</li>\n<li>2019年中国互联网+大学生创新创业大赛(到校赛)</li>\n<li>2019年华中HackFun黑客马拉松</li>\n<li>2019年清华大学GSF Innovation Accelerator创新孵化器(到决赛，3rd)</li>\n<li>Kaggle Competition 未来预测 &amp; 泰坦尼克号预测</li>\n<li>湖南省柳枝行动2019年9月(到终审)</li>\n<li>京东5G应用设计创意大赛</li>\n<li>2019年上海XdHack黑客马拉松</li>\n<li>2019年湖南省大学生智能导航科技创新大赛(到省赛，3rd)</li>\n<li>2019年全国大学生软件创新大赛(到国赛)</li>\n</ul>\n</blockquote>\n<p>到现在仍然在不停的充实完善自己，可以看下我的自我介绍就能知道啦：</p>\n<p><a href=\"https://hanyuancheung.github.io/about/\">About me</a></p>\n<p>虽然参加很多，但是失败占到了大多数，很少有能走到最后的项目，但是在这个过程中收获了很多，俗称“面向过程”的学习。跟着几个学长也搞过项目，大多数都是自己想出idea，然后组建team，完善创意文档，完成项目实现，现场陈述答辩，每个过程都给了我非常好的经历和体验。虽说少部分项目过程中难免有划水的嫌疑，但是凭良心问还是基本上尽到了自己的全力，也因此结交到不少志同道合的岳麓青年，大家聚首麓山脚下，凭江共饮，何其快哉！</p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/friend4.jpg\" alt=\"蓝杰时光\"></p>\n<p>2019也圆了高中时期的创业梦——自己开一家公司运营。于是，决定空余时间玩点和别人不一样的打法，和几个学长们一起合伙探索互联网人才服务领域的新模式，2018年底组建“这很江湖工作室”，2019年7月工作室成功升级成为“长沙派荐网络科技有限公司”.</p>\n<p>在伙伴们的信任下，我有幸担任了公司的法人代表，作为团队CTO积极开拓线上业务。到现在为止，已经成功服务梦洁、理诚、简聘等20+中小型公司，为500+学生提供了个人发展方向指点，拥有1000+忠实线上粉丝，这个创业过程更是让我获益匪浅。</p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/certifi2.jpg\" alt=\"my company\"></p>\n<p>9月开学初想找实习试试水，于是写简历、投简历、一面、二面、HR面，成功拿到了滴滴出行的offer，应该算是我们这边圈子内今年第一个拿到offer的大二学生；到后来快到年底差不多11月份左右，我准备正式找寒假实习，继续每天刷题面试，大约不到两周时间吧，成功拿到了商汤科技、京东等公司offer，实现了阶段性小目标。</p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/shangtang.png\" alt=\"SenseTime\"></p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/didi.jpg\" alt=\"DiDi\"></p>\n<p>最后自己总结这一年的时光，微醉中写下了内心的感悟：<strong>手握日月摘星辰，更藉浊酒祭风尘</strong>。</p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/horizon2020.jpg\" alt=\"2020 Best wishes\"></p>\n<p>希望自己不负青春、不负韶华，以梦为马、奋发有为！祝愿即将到来的2020年一切顺利，能得到想得到的一切，收获该收获的喜悦！</p>\n"},{"layout":"post","title":"6.828 ZhyOS在macOS下的环境配置-2020","date":"2020-04-04T10:00:00.000Z","_content":"\n\n\n## 6.828 ZhyOS在macOS下的环境配置-2020\n\n> 本文主要介绍如何在macOS下配置mit 6.828 JOS的实验环境\n\n​    实习期做过一些业务之后，最直观的感受是做业务相对来说比较繁琐，每天疲于完成分配的需求，对个人成长来说不是特别大。和翔少一波交流后，还是想回归学校，利用余下不多的时间多打打基础，考虑抓抓基础以后往infrastructure方向发展。\n\n​    在进行JOS之前，在网上搜索关于JOS的开发环境，基本都是关于在ubuntu下的配置教程，很多博客和文章都提到*“不是32位linux就不好配置，会浪费大量时间在配置环境”*上之类的言论。奈何为囊中羞涩所困，在连续开了几个centOS后，本人OS X没有过多的存储资源可以使用，加上实在无法忍受开VMware恐怖的耗电量和发热量，尝试将开发环境移到`macOS`下。\n\n​    起初按照刘学长博客进行配置，但是出现一堆读不懂的error；简单碰壁后发现其实无比简单，在这里放上我的配置教程，过程非常简单可操作，希望能帮助到更多的coder完成这个项目。\n\n\n\n\n\n\n\n\n\n### 1. Tools we need\n\n配置环境之前，有两个工具是必须要进行配置的：\n\n+ Homebrew\n\n+ Macports\n\n  建议大家直接Google，按照官网公开的方法进行配置即可～(需要在管理员模式下进行，否则会遇到很多Permission Denied的报错，通常难以解决，本菜🐔也被困扰很久)\n\n  \n\n### 2. 运行JOS demo\n\n+ QEMU\n\n  在Homebrew工具下，直接利用brew即可安装i386-jos-elf-gcc和i386-jos-elf-gdb\n\n```\nbrew tap liudangyi/i386-jos-elf-gcc //添加第三方库\nbrew install i386-jos-elf-gcc i386-jos-elf-gdb\n```\n\n\n\n+ 官网克隆源码\n\n  从mit课程官网得到6.828的git地址，发现从2018年后就未更新，所以我们用2018的代码实现\n\n```\nmkdir ~/6.828\ncd 6.828\ngit clone https://pdos.csail.mit.edu/6.828/2018/jos.git lab\n```\n\n\n\n+ make jos的boot loader和kernel\n\n```\ncd ./lab\nmake\n```\n\n\n\n+ 成功后及显示\n\n```\n+ as kern/entry.S\n+ cc kern/entrypgdir.c\n+ cc kern/init.c\n+ cc kern/console.c\n+ cc kern/monitor.c\n+ cc kern/printf.c\n+ cc kern/kdebug.c\n+ cc lib/printfmt.c\n+ cc lib/readline.c\n+ cc lib/string.c\n+ ld obj/kern/kernel\ni386-jos-elf-ld: warning: section `.bss' type changed to PROGBITS\n+ as boot/boot.S\n+ cc -Os boot/main.c\n+ ld boot/boot\nboot block is 382 bytes (max 510)\n+ mk obj/kern/kernel.img\n```\n\n\n\n+ 启动JOS qemu\n\n```\nmake qemu\n```\n\n此时即可成功启动JOS，enjoy～\n\n\n\n### 3. 持续关注\n\n​    正值疫情老虎徘徊，再加上工作需求和学业压力，今天先完成了相关环境的配置，后续会继续进行OS的开发和学习，计划在一个月内完成这6个Lab，自己学习的过程中也帮助大家踩踩坑，祝大家都能早日拿到心仪的offer～\n\n","source":"_posts/2020-04-4-JOS.md","raw":"---\nlayout: post\ntitle:  \"6.828 ZhyOS在macOS下的环境配置-2020\"\ndate: 2020-4-4 18:00:00\ncategories: OS\ntags: OS\n---\n\n\n\n## 6.828 ZhyOS在macOS下的环境配置-2020\n\n> 本文主要介绍如何在macOS下配置mit 6.828 JOS的实验环境\n\n​    实习期做过一些业务之后，最直观的感受是做业务相对来说比较繁琐，每天疲于完成分配的需求，对个人成长来说不是特别大。和翔少一波交流后，还是想回归学校，利用余下不多的时间多打打基础，考虑抓抓基础以后往infrastructure方向发展。\n\n​    在进行JOS之前，在网上搜索关于JOS的开发环境，基本都是关于在ubuntu下的配置教程，很多博客和文章都提到*“不是32位linux就不好配置，会浪费大量时间在配置环境”*上之类的言论。奈何为囊中羞涩所困，在连续开了几个centOS后，本人OS X没有过多的存储资源可以使用，加上实在无法忍受开VMware恐怖的耗电量和发热量，尝试将开发环境移到`macOS`下。\n\n​    起初按照刘学长博客进行配置，但是出现一堆读不懂的error；简单碰壁后发现其实无比简单，在这里放上我的配置教程，过程非常简单可操作，希望能帮助到更多的coder完成这个项目。\n\n\n\n\n\n\n\n\n\n### 1. Tools we need\n\n配置环境之前，有两个工具是必须要进行配置的：\n\n+ Homebrew\n\n+ Macports\n\n  建议大家直接Google，按照官网公开的方法进行配置即可～(需要在管理员模式下进行，否则会遇到很多Permission Denied的报错，通常难以解决，本菜🐔也被困扰很久)\n\n  \n\n### 2. 运行JOS demo\n\n+ QEMU\n\n  在Homebrew工具下，直接利用brew即可安装i386-jos-elf-gcc和i386-jos-elf-gdb\n\n```\nbrew tap liudangyi/i386-jos-elf-gcc //添加第三方库\nbrew install i386-jos-elf-gcc i386-jos-elf-gdb\n```\n\n\n\n+ 官网克隆源码\n\n  从mit课程官网得到6.828的git地址，发现从2018年后就未更新，所以我们用2018的代码实现\n\n```\nmkdir ~/6.828\ncd 6.828\ngit clone https://pdos.csail.mit.edu/6.828/2018/jos.git lab\n```\n\n\n\n+ make jos的boot loader和kernel\n\n```\ncd ./lab\nmake\n```\n\n\n\n+ 成功后及显示\n\n```\n+ as kern/entry.S\n+ cc kern/entrypgdir.c\n+ cc kern/init.c\n+ cc kern/console.c\n+ cc kern/monitor.c\n+ cc kern/printf.c\n+ cc kern/kdebug.c\n+ cc lib/printfmt.c\n+ cc lib/readline.c\n+ cc lib/string.c\n+ ld obj/kern/kernel\ni386-jos-elf-ld: warning: section `.bss' type changed to PROGBITS\n+ as boot/boot.S\n+ cc -Os boot/main.c\n+ ld boot/boot\nboot block is 382 bytes (max 510)\n+ mk obj/kern/kernel.img\n```\n\n\n\n+ 启动JOS qemu\n\n```\nmake qemu\n```\n\n此时即可成功启动JOS，enjoy～\n\n\n\n### 3. 持续关注\n\n​    正值疫情老虎徘徊，再加上工作需求和学业压力，今天先完成了相关环境的配置，后续会继续进行OS的开发和学习，计划在一个月内完成这6个Lab，自己学习的过程中也帮助大家踩踩坑，祝大家都能早日拿到心仪的offer～\n\n","slug":"2020-04-4-JOS","published":1,"updated":"2022-01-08T16:23:49.354Z","_id":"cky61ey49000jaqox8njsamu6","comments":1,"photos":[],"link":"","content":"<h2 id=\"6-828-ZhyOS在macOS下的环境配置-2020\"><a href=\"#6-828-ZhyOS在macOS下的环境配置-2020\" class=\"headerlink\" title=\"6.828 ZhyOS在macOS下的环境配置-2020\"></a>6.828 ZhyOS在macOS下的环境配置-2020</h2><blockquote>\n<p>本文主要介绍如何在macOS下配置mit 6.828 JOS的实验环境</p>\n</blockquote>\n<p>​    实习期做过一些业务之后，最直观的感受是做业务相对来说比较繁琐，每天疲于完成分配的需求，对个人成长来说不是特别大。和翔少一波交流后，还是想回归学校，利用余下不多的时间多打打基础，考虑抓抓基础以后往infrastructure方向发展。</p>\n<p>​    在进行JOS之前，在网上搜索关于JOS的开发环境，基本都是关于在ubuntu下的配置教程，很多博客和文章都提到<em>“不是32位linux就不好配置，会浪费大量时间在配置环境”</em>上之类的言论。奈何为囊中羞涩所困，在连续开了几个centOS后，本人OS X没有过多的存储资源可以使用，加上实在无法忍受开VMware恐怖的耗电量和发热量，尝试将开发环境移到<code>macOS</code>下。</p>\n<p>​    起初按照刘学长博客进行配置，但是出现一堆读不懂的error；简单碰壁后发现其实无比简单，在这里放上我的配置教程，过程非常简单可操作，希望能帮助到更多的coder完成这个项目。</p>\n<h3 id=\"1-Tools-we-need\"><a href=\"#1-Tools-we-need\" class=\"headerlink\" title=\"1. Tools we need\"></a>1. Tools we need</h3><p>配置环境之前，有两个工具是必须要进行配置的：</p>\n<ul>\n<li><p>Homebrew</p>\n</li>\n<li><p>Macports</p>\n<p>建议大家直接Google，按照官网公开的方法进行配置即可～(需要在管理员模式下进行，否则会遇到很多Permission Denied的报错，通常难以解决，本菜🐔也被困扰很久)</p>\n</li>\n</ul>\n<h3 id=\"2-运行JOS-demo\"><a href=\"#2-运行JOS-demo\" class=\"headerlink\" title=\"2. 运行JOS demo\"></a>2. 运行JOS demo</h3><ul>\n<li><p>QEMU</p>\n<p>在Homebrew工具下，直接利用brew即可安装i386-jos-elf-gcc和i386-jos-elf-gdb</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew tap liudangyi/i386-jos-elf-gcc //添加第三方库</span><br><span class=\"line\">brew install i386-jos-elf-gcc i386-jos-elf-gdb</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><p>官网克隆源码</p>\n<p>从mit课程官网得到6.828的git地址，发现从2018年后就未更新，所以我们用2018的代码实现</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir ~/6.828</span><br><span class=\"line\">cd 6.828</span><br><span class=\"line\">git clone https://pdos.csail.mit.edu/6.828/2018/jos.git lab</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>make jos的boot loader和kernel</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ./lab</span><br><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>成功后及显示</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ as kern/entry.S</span><br><span class=\"line\">+ cc kern/entrypgdir.c</span><br><span class=\"line\">+ cc kern/init.c</span><br><span class=\"line\">+ cc kern/console.c</span><br><span class=\"line\">+ cc kern/monitor.c</span><br><span class=\"line\">+ cc kern/printf.c</span><br><span class=\"line\">+ cc kern/kdebug.c</span><br><span class=\"line\">+ cc lib/printfmt.c</span><br><span class=\"line\">+ cc lib/readline.c</span><br><span class=\"line\">+ cc lib/string.c</span><br><span class=\"line\">+ ld obj/kern/kernel</span><br><span class=\"line\">i386-jos-elf-ld: warning: section `.bss&#x27; type changed to PROGBITS</span><br><span class=\"line\">+ as boot/boot.S</span><br><span class=\"line\">+ cc -Os boot/main.c</span><br><span class=\"line\">+ ld boot/boot</span><br><span class=\"line\">boot block is 382 bytes (max 510)</span><br><span class=\"line\">+ mk obj/kern/kernel.img</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>启动JOS qemu</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make qemu</span><br></pre></td></tr></table></figure>\n\n<p>此时即可成功启动JOS，enjoy～</p>\n<h3 id=\"3-持续关注\"><a href=\"#3-持续关注\" class=\"headerlink\" title=\"3. 持续关注\"></a>3. 持续关注</h3><p>​    正值疫情老虎徘徊，再加上工作需求和学业压力，今天先完成了相关环境的配置，后续会继续进行OS的开发和学习，计划在一个月内完成这6个Lab，自己学习的过程中也帮助大家踩踩坑，祝大家都能早日拿到心仪的offer～</p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"6-828-ZhyOS在macOS下的环境配置-2020\"><a href=\"#6-828-ZhyOS在macOS下的环境配置-2020\" class=\"headerlink\" title=\"6.828 ZhyOS在macOS下的环境配置-2020\"></a>6.828 ZhyOS在macOS下的环境配置-2020</h2><blockquote>\n<p>本文主要介绍如何在macOS下配置mit 6.828 JOS的实验环境</p>\n</blockquote>\n<p>​    实习期做过一些业务之后，最直观的感受是做业务相对来说比较繁琐，每天疲于完成分配的需求，对个人成长来说不是特别大。和翔少一波交流后，还是想回归学校，利用余下不多的时间多打打基础，考虑抓抓基础以后往infrastructure方向发展。</p>\n<p>​    在进行JOS之前，在网上搜索关于JOS的开发环境，基本都是关于在ubuntu下的配置教程，很多博客和文章都提到<em>“不是32位linux就不好配置，会浪费大量时间在配置环境”</em>上之类的言论。奈何为囊中羞涩所困，在连续开了几个centOS后，本人OS X没有过多的存储资源可以使用，加上实在无法忍受开VMware恐怖的耗电量和发热量，尝试将开发环境移到<code>macOS</code>下。</p>\n<p>​    起初按照刘学长博客进行配置，但是出现一堆读不懂的error；简单碰壁后发现其实无比简单，在这里放上我的配置教程，过程非常简单可操作，希望能帮助到更多的coder完成这个项目。</p>\n<h3 id=\"1-Tools-we-need\"><a href=\"#1-Tools-we-need\" class=\"headerlink\" title=\"1. Tools we need\"></a>1. Tools we need</h3><p>配置环境之前，有两个工具是必须要进行配置的：</p>\n<ul>\n<li><p>Homebrew</p>\n</li>\n<li><p>Macports</p>\n<p>建议大家直接Google，按照官网公开的方法进行配置即可～(需要在管理员模式下进行，否则会遇到很多Permission Denied的报错，通常难以解决，本菜🐔也被困扰很久)</p>\n</li>\n</ul>\n<h3 id=\"2-运行JOS-demo\"><a href=\"#2-运行JOS-demo\" class=\"headerlink\" title=\"2. 运行JOS demo\"></a>2. 运行JOS demo</h3><ul>\n<li><p>QEMU</p>\n<p>在Homebrew工具下，直接利用brew即可安装i386-jos-elf-gcc和i386-jos-elf-gdb</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">brew tap liudangyi/i386-jos-elf-gcc //添加第三方库</span><br><span class=\"line\">brew install i386-jos-elf-gcc i386-jos-elf-gdb</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li><p>官网克隆源码</p>\n<p>从mit课程官网得到6.828的git地址，发现从2018年后就未更新，所以我们用2018的代码实现</p>\n</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">mkdir ~/6.828</span><br><span class=\"line\">cd 6.828</span><br><span class=\"line\">git clone https://pdos.csail.mit.edu/6.828/2018/jos.git lab</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>make jos的boot loader和kernel</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">cd ./lab</span><br><span class=\"line\">make</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>成功后及显示</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">+ as kern/entry.S</span><br><span class=\"line\">+ cc kern/entrypgdir.c</span><br><span class=\"line\">+ cc kern/init.c</span><br><span class=\"line\">+ cc kern/console.c</span><br><span class=\"line\">+ cc kern/monitor.c</span><br><span class=\"line\">+ cc kern/printf.c</span><br><span class=\"line\">+ cc kern/kdebug.c</span><br><span class=\"line\">+ cc lib/printfmt.c</span><br><span class=\"line\">+ cc lib/readline.c</span><br><span class=\"line\">+ cc lib/string.c</span><br><span class=\"line\">+ ld obj/kern/kernel</span><br><span class=\"line\">i386-jos-elf-ld: warning: section `.bss&#x27; type changed to PROGBITS</span><br><span class=\"line\">+ as boot/boot.S</span><br><span class=\"line\">+ cc -Os boot/main.c</span><br><span class=\"line\">+ ld boot/boot</span><br><span class=\"line\">boot block is 382 bytes (max 510)</span><br><span class=\"line\">+ mk obj/kern/kernel.img</span><br></pre></td></tr></table></figure>\n\n\n\n<ul>\n<li>启动JOS qemu</li>\n</ul>\n<figure class=\"highlight plaintext\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\">make qemu</span><br></pre></td></tr></table></figure>\n\n<p>此时即可成功启动JOS，enjoy～</p>\n<h3 id=\"3-持续关注\"><a href=\"#3-持续关注\" class=\"headerlink\" title=\"3. 持续关注\"></a>3. 持续关注</h3><p>​    正值疫情老虎徘徊，再加上工作需求和学业压力，今天先完成了相关环境的配置，后续会继续进行OS的开发和学习，计划在一个月内完成这6个Lab，自己学习的过程中也帮助大家踩踩坑，祝大家都能早日拿到心仪的offer～</p>\n"},{"layout":"post","title":"TOGAF企业架构体系","date":"2020-05-10T11:00:00.000Z","cover":"http://csuzhang.info/photos/togaf.jpg","_content":"\n\n### TOGAF定义\n\nTOGAF 即 The Open Group Architecture Framework （开放组体系结构框架），是由致力于技术标准制定和推广的非盈利组织 The Open Group 制定的用于开发企业架构（Enterprise Architecture）的一套方法和工具。\n\n### 在介绍 TOGAF 之前，今天先来聊聊企业架构。\n\n企业架构由IT架构发展而来。所以在一些定义中，会把企业架构简单定义为企业信息系统建设的规划。\n\n> 上世纪七十年代美国军方想要建立一个牛X的系统来管理通讯指挥作战的所有相关资源，建立这个系统的方法后来形成理论并于2003年发展成 DoDAF （美国国防部体系架构框架）。在那之前，民间已经发展出好几个框架雏形。其中，1987美国人 John Zachman 发表论文首次提出了“信息系统架构框架”的概念（后改称“企业架构框架”），奠定了企业架构的理论基础。\n\n但其实现在我们讲的企业架构，一般包括业务架构（流程、组织）、应用架构（应用、服务）、数据架构（数据、信息）和技术架构（硬件、网络）这几方面内容。\n\n![TOGAF](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/togaf.jpg)\n\n### 企业架构组成\n\n根据 TOGAF 的定义，企业是具有一系列共同目标的组织的集合。而企业架构则是为了有效地实现这一系列目标，去定义企业的结构和运作模式的概念蓝图（SearchCIO），是构成企业的所有关键元素和其关系的综合描述（Zachman），是通过创建、沟通和优化用以描述企业未来状态和发展的关键原则和模型以将业务愿景和战略转化成有效的企业变更的过程（Gartner）。\n\n就好比建一栋房子不是撸子袖子就去搬砖，需要有设计图纸，去决定房屋结构、构成部分、功能、空间关系等元素，而企业架构则是企业顶层设计的图纸。\n\n很多企业在进行信息化建设时，常常以技术为主导，把关注点放在当前问题的IT实现上，缺乏全局思考，与业务脱节，导致上线的新系统往往无法对业务提供有效支持，无法适应快速变化的需求；各系统间无法形成有效联动，也存在功能重复建设的情况。简单说来，就是管理层、IT人员和业务人员之间没有进行充分沟通并达成共识。\n\n数字化时代，“业务即IT，IT即业务”，已不能割裂来看业务与IT。在外部环境迅速变化、内部环境日益复杂的情况下，一个完备而科学的企业架构就显得极为重要。它可以在利益相关者（stakeholders）间、信息系统间、人与系统间搭建无障碍沟通的桥梁，保障各方拥有共同的理解与愿景。\n\n> 企业架构是承接企业业务战略与 IT战略之间的桥梁与标准接口，是企业信息化规划的核心。\n\n而企业架构框架，例如上面提到 TOGAF、Zachman、DoDAF 等，则是帮助企业全面、有序地去构建属于自己的企业架构的方法论和工具集。\n\n### 如何构建企业架构\n\n一来，并没有哪个企业架构框架适用于所有企业，企业需要根据自身情况选择合适的框架进行裁剪，借助框架进行企业架构的开发。TOGAF也说自己不是一个“one-size-fits-all”的框架。生搬硬套与全盘照抄是没有任何价值哒。\n\n二来，退一步说，企业架构定义不是一项简单工作，有一定的门槛，并不是处在所有发展阶段的所有企业都适合大力推行企业架构。对很多企业（特别是小微企业）来说，将重心放在方法论和工具的研究上不如老老实实地进行业务分析收效更快。就像在NBA球场上，战术体系的重要性不言而喻，然而现今很多年轻球队却是通过加快比赛节奏来赢球的，因为打磨体系太耗时间了。\n\n**总之，企业框架很重要，但是不能盲目崇拜和过分依赖。**\n\n目前较为主流和具备影响力的企业架构框架之一就是 TOGAF 啦。TOGAF 发展至今已有23年历史，2009年的市场占有率超过50%。TOGAF 在国外有 SAP、IBM 等公司在推动，在中国则于2009年由金蝶引入进行本地化和中文化工作。\n","source":"_posts/2020-5-10-TOGAF.md","raw":"---\nlayout: post\ntitle:  \"TOGAF企业架构体系\"\ndate: 2020-5-10 19:00:00\ncategories: thinking\ntags: thinking\ncover: >-\n  http://csuzhang.info/photos/togaf.jpg\n---\n\n\n### TOGAF定义\n\nTOGAF 即 The Open Group Architecture Framework （开放组体系结构框架），是由致力于技术标准制定和推广的非盈利组织 The Open Group 制定的用于开发企业架构（Enterprise Architecture）的一套方法和工具。\n\n### 在介绍 TOGAF 之前，今天先来聊聊企业架构。\n\n企业架构由IT架构发展而来。所以在一些定义中，会把企业架构简单定义为企业信息系统建设的规划。\n\n> 上世纪七十年代美国军方想要建立一个牛X的系统来管理通讯指挥作战的所有相关资源，建立这个系统的方法后来形成理论并于2003年发展成 DoDAF （美国国防部体系架构框架）。在那之前，民间已经发展出好几个框架雏形。其中，1987美国人 John Zachman 发表论文首次提出了“信息系统架构框架”的概念（后改称“企业架构框架”），奠定了企业架构的理论基础。\n\n但其实现在我们讲的企业架构，一般包括业务架构（流程、组织）、应用架构（应用、服务）、数据架构（数据、信息）和技术架构（硬件、网络）这几方面内容。\n\n![TOGAF](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/togaf.jpg)\n\n### 企业架构组成\n\n根据 TOGAF 的定义，企业是具有一系列共同目标的组织的集合。而企业架构则是为了有效地实现这一系列目标，去定义企业的结构和运作模式的概念蓝图（SearchCIO），是构成企业的所有关键元素和其关系的综合描述（Zachman），是通过创建、沟通和优化用以描述企业未来状态和发展的关键原则和模型以将业务愿景和战略转化成有效的企业变更的过程（Gartner）。\n\n就好比建一栋房子不是撸子袖子就去搬砖，需要有设计图纸，去决定房屋结构、构成部分、功能、空间关系等元素，而企业架构则是企业顶层设计的图纸。\n\n很多企业在进行信息化建设时，常常以技术为主导，把关注点放在当前问题的IT实现上，缺乏全局思考，与业务脱节，导致上线的新系统往往无法对业务提供有效支持，无法适应快速变化的需求；各系统间无法形成有效联动，也存在功能重复建设的情况。简单说来，就是管理层、IT人员和业务人员之间没有进行充分沟通并达成共识。\n\n数字化时代，“业务即IT，IT即业务”，已不能割裂来看业务与IT。在外部环境迅速变化、内部环境日益复杂的情况下，一个完备而科学的企业架构就显得极为重要。它可以在利益相关者（stakeholders）间、信息系统间、人与系统间搭建无障碍沟通的桥梁，保障各方拥有共同的理解与愿景。\n\n> 企业架构是承接企业业务战略与 IT战略之间的桥梁与标准接口，是企业信息化规划的核心。\n\n而企业架构框架，例如上面提到 TOGAF、Zachman、DoDAF 等，则是帮助企业全面、有序地去构建属于自己的企业架构的方法论和工具集。\n\n### 如何构建企业架构\n\n一来，并没有哪个企业架构框架适用于所有企业，企业需要根据自身情况选择合适的框架进行裁剪，借助框架进行企业架构的开发。TOGAF也说自己不是一个“one-size-fits-all”的框架。生搬硬套与全盘照抄是没有任何价值哒。\n\n二来，退一步说，企业架构定义不是一项简单工作，有一定的门槛，并不是处在所有发展阶段的所有企业都适合大力推行企业架构。对很多企业（特别是小微企业）来说，将重心放在方法论和工具的研究上不如老老实实地进行业务分析收效更快。就像在NBA球场上，战术体系的重要性不言而喻，然而现今很多年轻球队却是通过加快比赛节奏来赢球的，因为打磨体系太耗时间了。\n\n**总之，企业框架很重要，但是不能盲目崇拜和过分依赖。**\n\n目前较为主流和具备影响力的企业架构框架之一就是 TOGAF 啦。TOGAF 发展至今已有23年历史，2009年的市场占有率超过50%。TOGAF 在国外有 SAP、IBM 等公司在推动，在中国则于2009年由金蝶引入进行本地化和中文化工作。\n","slug":"2020-5-10-TOGAF","published":1,"updated":"2022-01-08T17:43:53.428Z","_id":"cky61ey4a000laqoxa9ik6a3w","comments":1,"photos":[],"link":"","content":"<h3 id=\"TOGAF定义\"><a href=\"#TOGAF定义\" class=\"headerlink\" title=\"TOGAF定义\"></a>TOGAF定义</h3><p>TOGAF 即 The Open Group Architecture Framework （开放组体系结构框架），是由致力于技术标准制定和推广的非盈利组织 The Open Group 制定的用于开发企业架构（Enterprise Architecture）的一套方法和工具。</p>\n<h3 id=\"在介绍-TOGAF-之前，今天先来聊聊企业架构。\"><a href=\"#在介绍-TOGAF-之前，今天先来聊聊企业架构。\" class=\"headerlink\" title=\"在介绍 TOGAF 之前，今天先来聊聊企业架构。\"></a>在介绍 TOGAF 之前，今天先来聊聊企业架构。</h3><p>企业架构由IT架构发展而来。所以在一些定义中，会把企业架构简单定义为企业信息系统建设的规划。</p>\n<blockquote>\n<p>上世纪七十年代美国军方想要建立一个牛X的系统来管理通讯指挥作战的所有相关资源，建立这个系统的方法后来形成理论并于2003年发展成 DoDAF （美国国防部体系架构框架）。在那之前，民间已经发展出好几个框架雏形。其中，1987美国人 John Zachman 发表论文首次提出了“信息系统架构框架”的概念（后改称“企业架构框架”），奠定了企业架构的理论基础。</p>\n</blockquote>\n<p>但其实现在我们讲的企业架构，一般包括业务架构（流程、组织）、应用架构（应用、服务）、数据架构（数据、信息）和技术架构（硬件、网络）这几方面内容。</p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/togaf.jpg\" alt=\"TOGAF\"></p>\n<h3 id=\"企业架构组成\"><a href=\"#企业架构组成\" class=\"headerlink\" title=\"企业架构组成\"></a>企业架构组成</h3><p>根据 TOGAF 的定义，企业是具有一系列共同目标的组织的集合。而企业架构则是为了有效地实现这一系列目标，去定义企业的结构和运作模式的概念蓝图（SearchCIO），是构成企业的所有关键元素和其关系的综合描述（Zachman），是通过创建、沟通和优化用以描述企业未来状态和发展的关键原则和模型以将业务愿景和战略转化成有效的企业变更的过程（Gartner）。</p>\n<p>就好比建一栋房子不是撸子袖子就去搬砖，需要有设计图纸，去决定房屋结构、构成部分、功能、空间关系等元素，而企业架构则是企业顶层设计的图纸。</p>\n<p>很多企业在进行信息化建设时，常常以技术为主导，把关注点放在当前问题的IT实现上，缺乏全局思考，与业务脱节，导致上线的新系统往往无法对业务提供有效支持，无法适应快速变化的需求；各系统间无法形成有效联动，也存在功能重复建设的情况。简单说来，就是管理层、IT人员和业务人员之间没有进行充分沟通并达成共识。</p>\n<p>数字化时代，“业务即IT，IT即业务”，已不能割裂来看业务与IT。在外部环境迅速变化、内部环境日益复杂的情况下，一个完备而科学的企业架构就显得极为重要。它可以在利益相关者（stakeholders）间、信息系统间、人与系统间搭建无障碍沟通的桥梁，保障各方拥有共同的理解与愿景。</p>\n<blockquote>\n<p>企业架构是承接企业业务战略与 IT战略之间的桥梁与标准接口，是企业信息化规划的核心。</p>\n</blockquote>\n<p>而企业架构框架，例如上面提到 TOGAF、Zachman、DoDAF 等，则是帮助企业全面、有序地去构建属于自己的企业架构的方法论和工具集。</p>\n<h3 id=\"如何构建企业架构\"><a href=\"#如何构建企业架构\" class=\"headerlink\" title=\"如何构建企业架构\"></a>如何构建企业架构</h3><p>一来，并没有哪个企业架构框架适用于所有企业，企业需要根据自身情况选择合适的框架进行裁剪，借助框架进行企业架构的开发。TOGAF也说自己不是一个“one-size-fits-all”的框架。生搬硬套与全盘照抄是没有任何价值哒。</p>\n<p>二来，退一步说，企业架构定义不是一项简单工作，有一定的门槛，并不是处在所有发展阶段的所有企业都适合大力推行企业架构。对很多企业（特别是小微企业）来说，将重心放在方法论和工具的研究上不如老老实实地进行业务分析收效更快。就像在NBA球场上，战术体系的重要性不言而喻，然而现今很多年轻球队却是通过加快比赛节奏来赢球的，因为打磨体系太耗时间了。</p>\n<p><strong>总之，企业框架很重要，但是不能盲目崇拜和过分依赖。</strong></p>\n<p>目前较为主流和具备影响力的企业架构框架之一就是 TOGAF 啦。TOGAF 发展至今已有23年历史，2009年的市场占有率超过50%。TOGAF 在国外有 SAP、IBM 等公司在推动，在中国则于2009年由金蝶引入进行本地化和中文化工作。</p>\n","site":{"data":{}},"excerpt":"","more":"<h3 id=\"TOGAF定义\"><a href=\"#TOGAF定义\" class=\"headerlink\" title=\"TOGAF定义\"></a>TOGAF定义</h3><p>TOGAF 即 The Open Group Architecture Framework （开放组体系结构框架），是由致力于技术标准制定和推广的非盈利组织 The Open Group 制定的用于开发企业架构（Enterprise Architecture）的一套方法和工具。</p>\n<h3 id=\"在介绍-TOGAF-之前，今天先来聊聊企业架构。\"><a href=\"#在介绍-TOGAF-之前，今天先来聊聊企业架构。\" class=\"headerlink\" title=\"在介绍 TOGAF 之前，今天先来聊聊企业架构。\"></a>在介绍 TOGAF 之前，今天先来聊聊企业架构。</h3><p>企业架构由IT架构发展而来。所以在一些定义中，会把企业架构简单定义为企业信息系统建设的规划。</p>\n<blockquote>\n<p>上世纪七十年代美国军方想要建立一个牛X的系统来管理通讯指挥作战的所有相关资源，建立这个系统的方法后来形成理论并于2003年发展成 DoDAF （美国国防部体系架构框架）。在那之前，民间已经发展出好几个框架雏形。其中，1987美国人 John Zachman 发表论文首次提出了“信息系统架构框架”的概念（后改称“企业架构框架”），奠定了企业架构的理论基础。</p>\n</blockquote>\n<p>但其实现在我们讲的企业架构，一般包括业务架构（流程、组织）、应用架构（应用、服务）、数据架构（数据、信息）和技术架构（硬件、网络）这几方面内容。</p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/togaf.jpg\" alt=\"TOGAF\"></p>\n<h3 id=\"企业架构组成\"><a href=\"#企业架构组成\" class=\"headerlink\" title=\"企业架构组成\"></a>企业架构组成</h3><p>根据 TOGAF 的定义，企业是具有一系列共同目标的组织的集合。而企业架构则是为了有效地实现这一系列目标，去定义企业的结构和运作模式的概念蓝图（SearchCIO），是构成企业的所有关键元素和其关系的综合描述（Zachman），是通过创建、沟通和优化用以描述企业未来状态和发展的关键原则和模型以将业务愿景和战略转化成有效的企业变更的过程（Gartner）。</p>\n<p>就好比建一栋房子不是撸子袖子就去搬砖，需要有设计图纸，去决定房屋结构、构成部分、功能、空间关系等元素，而企业架构则是企业顶层设计的图纸。</p>\n<p>很多企业在进行信息化建设时，常常以技术为主导，把关注点放在当前问题的IT实现上，缺乏全局思考，与业务脱节，导致上线的新系统往往无法对业务提供有效支持，无法适应快速变化的需求；各系统间无法形成有效联动，也存在功能重复建设的情况。简单说来，就是管理层、IT人员和业务人员之间没有进行充分沟通并达成共识。</p>\n<p>数字化时代，“业务即IT，IT即业务”，已不能割裂来看业务与IT。在外部环境迅速变化、内部环境日益复杂的情况下，一个完备而科学的企业架构就显得极为重要。它可以在利益相关者（stakeholders）间、信息系统间、人与系统间搭建无障碍沟通的桥梁，保障各方拥有共同的理解与愿景。</p>\n<blockquote>\n<p>企业架构是承接企业业务战略与 IT战略之间的桥梁与标准接口，是企业信息化规划的核心。</p>\n</blockquote>\n<p>而企业架构框架，例如上面提到 TOGAF、Zachman、DoDAF 等，则是帮助企业全面、有序地去构建属于自己的企业架构的方法论和工具集。</p>\n<h3 id=\"如何构建企业架构\"><a href=\"#如何构建企业架构\" class=\"headerlink\" title=\"如何构建企业架构\"></a>如何构建企业架构</h3><p>一来，并没有哪个企业架构框架适用于所有企业，企业需要根据自身情况选择合适的框架进行裁剪，借助框架进行企业架构的开发。TOGAF也说自己不是一个“one-size-fits-all”的框架。生搬硬套与全盘照抄是没有任何价值哒。</p>\n<p>二来，退一步说，企业架构定义不是一项简单工作，有一定的门槛，并不是处在所有发展阶段的所有企业都适合大力推行企业架构。对很多企业（特别是小微企业）来说，将重心放在方法论和工具的研究上不如老老实实地进行业务分析收效更快。就像在NBA球场上，战术体系的重要性不言而喻，然而现今很多年轻球队却是通过加快比赛节奏来赢球的，因为打磨体系太耗时间了。</p>\n<p><strong>总之，企业框架很重要，但是不能盲目崇拜和过分依赖。</strong></p>\n<p>目前较为主流和具备影响力的企业架构框架之一就是 TOGAF 啦。TOGAF 发展至今已有23年历史，2009年的市场占有率超过50%。TOGAF 在国外有 SAP、IBM 等公司在推动，在中国则于2009年由金蝶引入进行本地化和中文化工作。</p>\n"},{"layout":"post","title":"python实现常用测试模块","date":"2020-02-25T15:00:00.000Z","cover":"http://csuzhang.info/photos/pytest-3.png","_content":"\n\n\n## 用python实现常用测试模块\n\n#### **python AES 加解密模块**\n\n> Definition：\n>\n> AES：高级加密标准(Advanced Encryption Standard)是最常见的对称加密算法之一，微信小程序就是用合格加密算法。\n\n对称加密算法也就是加密和解密使用相同的密钥，具体的流程图如下图所示：\n\n![pytest-1](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/pytest-1.png)\n\n\n\n\n\n\n\nAES使用分组密码，分组密码也就是将明文分成一组一组的，每组的长度相等，每次加密一组数据，知道将整个明文都加密完成。在AES标准规范中，分组长度只能是128位，也就是说，每个分组16个字节（每个字节8位）。密钥的长度可以使用128位、192位、256位等。\n\n<u>密钥的长度不等，推荐加密的轮数也不相等。</u>\n\n**一般我们最常使用的就是AES-128，是密钥的长度为128位，加密轮数位10轮。**\n\n\n> AES加解密的流程中包括的主要步骤：\n\n明文分组 、字节代换、行位移、列混淆、轮密钥加\n\n\n\n> AES算法代码实现：\n\n```python\nimport sys\nfrom Crypto.Cipher import AES\nfrom binascii import b2a_hex, a2b_hex\n\nclass prpcrypt():\n  \n\tdef __init__(self, key):\n\t\tself.key = key.encode('utf-8') self.mode = AES.MODE_CBC\n\t\t# 加密函数，如果 text 不是 16 的倍数【加密文本 text 必须为 16 的倍数!】，那就补足为 16 的 倍数\n    \n\tdef encrypt(self, text):\n\t\ttext = text.encode('utf-8')\n\t\t# 创建一个新的 AES 密码\n\t\t# key 为对称加密中使用的密钥，mode_CBC 是 AES 五种加密模式中的密码分组链接模式 \n    cryptor = AES.new(self.key, self.mode, self.key)\n# 这里密钥 key 长度必须为 16(AES-128)、24(AES-192)、或 32(AES-256)Bytes 长\n#度.目前 AES-128 足够用 length = 16\n\t\tcount = len(text)\n\t\tif (count % length != 0):\n\t\t\tadd = length - (count % length) \n    else:\n\t\t\tadd = 0\n\t\ttext = text + ('\\0' * add).encode('utf-8')\n\t\t# 真正的加密操作，使用初始化时的密钥加密数据\n\t\tself.ciphertext = cryptor.encrypt(text)\n# 因为 AES 加密时候得到的字符串不一定是 ascii 字符集的，输出到终端或者保存时候可能存\n在问题\n# 所以这里统一把加密后的字符串转化为 16 进制字符串 \n\t\treturn b2a_hex(self.ciphertext)\n\n# 解密后，去掉补足的空格用 strip() 去掉 \n\tdef decrypt(self, text):\n\t\tcryptor = AES.new(self.key, self.mode, self.key)\n    plain_text = cryptor.decrypt(a2b_hex(text))\n# return plain_text.rstrip('\\0')\n\t\treturn bytes.decode(plain_text).rstrip('\\0')\n\nif __name__ == '__main__':\n\npc = prpcrypt('keyskeyskeyskeys') # 初始化密钥\ne = pc.encrypt(\"0123456789ABCDEF\") # 对输入明文进行加密 \nd = pc.decrypt(e) # 解密密文操作\nprint(e, d)\ne = pc.encrypt(\"00000000000000000000000000\")\nd = pc.decrypt(e)\nprint(e, d)\n```\n下面我们来看下代码的运行结果：\n\n![pytest-2](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/pytest-2.png)\n\n\n#### **python unittest 单元测试模块**\n\n> unittest 是 python 的一个基础常用的单元测试框架，\n\n便于我们编写测试用例以及测试执行。其中中最核心的四个概念是:\n\n<p>test case</p>\n\n<p>test suite</p>\n\n<p>test runner</p>\n\n<p>test fixture</p>\n\n![pytest-3](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/pytest-3.png)\n\n<u>unittest 进行单元测试的流程：</u>\n\n1. 写好 TestCase，然后由 TestLoader 加载 TestCase 到 TestSuite\n2. 然后由 TextTestRunner 来运行 TestSuite，运行的结果保存在 TextTestResult 中\n3. 我们通过命令行或者 unittest.main()执行时，main 会调用 TextTestRunner 中的 run 来执行，或者我们可以直接通过 TextTestRunner 来执行用 例。\n\n\n\n一个 class 继承 unittest.TestCase 即是一个 TestCase，其中以 test 开头的方法 在 load 时被加载为一个真正的 TestCase。\n\n在 TestRunner 中的 verbosity 参数可以控制执行结果的输出，0 是简单报告、1 是一般报告、2 是详细报告。\n\n\n\n下面完成一次基本的 unittest 单元测试：\n\n```python\n# 准备好待测函数\ndef add(a, b): \n  return a+b\ndef minus(a, b):\n  return a-b\ndef multi(a, b):\n  return a*b\ndef divide(a, b):\n  return a/b\n```\n\n然后写出待测函数的测试方法：\n\n```python\nimport unittest\nfrom mathfunc import *\n\nclass TestMathFunc(unittest.TestCase): \n  \"\"\"Test mathfuc.py\"\"\"\n\tdef setUp(cls):\n\t\tprint(\"do something before test.Prepare environment.\")\n\n  def tearDown(cls):\n\t\tprint(\"do something after test.Clean up.\")\n\n  def test_add(self):\n\t\t\"\"\"Test method add(a, b)\"\"\" \n    print(\"add\")\n\t\tself.assertEqual(3, add(1, 2)) \n    self.assertNotEqual(3, add(2, 2))\n\n  def test_minus(self):\n\t\t\"\"\"Test method minus(a, b)\"\"\" \n\t\tprint(\"minus\") \n    self.assertEqual(1, minus(3, 2))\n\n  def test_multi(self):\n\t\t\"\"\"Test method multi(a, b)\"\"\" \n    print(\"multi\") \n    self.assertEqual(6, multi(2, 3))\n\n  def test_divide(self):\n\t\t\"\"\"Test method divide(a, b)\"\"\"\n    print(\"divide\")\n\t\tself.assertEqual(2, divide(6, 3)) \n    self.assertEqual(2.5, divide(5, 2))\n    \nif __name__ == '__main__': \n  unittest.main()\n```\n\n以上代码已经可以完成一次简单的**单元测试**了，但是还无法按照指定的顺序 来执行测试用例。因此我们这里使用 suite 来控制每个 case 的先后执行顺序：同 时，如果同时有多个测试文件，我们也可以通过 suite 来控制他们进行一起执行。\n\n```python\n# -*- coding: utf-8 -*-\nimport unittest\nfrom test_mathfunc import TestMathFunc \nfrom HTMLTestRunner import HTMLTestRunner\n\nif __name__ == '__main__':\nsuite = unittest.TestSuite() suite.addTests(unittest.TestLoader().loadTestsFromTestCase(TestMathFunc)) \nwith open('UnittestTextReport.txt', 'a') as f:\nrunner = unittest.TextTestRunner(stream=f, verbosity=2)\nrunner.run(suite)\n```\n\n然后我们试着运行，可以看到运行结果如下：\n\n![pytest-4](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/pytest-4.png)\n\n> 如果出现有 ok 的记号，则表示本次测试的结果为成功;如果出现 fail，则表 示测试结果出现问题，这时我们就需要寻找问题，看看测试结果问题在哪里。\n\n#### **python assert 断言**\n\n对于断言，官方有一段官方的解释:Assert statements are a convenient way toinsert debugging assertions into a program，其作用就是类似于我们 debug 的工具，\n\n一般的用法是:\n\n```python\nassert condition\n```\n\n用来让程序测试这个 condition，如果 condition 为 false，那么 raise 一个AssertionError 出来。逻辑上等同于:\n\n```python\n if not condition:\n     raise AssertionError()\n```\n\n我们来简单做一个小小的断言测试:\n\n```python\nassert 1==2, \"以下结果出现断言\"\n```\n\n结果如下：\n\n![pytest-5](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/pytest-5.png)\n\n\n\n\n#### **python pyserial 串口模块**\n\npyserial 模块封装了对串口的访问。在支持的平台上有统一的接口，通过 python属性访问串口设置。支持不同的字节大小、停止位、校验位和流控设置。 \n\n在串口的配置中，有以下一些比较重要的属性需要我们了解：波特率、数据位、停止位、校验位、字节大小、读写超时设置等。 下面我们来看下对于串口的设置方法：\n\n```python\nimport sys\nimport glob\nimport time\nimport serial\nimport serial.tools.list_ports\n8\ndef serial_ports():\n\"\"\" Lists serial port names\n       :raises EnvironmentError:\n          On unsupported or unknown platforms\n       :returns:\n          A list of the serial ports available on the system\n\"\"\"\n# 如果是 windows 平台的系统，对应的串口号形式 if sys.platform.startswith('win'):\nports = ['COM%s' % (i + 1) for i in range(256)]\n# 如果是 Linux 平台的系统，对应的串口号形式\nelif sys.platform.startswith('linux') or sys.platform.startswith('cygwin'):\n# this excludes your current terminal \"/dev/tty\"\nports = glob.glob('/dev/tty[A-Za-z]*') # 如果是 OS X 的系统，对应的串口号形式\nelif sys.platform.startswith('darwin'):\nports = glob.glob('/dev/tty.*') else:\nraise EnvironmentError('Unsupported platform') result = []\n# 可以通过 Serial 函数对每一个串口进行控制其操作 for port in ports:\ntry:\ns = serial.Serial(port) s.close() result.append(port)\nexcept (OSError, serial.SerialException): pass\nreturn result\n# 这句命令可以在终端打印出所有的串口设备\nprint(list(serial.tools.list_ports.comports()))\nif __name__ == '__main__': print(serial_ports())\n```\n\n下面看下我电脑上打印出来的相关串口号，可以看到一共有 3 个，表示的是每个 串口分配到的地址：\n\n![pytest-6](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/pytest-6.png)\n","source":"_posts/2020-2-25-pytest.md","raw":"---\nlayout: post\ntitle:  \"python实现常用测试模块\"\ndate: 2020-2-25 23:00:00\ncategories: Test\ntags: \n  - OS \n  - Test\ncover: >-\n  http://csuzhang.info/photos/pytest-3.png\n---\n\n\n\n## 用python实现常用测试模块\n\n#### **python AES 加解密模块**\n\n> Definition：\n>\n> AES：高级加密标准(Advanced Encryption Standard)是最常见的对称加密算法之一，微信小程序就是用合格加密算法。\n\n对称加密算法也就是加密和解密使用相同的密钥，具体的流程图如下图所示：\n\n![pytest-1](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/pytest-1.png)\n\n\n\n\n\n\n\nAES使用分组密码，分组密码也就是将明文分成一组一组的，每组的长度相等，每次加密一组数据，知道将整个明文都加密完成。在AES标准规范中，分组长度只能是128位，也就是说，每个分组16个字节（每个字节8位）。密钥的长度可以使用128位、192位、256位等。\n\n<u>密钥的长度不等，推荐加密的轮数也不相等。</u>\n\n**一般我们最常使用的就是AES-128，是密钥的长度为128位，加密轮数位10轮。**\n\n\n> AES加解密的流程中包括的主要步骤：\n\n明文分组 、字节代换、行位移、列混淆、轮密钥加\n\n\n\n> AES算法代码实现：\n\n```python\nimport sys\nfrom Crypto.Cipher import AES\nfrom binascii import b2a_hex, a2b_hex\n\nclass prpcrypt():\n  \n\tdef __init__(self, key):\n\t\tself.key = key.encode('utf-8') self.mode = AES.MODE_CBC\n\t\t# 加密函数，如果 text 不是 16 的倍数【加密文本 text 必须为 16 的倍数!】，那就补足为 16 的 倍数\n    \n\tdef encrypt(self, text):\n\t\ttext = text.encode('utf-8')\n\t\t# 创建一个新的 AES 密码\n\t\t# key 为对称加密中使用的密钥，mode_CBC 是 AES 五种加密模式中的密码分组链接模式 \n    cryptor = AES.new(self.key, self.mode, self.key)\n# 这里密钥 key 长度必须为 16(AES-128)、24(AES-192)、或 32(AES-256)Bytes 长\n#度.目前 AES-128 足够用 length = 16\n\t\tcount = len(text)\n\t\tif (count % length != 0):\n\t\t\tadd = length - (count % length) \n    else:\n\t\t\tadd = 0\n\t\ttext = text + ('\\0' * add).encode('utf-8')\n\t\t# 真正的加密操作，使用初始化时的密钥加密数据\n\t\tself.ciphertext = cryptor.encrypt(text)\n# 因为 AES 加密时候得到的字符串不一定是 ascii 字符集的，输出到终端或者保存时候可能存\n在问题\n# 所以这里统一把加密后的字符串转化为 16 进制字符串 \n\t\treturn b2a_hex(self.ciphertext)\n\n# 解密后，去掉补足的空格用 strip() 去掉 \n\tdef decrypt(self, text):\n\t\tcryptor = AES.new(self.key, self.mode, self.key)\n    plain_text = cryptor.decrypt(a2b_hex(text))\n# return plain_text.rstrip('\\0')\n\t\treturn bytes.decode(plain_text).rstrip('\\0')\n\nif __name__ == '__main__':\n\npc = prpcrypt('keyskeyskeyskeys') # 初始化密钥\ne = pc.encrypt(\"0123456789ABCDEF\") # 对输入明文进行加密 \nd = pc.decrypt(e) # 解密密文操作\nprint(e, d)\ne = pc.encrypt(\"00000000000000000000000000\")\nd = pc.decrypt(e)\nprint(e, d)\n```\n下面我们来看下代码的运行结果：\n\n![pytest-2](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/pytest-2.png)\n\n\n#### **python unittest 单元测试模块**\n\n> unittest 是 python 的一个基础常用的单元测试框架，\n\n便于我们编写测试用例以及测试执行。其中中最核心的四个概念是:\n\n<p>test case</p>\n\n<p>test suite</p>\n\n<p>test runner</p>\n\n<p>test fixture</p>\n\n![pytest-3](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/pytest-3.png)\n\n<u>unittest 进行单元测试的流程：</u>\n\n1. 写好 TestCase，然后由 TestLoader 加载 TestCase 到 TestSuite\n2. 然后由 TextTestRunner 来运行 TestSuite，运行的结果保存在 TextTestResult 中\n3. 我们通过命令行或者 unittest.main()执行时，main 会调用 TextTestRunner 中的 run 来执行，或者我们可以直接通过 TextTestRunner 来执行用 例。\n\n\n\n一个 class 继承 unittest.TestCase 即是一个 TestCase，其中以 test 开头的方法 在 load 时被加载为一个真正的 TestCase。\n\n在 TestRunner 中的 verbosity 参数可以控制执行结果的输出，0 是简单报告、1 是一般报告、2 是详细报告。\n\n\n\n下面完成一次基本的 unittest 单元测试：\n\n```python\n# 准备好待测函数\ndef add(a, b): \n  return a+b\ndef minus(a, b):\n  return a-b\ndef multi(a, b):\n  return a*b\ndef divide(a, b):\n  return a/b\n```\n\n然后写出待测函数的测试方法：\n\n```python\nimport unittest\nfrom mathfunc import *\n\nclass TestMathFunc(unittest.TestCase): \n  \"\"\"Test mathfuc.py\"\"\"\n\tdef setUp(cls):\n\t\tprint(\"do something before test.Prepare environment.\")\n\n  def tearDown(cls):\n\t\tprint(\"do something after test.Clean up.\")\n\n  def test_add(self):\n\t\t\"\"\"Test method add(a, b)\"\"\" \n    print(\"add\")\n\t\tself.assertEqual(3, add(1, 2)) \n    self.assertNotEqual(3, add(2, 2))\n\n  def test_minus(self):\n\t\t\"\"\"Test method minus(a, b)\"\"\" \n\t\tprint(\"minus\") \n    self.assertEqual(1, minus(3, 2))\n\n  def test_multi(self):\n\t\t\"\"\"Test method multi(a, b)\"\"\" \n    print(\"multi\") \n    self.assertEqual(6, multi(2, 3))\n\n  def test_divide(self):\n\t\t\"\"\"Test method divide(a, b)\"\"\"\n    print(\"divide\")\n\t\tself.assertEqual(2, divide(6, 3)) \n    self.assertEqual(2.5, divide(5, 2))\n    \nif __name__ == '__main__': \n  unittest.main()\n```\n\n以上代码已经可以完成一次简单的**单元测试**了，但是还无法按照指定的顺序 来执行测试用例。因此我们这里使用 suite 来控制每个 case 的先后执行顺序：同 时，如果同时有多个测试文件，我们也可以通过 suite 来控制他们进行一起执行。\n\n```python\n# -*- coding: utf-8 -*-\nimport unittest\nfrom test_mathfunc import TestMathFunc \nfrom HTMLTestRunner import HTMLTestRunner\n\nif __name__ == '__main__':\nsuite = unittest.TestSuite() suite.addTests(unittest.TestLoader().loadTestsFromTestCase(TestMathFunc)) \nwith open('UnittestTextReport.txt', 'a') as f:\nrunner = unittest.TextTestRunner(stream=f, verbosity=2)\nrunner.run(suite)\n```\n\n然后我们试着运行，可以看到运行结果如下：\n\n![pytest-4](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/pytest-4.png)\n\n> 如果出现有 ok 的记号，则表示本次测试的结果为成功;如果出现 fail，则表 示测试结果出现问题，这时我们就需要寻找问题，看看测试结果问题在哪里。\n\n#### **python assert 断言**\n\n对于断言，官方有一段官方的解释:Assert statements are a convenient way toinsert debugging assertions into a program，其作用就是类似于我们 debug 的工具，\n\n一般的用法是:\n\n```python\nassert condition\n```\n\n用来让程序测试这个 condition，如果 condition 为 false，那么 raise 一个AssertionError 出来。逻辑上等同于:\n\n```python\n if not condition:\n     raise AssertionError()\n```\n\n我们来简单做一个小小的断言测试:\n\n```python\nassert 1==2, \"以下结果出现断言\"\n```\n\n结果如下：\n\n![pytest-5](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/pytest-5.png)\n\n\n\n\n#### **python pyserial 串口模块**\n\npyserial 模块封装了对串口的访问。在支持的平台上有统一的接口，通过 python属性访问串口设置。支持不同的字节大小、停止位、校验位和流控设置。 \n\n在串口的配置中，有以下一些比较重要的属性需要我们了解：波特率、数据位、停止位、校验位、字节大小、读写超时设置等。 下面我们来看下对于串口的设置方法：\n\n```python\nimport sys\nimport glob\nimport time\nimport serial\nimport serial.tools.list_ports\n8\ndef serial_ports():\n\"\"\" Lists serial port names\n       :raises EnvironmentError:\n          On unsupported or unknown platforms\n       :returns:\n          A list of the serial ports available on the system\n\"\"\"\n# 如果是 windows 平台的系统，对应的串口号形式 if sys.platform.startswith('win'):\nports = ['COM%s' % (i + 1) for i in range(256)]\n# 如果是 Linux 平台的系统，对应的串口号形式\nelif sys.platform.startswith('linux') or sys.platform.startswith('cygwin'):\n# this excludes your current terminal \"/dev/tty\"\nports = glob.glob('/dev/tty[A-Za-z]*') # 如果是 OS X 的系统，对应的串口号形式\nelif sys.platform.startswith('darwin'):\nports = glob.glob('/dev/tty.*') else:\nraise EnvironmentError('Unsupported platform') result = []\n# 可以通过 Serial 函数对每一个串口进行控制其操作 for port in ports:\ntry:\ns = serial.Serial(port) s.close() result.append(port)\nexcept (OSError, serial.SerialException): pass\nreturn result\n# 这句命令可以在终端打印出所有的串口设备\nprint(list(serial.tools.list_ports.comports()))\nif __name__ == '__main__': print(serial_ports())\n```\n\n下面看下我电脑上打印出来的相关串口号，可以看到一共有 3 个，表示的是每个 串口分配到的地址：\n\n![pytest-6](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/pytest-6.png)\n","slug":"2020-2-25-pytest","published":1,"updated":"2022-01-08T17:43:43.506Z","_id":"cky61ey4m0021aqoxf9oshbo2","comments":1,"photos":[],"link":"","content":"<h2 id=\"用python实现常用测试模块\"><a href=\"#用python实现常用测试模块\" class=\"headerlink\" title=\"用python实现常用测试模块\"></a>用python实现常用测试模块</h2><h4 id=\"python-AES-加解密模块\"><a href=\"#python-AES-加解密模块\" class=\"headerlink\" title=\"python AES 加解密模块\"></a><strong>python AES 加解密模块</strong></h4><blockquote>\n<p>Definition：</p>\n<p>AES：高级加密标准(Advanced Encryption Standard)是最常见的对称加密算法之一，微信小程序就是用合格加密算法。</p>\n</blockquote>\n<p>对称加密算法也就是加密和解密使用相同的密钥，具体的流程图如下图所示：</p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/pytest-1.png\" alt=\"pytest-1\"></p>\n<p>AES使用分组密码，分组密码也就是将明文分成一组一组的，每组的长度相等，每次加密一组数据，知道将整个明文都加密完成。在AES标准规范中，分组长度只能是128位，也就是说，每个分组16个字节（每个字节8位）。密钥的长度可以使用128位、192位、256位等。</p>\n<p><u>密钥的长度不等，推荐加密的轮数也不相等。</u></p>\n<p><strong>一般我们最常使用的就是AES-128，是密钥的长度为128位，加密轮数位10轮。</strong></p>\n<blockquote>\n<p>AES加解密的流程中包括的主要步骤：</p>\n</blockquote>\n<p>明文分组 、字节代换、行位移、列混淆、轮密钥加</p>\n<blockquote>\n<p>AES算法代码实现：</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Cipher <span class=\"keyword\">import</span> AES</span><br><span class=\"line\"><span class=\"keyword\">from</span> binascii <span class=\"keyword\">import</span> b2a_hex, a2b_hex</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">prpcrypt</span>():</span></span><br><span class=\"line\">  </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, key</span>):</span></span><br><span class=\"line\">\t\tself.key = key.encode(<span class=\"string\">&#x27;utf-8&#x27;</span>) self.mode = AES.MODE_CBC</span><br><span class=\"line\">\t\t<span class=\"comment\"># 加密函数，如果 text 不是 16 的倍数【加密文本 text 必须为 16 的倍数!】，那就补足为 16 的 倍数</span></span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">encrypt</span>(<span class=\"params\">self, text</span>):</span></span><br><span class=\"line\">\t\ttext = text.encode(<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">\t\t<span class=\"comment\"># 创建一个新的 AES 密码</span></span><br><span class=\"line\">\t\t<span class=\"comment\"># key 为对称加密中使用的密钥，mode_CBC 是 AES 五种加密模式中的密码分组链接模式 </span></span><br><span class=\"line\">    cryptor = AES.new(self.key, self.mode, self.key)</span><br><span class=\"line\"><span class=\"comment\"># 这里密钥 key 长度必须为 16(AES-128)、24(AES-192)、或 32(AES-256)Bytes 长</span></span><br><span class=\"line\"><span class=\"comment\">#度.目前 AES-128 足够用 length = 16</span></span><br><span class=\"line\">\t\tcount = <span class=\"built_in\">len</span>(text)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (count % length != <span class=\"number\">0</span>):</span><br><span class=\"line\">\t\t\tadd = length - (count % length) </span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\tadd = <span class=\"number\">0</span></span><br><span class=\"line\">\t\ttext = text + (<span class=\"string\">&#x27;\\0&#x27;</span> * add).encode(<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">\t\t<span class=\"comment\"># 真正的加密操作，使用初始化时的密钥加密数据</span></span><br><span class=\"line\">\t\tself.ciphertext = cryptor.encrypt(text)</span><br><span class=\"line\"><span class=\"comment\"># 因为 AES 加密时候得到的字符串不一定是 ascii 字符集的，输出到终端或者保存时候可能存</span></span><br><span class=\"line\">在问题</span><br><span class=\"line\"><span class=\"comment\"># 所以这里统一把加密后的字符串转化为 16 进制字符串 </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> b2a_hex(self.ciphertext)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解密后，去掉补足的空格用 strip() 去掉 </span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decrypt</span>(<span class=\"params\">self, text</span>):</span></span><br><span class=\"line\">\t\tcryptor = AES.new(self.key, self.mode, self.key)</span><br><span class=\"line\">    plain_text = cryptor.decrypt(a2b_hex(text))</span><br><span class=\"line\"><span class=\"comment\"># return plain_text.rstrip(&#x27;\\0&#x27;)</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">bytes</span>.decode(plain_text).rstrip(<span class=\"string\">&#x27;\\0&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">pc = prpcrypt(<span class=\"string\">&#x27;keyskeyskeyskeys&#x27;</span>) <span class=\"comment\"># 初始化密钥</span></span><br><span class=\"line\">e = pc.encrypt(<span class=\"string\">&quot;0123456789ABCDEF&quot;</span>) <span class=\"comment\"># 对输入明文进行加密 </span></span><br><span class=\"line\">d = pc.decrypt(e) <span class=\"comment\"># 解密密文操作</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(e, d)</span><br><span class=\"line\">e = pc.encrypt(<span class=\"string\">&quot;00000000000000000000000000&quot;</span>)</span><br><span class=\"line\">d = pc.decrypt(e)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(e, d)</span><br></pre></td></tr></table></figure>\n<p>下面我们来看下代码的运行结果：</p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/pytest-2.png\" alt=\"pytest-2\"></p>\n<h4 id=\"python-unittest-单元测试模块\"><a href=\"#python-unittest-单元测试模块\" class=\"headerlink\" title=\"python unittest 单元测试模块\"></a><strong>python unittest 单元测试模块</strong></h4><blockquote>\n<p>unittest 是 python 的一个基础常用的单元测试框架，</p>\n</blockquote>\n<p>便于我们编写测试用例以及测试执行。其中中最核心的四个概念是:</p>\n<p>test case</p>\n\n<p>test suite</p>\n\n<p>test runner</p>\n\n<p>test fixture</p>\n\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/pytest-3.png\" alt=\"pytest-3\"></p>\n<p><u>unittest 进行单元测试的流程：</u></p>\n<ol>\n<li>写好 TestCase，然后由 TestLoader 加载 TestCase 到 TestSuite</li>\n<li>然后由 TextTestRunner 来运行 TestSuite，运行的结果保存在 TextTestResult 中</li>\n<li>我们通过命令行或者 unittest.main()执行时，main 会调用 TextTestRunner 中的 run 来执行，或者我们可以直接通过 TextTestRunner 来执行用 例。</li>\n</ol>\n<p>一个 class 继承 unittest.TestCase 即是一个 TestCase，其中以 test 开头的方法 在 load 时被加载为一个真正的 TestCase。</p>\n<p>在 TestRunner 中的 verbosity 参数可以控制执行结果的输出，0 是简单报告、1 是一般报告、2 是详细报告。</p>\n<p>下面完成一次基本的 unittest 单元测试：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 准备好待测函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span>(<span class=\"params\">a, b</span>):</span> </span><br><span class=\"line\">  <span class=\"keyword\">return</span> a+b</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">minus</span>(<span class=\"params\">a, b</span>):</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> a-b</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">multi</span>(<span class=\"params\">a, b</span>):</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> a*b</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">divide</span>(<span class=\"params\">a, b</span>):</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> a/b</span><br></pre></td></tr></table></figure>\n\n<p>然后写出待测函数的测试方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> unittest</span><br><span class=\"line\"><span class=\"keyword\">from</span> mathfunc <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestMathFunc</span>(<span class=\"params\">unittest.TestCase</span>):</span> </span><br><span class=\"line\">  <span class=\"string\">&quot;&quot;&quot;Test mathfuc.py&quot;&quot;&quot;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setUp</span>(<span class=\"params\">cls</span>):</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;do something before test.Prepare environment.&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tearDown</span>(<span class=\"params\">cls</span>):</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;do something after test.Clean up.&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_add</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;&quot;&quot;Test method add(a, b)&quot;&quot;&quot;</span> </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;add&quot;</span>)</span><br><span class=\"line\">\t\tself.assertEqual(<span class=\"number\">3</span>, add(<span class=\"number\">1</span>, <span class=\"number\">2</span>)) </span><br><span class=\"line\">    self.assertNotEqual(<span class=\"number\">3</span>, add(<span class=\"number\">2</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_minus</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;&quot;&quot;Test method minus(a, b)&quot;&quot;&quot;</span> </span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;minus&quot;</span>) </span><br><span class=\"line\">    self.assertEqual(<span class=\"number\">1</span>, minus(<span class=\"number\">3</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_multi</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;&quot;&quot;Test method multi(a, b)&quot;&quot;&quot;</span> </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;multi&quot;</span>) </span><br><span class=\"line\">    self.assertEqual(<span class=\"number\">6</span>, multi(<span class=\"number\">2</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_divide</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;&quot;&quot;Test method divide(a, b)&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;divide&quot;</span>)</span><br><span class=\"line\">\t\tself.assertEqual(<span class=\"number\">2</span>, divide(<span class=\"number\">6</span>, <span class=\"number\">3</span>)) </span><br><span class=\"line\">    self.assertEqual(<span class=\"number\">2.5</span>, divide(<span class=\"number\">5</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>: </span><br><span class=\"line\">  unittest.main()</span><br></pre></td></tr></table></figure>\n\n<p>以上代码已经可以完成一次简单的<strong>单元测试</strong>了，但是还无法按照指定的顺序 来执行测试用例。因此我们这里使用 suite 来控制每个 case 的先后执行顺序：同 时，如果同时有多个测试文件，我们也可以通过 suite 来控制他们进行一起执行。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> unittest</span><br><span class=\"line\"><span class=\"keyword\">from</span> test_mathfunc <span class=\"keyword\">import</span> TestMathFunc </span><br><span class=\"line\"><span class=\"keyword\">from</span> HTMLTestRunner <span class=\"keyword\">import</span> HTMLTestRunner</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">suite = unittest.TestSuite() suite.addTests(unittest.TestLoader().loadTestsFromTestCase(TestMathFunc)) </span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;UnittestTextReport.txt&#x27;</span>, <span class=\"string\">&#x27;a&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">runner = unittest.TextTestRunner(stream=f, verbosity=<span class=\"number\">2</span>)</span><br><span class=\"line\">runner.run(suite)</span><br></pre></td></tr></table></figure>\n\n<p>然后我们试着运行，可以看到运行结果如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/pytest-4.png\" alt=\"pytest-4\"></p>\n<blockquote>\n<p>如果出现有 ok 的记号，则表示本次测试的结果为成功;如果出现 fail，则表 示测试结果出现问题，这时我们就需要寻找问题，看看测试结果问题在哪里。</p>\n</blockquote>\n<h4 id=\"python-assert-断言\"><a href=\"#python-assert-断言\" class=\"headerlink\" title=\"python assert 断言\"></a><strong>python assert 断言</strong></h4><p>对于断言，官方有一段官方的解释:Assert statements are a convenient way toinsert debugging assertions into a program，其作用就是类似于我们 debug 的工具，</p>\n<p>一般的用法是:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">assert</span> condition</span><br></pre></td></tr></table></figure>\n\n<p>用来让程序测试这个 condition，如果 condition 为 false，那么 raise 一个AssertionError 出来。逻辑上等同于:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> condition:</span><br><span class=\"line\">    <span class=\"keyword\">raise</span> AssertionError()</span><br></pre></td></tr></table></figure>\n\n<p>我们来简单做一个小小的断言测试:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">assert</span> <span class=\"number\">1</span>==<span class=\"number\">2</span>, <span class=\"string\">&quot;以下结果出现断言&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>结果如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/pytest-5.png\" alt=\"pytest-5\"></p>\n<h4 id=\"python-pyserial-串口模块\"><a href=\"#python-pyserial-串口模块\" class=\"headerlink\" title=\"python pyserial 串口模块\"></a><strong>python pyserial 串口模块</strong></h4><p>pyserial 模块封装了对串口的访问。在支持的平台上有统一的接口，通过 python属性访问串口设置。支持不同的字节大小、停止位、校验位和流控设置。 </p>\n<p>在串口的配置中，有以下一些比较重要的属性需要我们了解：波特率、数据位、停止位、校验位、字节大小、读写超时设置等。 下面我们来看下对于串口的设置方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> glob</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> serial</span><br><span class=\"line\"><span class=\"keyword\">import</span> serial.tools.list_ports</span><br><span class=\"line\"><span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">serial_ports</span>():</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot; Lists serial port names</span></span><br><span class=\"line\"><span class=\"string\">       :raises EnvironmentError:</span></span><br><span class=\"line\"><span class=\"string\">          On unsupported or unknown platforms</span></span><br><span class=\"line\"><span class=\"string\">       :returns:</span></span><br><span class=\"line\"><span class=\"string\">          A list of the serial ports available on the system</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 如果是 windows 平台的系统，对应的串口号形式 if sys.platform.startswith(&#x27;win&#x27;):</span></span><br><span class=\"line\">ports = [<span class=\"string\">&#x27;COM%s&#x27;</span> % (i + <span class=\"number\">1</span>) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">256</span>)]</span><br><span class=\"line\"><span class=\"comment\"># 如果是 Linux 平台的系统，对应的串口号形式</span></span><br><span class=\"line\"><span class=\"keyword\">elif</span> sys.platform.startswith(<span class=\"string\">&#x27;linux&#x27;</span>) <span class=\"keyword\">or</span> sys.platform.startswith(<span class=\"string\">&#x27;cygwin&#x27;</span>):</span><br><span class=\"line\"><span class=\"comment\"># this excludes your current terminal &quot;/dev/tty&quot;</span></span><br><span class=\"line\">ports = glob.glob(<span class=\"string\">&#x27;/dev/tty[A-Za-z]*&#x27;</span>) <span class=\"comment\"># 如果是 OS X 的系统，对应的串口号形式</span></span><br><span class=\"line\"><span class=\"keyword\">elif</span> sys.platform.startswith(<span class=\"string\">&#x27;darwin&#x27;</span>):</span><br><span class=\"line\">ports = glob.glob(<span class=\"string\">&#x27;/dev/tty.*&#x27;</span>) <span class=\"keyword\">else</span>:</span><br><span class=\"line\"><span class=\"keyword\">raise</span> EnvironmentError(<span class=\"string\">&#x27;Unsupported platform&#x27;</span>) result = []</span><br><span class=\"line\"><span class=\"comment\"># 可以通过 Serial 函数对每一个串口进行控制其操作 for port in ports:</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">s = serial.Serial(port) s.close() result.append(port)</span><br><span class=\"line\"><span class=\"keyword\">except</span> (OSError, serial.SerialException): <span class=\"keyword\">pass</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> result</span><br><span class=\"line\"><span class=\"comment\"># 这句命令可以在终端打印出所有的串口设备</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">list</span>(serial.tools.list_ports.comports()))</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>: <span class=\"built_in\">print</span>(serial_ports())</span><br></pre></td></tr></table></figure>\n\n<p>下面看下我电脑上打印出来的相关串口号，可以看到一共有 3 个，表示的是每个 串口分配到的地址：</p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/pytest-6.png\" alt=\"pytest-6\"></p>\n","site":{"data":{}},"excerpt":"","more":"<h2 id=\"用python实现常用测试模块\"><a href=\"#用python实现常用测试模块\" class=\"headerlink\" title=\"用python实现常用测试模块\"></a>用python实现常用测试模块</h2><h4 id=\"python-AES-加解密模块\"><a href=\"#python-AES-加解密模块\" class=\"headerlink\" title=\"python AES 加解密模块\"></a><strong>python AES 加解密模块</strong></h4><blockquote>\n<p>Definition：</p>\n<p>AES：高级加密标准(Advanced Encryption Standard)是最常见的对称加密算法之一，微信小程序就是用合格加密算法。</p>\n</blockquote>\n<p>对称加密算法也就是加密和解密使用相同的密钥，具体的流程图如下图所示：</p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/pytest-1.png\" alt=\"pytest-1\"></p>\n<p>AES使用分组密码，分组密码也就是将明文分成一组一组的，每组的长度相等，每次加密一组数据，知道将整个明文都加密完成。在AES标准规范中，分组长度只能是128位，也就是说，每个分组16个字节（每个字节8位）。密钥的长度可以使用128位、192位、256位等。</p>\n<p><u>密钥的长度不等，推荐加密的轮数也不相等。</u></p>\n<p><strong>一般我们最常使用的就是AES-128，是密钥的长度为128位，加密轮数位10轮。</strong></p>\n<blockquote>\n<p>AES加解密的流程中包括的主要步骤：</p>\n</blockquote>\n<p>明文分组 、字节代换、行位移、列混淆、轮密钥加</p>\n<blockquote>\n<p>AES算法代码实现：</p>\n</blockquote>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br><span class=\"line\">36</span><br><span class=\"line\">37</span><br><span class=\"line\">38</span><br><span class=\"line\">39</span><br><span class=\"line\">40</span><br><span class=\"line\">41</span><br><span class=\"line\">42</span><br><span class=\"line\">43</span><br><span class=\"line\">44</span><br><span class=\"line\">45</span><br><span class=\"line\">46</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">from</span> Crypto.Cipher <span class=\"keyword\">import</span> AES</span><br><span class=\"line\"><span class=\"keyword\">from</span> binascii <span class=\"keyword\">import</span> b2a_hex, a2b_hex</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">prpcrypt</span>():</span></span><br><span class=\"line\">  </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">__init__</span>(<span class=\"params\">self, key</span>):</span></span><br><span class=\"line\">\t\tself.key = key.encode(<span class=\"string\">&#x27;utf-8&#x27;</span>) self.mode = AES.MODE_CBC</span><br><span class=\"line\">\t\t<span class=\"comment\"># 加密函数，如果 text 不是 16 的倍数【加密文本 text 必须为 16 的倍数!】，那就补足为 16 的 倍数</span></span><br><span class=\"line\">    </span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">encrypt</span>(<span class=\"params\">self, text</span>):</span></span><br><span class=\"line\">\t\ttext = text.encode(<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">\t\t<span class=\"comment\"># 创建一个新的 AES 密码</span></span><br><span class=\"line\">\t\t<span class=\"comment\"># key 为对称加密中使用的密钥，mode_CBC 是 AES 五种加密模式中的密码分组链接模式 </span></span><br><span class=\"line\">    cryptor = AES.new(self.key, self.mode, self.key)</span><br><span class=\"line\"><span class=\"comment\"># 这里密钥 key 长度必须为 16(AES-128)、24(AES-192)、或 32(AES-256)Bytes 长</span></span><br><span class=\"line\"><span class=\"comment\">#度.目前 AES-128 足够用 length = 16</span></span><br><span class=\"line\">\t\tcount = <span class=\"built_in\">len</span>(text)</span><br><span class=\"line\">\t\t<span class=\"keyword\">if</span> (count % length != <span class=\"number\">0</span>):</span><br><span class=\"line\">\t\t\tadd = length - (count % length) </span><br><span class=\"line\">    <span class=\"keyword\">else</span>:</span><br><span class=\"line\">\t\t\tadd = <span class=\"number\">0</span></span><br><span class=\"line\">\t\ttext = text + (<span class=\"string\">&#x27;\\0&#x27;</span> * add).encode(<span class=\"string\">&#x27;utf-8&#x27;</span>)</span><br><span class=\"line\">\t\t<span class=\"comment\"># 真正的加密操作，使用初始化时的密钥加密数据</span></span><br><span class=\"line\">\t\tself.ciphertext = cryptor.encrypt(text)</span><br><span class=\"line\"><span class=\"comment\"># 因为 AES 加密时候得到的字符串不一定是 ascii 字符集的，输出到终端或者保存时候可能存</span></span><br><span class=\"line\">在问题</span><br><span class=\"line\"><span class=\"comment\"># 所以这里统一把加密后的字符串转化为 16 进制字符串 </span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> b2a_hex(self.ciphertext)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"comment\"># 解密后，去掉补足的空格用 strip() 去掉 </span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">decrypt</span>(<span class=\"params\">self, text</span>):</span></span><br><span class=\"line\">\t\tcryptor = AES.new(self.key, self.mode, self.key)</span><br><span class=\"line\">    plain_text = cryptor.decrypt(a2b_hex(text))</span><br><span class=\"line\"><span class=\"comment\"># return plain_text.rstrip(&#x27;\\0&#x27;)</span></span><br><span class=\"line\">\t\t<span class=\"keyword\">return</span> <span class=\"built_in\">bytes</span>.decode(plain_text).rstrip(<span class=\"string\">&#x27;\\0&#x27;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\"></span><br><span class=\"line\">pc = prpcrypt(<span class=\"string\">&#x27;keyskeyskeyskeys&#x27;</span>) <span class=\"comment\"># 初始化密钥</span></span><br><span class=\"line\">e = pc.encrypt(<span class=\"string\">&quot;0123456789ABCDEF&quot;</span>) <span class=\"comment\"># 对输入明文进行加密 </span></span><br><span class=\"line\">d = pc.decrypt(e) <span class=\"comment\"># 解密密文操作</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(e, d)</span><br><span class=\"line\">e = pc.encrypt(<span class=\"string\">&quot;00000000000000000000000000&quot;</span>)</span><br><span class=\"line\">d = pc.decrypt(e)</span><br><span class=\"line\"><span class=\"built_in\">print</span>(e, d)</span><br></pre></td></tr></table></figure>\n<p>下面我们来看下代码的运行结果：</p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/pytest-2.png\" alt=\"pytest-2\"></p>\n<h4 id=\"python-unittest-单元测试模块\"><a href=\"#python-unittest-单元测试模块\" class=\"headerlink\" title=\"python unittest 单元测试模块\"></a><strong>python unittest 单元测试模块</strong></h4><blockquote>\n<p>unittest 是 python 的一个基础常用的单元测试框架，</p>\n</blockquote>\n<p>便于我们编写测试用例以及测试执行。其中中最核心的四个概念是:</p>\n<p>test case</p>\n\n<p>test suite</p>\n\n<p>test runner</p>\n\n<p>test fixture</p>\n\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/pytest-3.png\" alt=\"pytest-3\"></p>\n<p><u>unittest 进行单元测试的流程：</u></p>\n<ol>\n<li>写好 TestCase，然后由 TestLoader 加载 TestCase 到 TestSuite</li>\n<li>然后由 TextTestRunner 来运行 TestSuite，运行的结果保存在 TextTestResult 中</li>\n<li>我们通过命令行或者 unittest.main()执行时，main 会调用 TextTestRunner 中的 run 来执行，或者我们可以直接通过 TextTestRunner 来执行用 例。</li>\n</ol>\n<p>一个 class 继承 unittest.TestCase 即是一个 TestCase，其中以 test 开头的方法 在 load 时被加载为一个真正的 TestCase。</p>\n<p>在 TestRunner 中的 verbosity 参数可以控制执行结果的输出，0 是简单报告、1 是一般报告、2 是详细报告。</p>\n<p>下面完成一次基本的 unittest 单元测试：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># 准备好待测函数</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">add</span>(<span class=\"params\">a, b</span>):</span> </span><br><span class=\"line\">  <span class=\"keyword\">return</span> a+b</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">minus</span>(<span class=\"params\">a, b</span>):</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> a-b</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">multi</span>(<span class=\"params\">a, b</span>):</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> a*b</span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">divide</span>(<span class=\"params\">a, b</span>):</span></span><br><span class=\"line\">  <span class=\"keyword\">return</span> a/b</span><br></pre></td></tr></table></figure>\n\n<p>然后写出待测函数的测试方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br><span class=\"line\">31</span><br><span class=\"line\">32</span><br><span class=\"line\">33</span><br><span class=\"line\">34</span><br><span class=\"line\">35</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> unittest</span><br><span class=\"line\"><span class=\"keyword\">from</span> mathfunc <span class=\"keyword\">import</span> *</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"class\"><span class=\"keyword\">class</span> <span class=\"title\">TestMathFunc</span>(<span class=\"params\">unittest.TestCase</span>):</span> </span><br><span class=\"line\">  <span class=\"string\">&quot;&quot;&quot;Test mathfuc.py&quot;&quot;&quot;</span></span><br><span class=\"line\">\t<span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">setUp</span>(<span class=\"params\">cls</span>):</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;do something before test.Prepare environment.&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">tearDown</span>(<span class=\"params\">cls</span>):</span></span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;do something after test.Clean up.&quot;</span>)</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_add</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;&quot;&quot;Test method add(a, b)&quot;&quot;&quot;</span> </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;add&quot;</span>)</span><br><span class=\"line\">\t\tself.assertEqual(<span class=\"number\">3</span>, add(<span class=\"number\">1</span>, <span class=\"number\">2</span>)) </span><br><span class=\"line\">    self.assertNotEqual(<span class=\"number\">3</span>, add(<span class=\"number\">2</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_minus</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;&quot;&quot;Test method minus(a, b)&quot;&quot;&quot;</span> </span><br><span class=\"line\">\t\t<span class=\"built_in\">print</span>(<span class=\"string\">&quot;minus&quot;</span>) </span><br><span class=\"line\">    self.assertEqual(<span class=\"number\">1</span>, minus(<span class=\"number\">3</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_multi</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;&quot;&quot;Test method multi(a, b)&quot;&quot;&quot;</span> </span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;multi&quot;</span>) </span><br><span class=\"line\">    self.assertEqual(<span class=\"number\">6</span>, multi(<span class=\"number\">2</span>, <span class=\"number\">3</span>))</span><br><span class=\"line\"></span><br><span class=\"line\">  <span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">test_divide</span>(<span class=\"params\">self</span>):</span></span><br><span class=\"line\">\t\t<span class=\"string\">&quot;&quot;&quot;Test method divide(a, b)&quot;&quot;&quot;</span></span><br><span class=\"line\">    <span class=\"built_in\">print</span>(<span class=\"string\">&quot;divide&quot;</span>)</span><br><span class=\"line\">\t\tself.assertEqual(<span class=\"number\">2</span>, divide(<span class=\"number\">6</span>, <span class=\"number\">3</span>)) </span><br><span class=\"line\">    self.assertEqual(<span class=\"number\">2.5</span>, divide(<span class=\"number\">5</span>, <span class=\"number\">2</span>))</span><br><span class=\"line\">    </span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>: </span><br><span class=\"line\">  unittest.main()</span><br></pre></td></tr></table></figure>\n\n<p>以上代码已经可以完成一次简单的<strong>单元测试</strong>了，但是还无法按照指定的顺序 来执行测试用例。因此我们这里使用 suite 来控制每个 case 的先后执行顺序：同 时，如果同时有多个测试文件，我们也可以通过 suite 来控制他们进行一起执行。</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"comment\"># -*- coding: utf-8 -*-</span></span><br><span class=\"line\"><span class=\"keyword\">import</span> unittest</span><br><span class=\"line\"><span class=\"keyword\">from</span> test_mathfunc <span class=\"keyword\">import</span> TestMathFunc </span><br><span class=\"line\"><span class=\"keyword\">from</span> HTMLTestRunner <span class=\"keyword\">import</span> HTMLTestRunner</span><br><span class=\"line\"></span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>:</span><br><span class=\"line\">suite = unittest.TestSuite() suite.addTests(unittest.TestLoader().loadTestsFromTestCase(TestMathFunc)) </span><br><span class=\"line\"><span class=\"keyword\">with</span> <span class=\"built_in\">open</span>(<span class=\"string\">&#x27;UnittestTextReport.txt&#x27;</span>, <span class=\"string\">&#x27;a&#x27;</span>) <span class=\"keyword\">as</span> f:</span><br><span class=\"line\">runner = unittest.TextTestRunner(stream=f, verbosity=<span class=\"number\">2</span>)</span><br><span class=\"line\">runner.run(suite)</span><br></pre></td></tr></table></figure>\n\n<p>然后我们试着运行，可以看到运行结果如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/pytest-4.png\" alt=\"pytest-4\"></p>\n<blockquote>\n<p>如果出现有 ok 的记号，则表示本次测试的结果为成功;如果出现 fail，则表 示测试结果出现问题，这时我们就需要寻找问题，看看测试结果问题在哪里。</p>\n</blockquote>\n<h4 id=\"python-assert-断言\"><a href=\"#python-assert-断言\" class=\"headerlink\" title=\"python assert 断言\"></a><strong>python assert 断言</strong></h4><p>对于断言，官方有一段官方的解释:Assert statements are a convenient way toinsert debugging assertions into a program，其作用就是类似于我们 debug 的工具，</p>\n<p>一般的用法是:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">assert</span> condition</span><br></pre></td></tr></table></figure>\n\n<p>用来让程序测试这个 condition，如果 condition 为 false，那么 raise 一个AssertionError 出来。逻辑上等同于:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">if</span> <span class=\"keyword\">not</span> condition:</span><br><span class=\"line\">    <span class=\"keyword\">raise</span> AssertionError()</span><br></pre></td></tr></table></figure>\n\n<p>我们来简单做一个小小的断言测试:</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">assert</span> <span class=\"number\">1</span>==<span class=\"number\">2</span>, <span class=\"string\">&quot;以下结果出现断言&quot;</span></span><br></pre></td></tr></table></figure>\n\n<p>结果如下：</p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/pytest-5.png\" alt=\"pytest-5\"></p>\n<h4 id=\"python-pyserial-串口模块\"><a href=\"#python-pyserial-串口模块\" class=\"headerlink\" title=\"python pyserial 串口模块\"></a><strong>python pyserial 串口模块</strong></h4><p>pyserial 模块封装了对串口的访问。在支持的平台上有统一的接口，通过 python属性访问串口设置。支持不同的字节大小、停止位、校验位和流控设置。 </p>\n<p>在串口的配置中，有以下一些比较重要的属性需要我们了解：波特率、数据位、停止位、校验位、字节大小、读写超时设置等。 下面我们来看下对于串口的设置方法：</p>\n<figure class=\"highlight python\"><table><tr><td class=\"gutter\"><pre><span class=\"line\">1</span><br><span class=\"line\">2</span><br><span class=\"line\">3</span><br><span class=\"line\">4</span><br><span class=\"line\">5</span><br><span class=\"line\">6</span><br><span class=\"line\">7</span><br><span class=\"line\">8</span><br><span class=\"line\">9</span><br><span class=\"line\">10</span><br><span class=\"line\">11</span><br><span class=\"line\">12</span><br><span class=\"line\">13</span><br><span class=\"line\">14</span><br><span class=\"line\">15</span><br><span class=\"line\">16</span><br><span class=\"line\">17</span><br><span class=\"line\">18</span><br><span class=\"line\">19</span><br><span class=\"line\">20</span><br><span class=\"line\">21</span><br><span class=\"line\">22</span><br><span class=\"line\">23</span><br><span class=\"line\">24</span><br><span class=\"line\">25</span><br><span class=\"line\">26</span><br><span class=\"line\">27</span><br><span class=\"line\">28</span><br><span class=\"line\">29</span><br><span class=\"line\">30</span><br></pre></td><td class=\"code\"><pre><span class=\"line\"><span class=\"keyword\">import</span> sys</span><br><span class=\"line\"><span class=\"keyword\">import</span> glob</span><br><span class=\"line\"><span class=\"keyword\">import</span> time</span><br><span class=\"line\"><span class=\"keyword\">import</span> serial</span><br><span class=\"line\"><span class=\"keyword\">import</span> serial.tools.list_ports</span><br><span class=\"line\"><span class=\"number\">8</span></span><br><span class=\"line\"><span class=\"function\"><span class=\"keyword\">def</span> <span class=\"title\">serial_ports</span>():</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot; Lists serial port names</span></span><br><span class=\"line\"><span class=\"string\">       :raises EnvironmentError:</span></span><br><span class=\"line\"><span class=\"string\">          On unsupported or unknown platforms</span></span><br><span class=\"line\"><span class=\"string\">       :returns:</span></span><br><span class=\"line\"><span class=\"string\">          A list of the serial ports available on the system</span></span><br><span class=\"line\"><span class=\"string\">&quot;&quot;&quot;</span></span><br><span class=\"line\"><span class=\"comment\"># 如果是 windows 平台的系统，对应的串口号形式 if sys.platform.startswith(&#x27;win&#x27;):</span></span><br><span class=\"line\">ports = [<span class=\"string\">&#x27;COM%s&#x27;</span> % (i + <span class=\"number\">1</span>) <span class=\"keyword\">for</span> i <span class=\"keyword\">in</span> <span class=\"built_in\">range</span>(<span class=\"number\">256</span>)]</span><br><span class=\"line\"><span class=\"comment\"># 如果是 Linux 平台的系统，对应的串口号形式</span></span><br><span class=\"line\"><span class=\"keyword\">elif</span> sys.platform.startswith(<span class=\"string\">&#x27;linux&#x27;</span>) <span class=\"keyword\">or</span> sys.platform.startswith(<span class=\"string\">&#x27;cygwin&#x27;</span>):</span><br><span class=\"line\"><span class=\"comment\"># this excludes your current terminal &quot;/dev/tty&quot;</span></span><br><span class=\"line\">ports = glob.glob(<span class=\"string\">&#x27;/dev/tty[A-Za-z]*&#x27;</span>) <span class=\"comment\"># 如果是 OS X 的系统，对应的串口号形式</span></span><br><span class=\"line\"><span class=\"keyword\">elif</span> sys.platform.startswith(<span class=\"string\">&#x27;darwin&#x27;</span>):</span><br><span class=\"line\">ports = glob.glob(<span class=\"string\">&#x27;/dev/tty.*&#x27;</span>) <span class=\"keyword\">else</span>:</span><br><span class=\"line\"><span class=\"keyword\">raise</span> EnvironmentError(<span class=\"string\">&#x27;Unsupported platform&#x27;</span>) result = []</span><br><span class=\"line\"><span class=\"comment\"># 可以通过 Serial 函数对每一个串口进行控制其操作 for port in ports:</span></span><br><span class=\"line\"><span class=\"keyword\">try</span>:</span><br><span class=\"line\">s = serial.Serial(port) s.close() result.append(port)</span><br><span class=\"line\"><span class=\"keyword\">except</span> (OSError, serial.SerialException): <span class=\"keyword\">pass</span></span><br><span class=\"line\"><span class=\"keyword\">return</span> result</span><br><span class=\"line\"><span class=\"comment\"># 这句命令可以在终端打印出所有的串口设备</span></span><br><span class=\"line\"><span class=\"built_in\">print</span>(<span class=\"built_in\">list</span>(serial.tools.list_ports.comports()))</span><br><span class=\"line\"><span class=\"keyword\">if</span> __name__ == <span class=\"string\">&#x27;__main__&#x27;</span>: <span class=\"built_in\">print</span>(serial_ports())</span><br></pre></td></tr></table></figure>\n\n<p>下面看下我电脑上打印出来的相关串口号，可以看到一共有 3 个，表示的是每个 串口分配到的地址：</p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/pytest-6.png\" alt=\"pytest-6\"></p>\n"},{"layout":"post","title":"理解区分IaaS、SaaS、PaaS的含义和区别","date":"2020-06-10T12:00:00.000Z","feature":true,"cover":"http://csuzhang.info/photos/SaaS1.jpg","_content":"\n\n相信你一定听说过IaaS、SaaS、PaaS等概念，这些都是云计算中的三个高大上的概念，但这几个术语其实并不好理解。不过，我们可以利用吃披萨🍕来给大家类比这几个概念的理解。\n\n### 类比披萨店吃披萨\n\n首先，一个吃货怎样才能吃到披萨呢？有以下几种方式：\n\n1. 在家自己做\n\n但是你要准备的东西很多，材料、工具、烤箱......还需要经过发面、做面团、进烤箱等工序才能完成\n\n2. 从披萨店买做好的披萨\n\n你只需要去披萨店买成品披萨，回家烘焙号了就可以在自己的餐桌上吃，和在家自己做不一样，你只需要一个pizza提供商\n\n3. 打电话叫外卖\n\n打个电话把披萨叫到家中，pizza就送到家中，但你需要自己准备桌椅、苏打水等\n\n4. 直接去披萨店吃\n\n你什么都不需要准备，连餐桌都是pizza店的\n\n下图就是我们可以吃到披萨的总结：\n\n![SaaS1](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/SaaS1.jpg)\n\n### 企业端技术分层\n\n现在我们从披萨店变成一家超大型技术公司，根本不需要别人为我们提供服务，你拥有基础设施、应用等等一切，可以分为三层：基础设施infrastructure、平台platform、应用application\n\n![SaaS2](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/SaaS2.jpg)\n\n这张图其实就是云计算的三个分层：\n基础设施在最底层、平台在中间层、软件应用在顶层，分别是：Infrastructure-as-a-Service(IaaS)，Platform-as-a-Service(PaaS)，Software-as-a-Service(SaaS)，别的一些“软的”层可以在这些层的基础上添加。\n\n1. 如果你的公司什么都有，现在所处的状态叫本地部署，就想自己在家做披萨一样。你需要购买服务器以及其他硬件设备来控制本地应用，让你的业务代码运行起来，这就叫本地部署。\n\n2. 假如有天boss想明白了，只是为了吃到pizza，没必要所有流程都自己完成。于是，他准备考虑一家云服务提供商，这个云服务提供商能提供哪些服务呢？\n","source":"_posts/2020-6-10-SaaS.md","raw":"---\nlayout: post\ntitle:  \"理解区分IaaS、SaaS、PaaS的含义和区别\"\ndate: 2020-6-10 20:00:00\ncategories: thinking\ntags: thinking\nfeature: true\ncover: >-\n  http://csuzhang.info/photos/SaaS1.jpg\n---\n\n\n相信你一定听说过IaaS、SaaS、PaaS等概念，这些都是云计算中的三个高大上的概念，但这几个术语其实并不好理解。不过，我们可以利用吃披萨🍕来给大家类比这几个概念的理解。\n\n### 类比披萨店吃披萨\n\n首先，一个吃货怎样才能吃到披萨呢？有以下几种方式：\n\n1. 在家自己做\n\n但是你要准备的东西很多，材料、工具、烤箱......还需要经过发面、做面团、进烤箱等工序才能完成\n\n2. 从披萨店买做好的披萨\n\n你只需要去披萨店买成品披萨，回家烘焙号了就可以在自己的餐桌上吃，和在家自己做不一样，你只需要一个pizza提供商\n\n3. 打电话叫外卖\n\n打个电话把披萨叫到家中，pizza就送到家中，但你需要自己准备桌椅、苏打水等\n\n4. 直接去披萨店吃\n\n你什么都不需要准备，连餐桌都是pizza店的\n\n下图就是我们可以吃到披萨的总结：\n\n![SaaS1](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/SaaS1.jpg)\n\n### 企业端技术分层\n\n现在我们从披萨店变成一家超大型技术公司，根本不需要别人为我们提供服务，你拥有基础设施、应用等等一切，可以分为三层：基础设施infrastructure、平台platform、应用application\n\n![SaaS2](https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/SaaS2.jpg)\n\n这张图其实就是云计算的三个分层：\n基础设施在最底层、平台在中间层、软件应用在顶层，分别是：Infrastructure-as-a-Service(IaaS)，Platform-as-a-Service(PaaS)，Software-as-a-Service(SaaS)，别的一些“软的”层可以在这些层的基础上添加。\n\n1. 如果你的公司什么都有，现在所处的状态叫本地部署，就想自己在家做披萨一样。你需要购买服务器以及其他硬件设备来控制本地应用，让你的业务代码运行起来，这就叫本地部署。\n\n2. 假如有天boss想明白了，只是为了吃到pizza，没必要所有流程都自己完成。于是，他准备考虑一家云服务提供商，这个云服务提供商能提供哪些服务呢？\n","slug":"2020-6-10-SaaS","published":1,"updated":"2022-01-08T17:44:38.199Z","_id":"cky61ey4n0025aqoxawwy3inv","comments":1,"photos":[],"link":"","content":"<p>相信你一定听说过IaaS、SaaS、PaaS等概念，这些都是云计算中的三个高大上的概念，但这几个术语其实并不好理解。不过，我们可以利用吃披萨🍕来给大家类比这几个概念的理解。</p>\n<h3 id=\"类比披萨店吃披萨\"><a href=\"#类比披萨店吃披萨\" class=\"headerlink\" title=\"类比披萨店吃披萨\"></a>类比披萨店吃披萨</h3><p>首先，一个吃货怎样才能吃到披萨呢？有以下几种方式：</p>\n<ol>\n<li>在家自己做</li>\n</ol>\n<p>但是你要准备的东西很多，材料、工具、烤箱……还需要经过发面、做面团、进烤箱等工序才能完成</p>\n<ol start=\"2\">\n<li>从披萨店买做好的披萨</li>\n</ol>\n<p>你只需要去披萨店买成品披萨，回家烘焙号了就可以在自己的餐桌上吃，和在家自己做不一样，你只需要一个pizza提供商</p>\n<ol start=\"3\">\n<li>打电话叫外卖</li>\n</ol>\n<p>打个电话把披萨叫到家中，pizza就送到家中，但你需要自己准备桌椅、苏打水等</p>\n<ol start=\"4\">\n<li>直接去披萨店吃</li>\n</ol>\n<p>你什么都不需要准备，连餐桌都是pizza店的</p>\n<p>下图就是我们可以吃到披萨的总结：</p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/SaaS1.jpg\" alt=\"SaaS1\"></p>\n<h3 id=\"企业端技术分层\"><a href=\"#企业端技术分层\" class=\"headerlink\" title=\"企业端技术分层\"></a>企业端技术分层</h3><p>现在我们从披萨店变成一家超大型技术公司，根本不需要别人为我们提供服务，你拥有基础设施、应用等等一切，可以分为三层：基础设施infrastructure、平台platform、应用application</p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/SaaS2.jpg\" alt=\"SaaS2\"></p>\n<p>这张图其实就是云计算的三个分层：<br>基础设施在最底层、平台在中间层、软件应用在顶层，分别是：Infrastructure-as-a-Service(IaaS)，Platform-as-a-Service(PaaS)，Software-as-a-Service(SaaS)，别的一些“软的”层可以在这些层的基础上添加。</p>\n<ol>\n<li><p>如果你的公司什么都有，现在所处的状态叫本地部署，就想自己在家做披萨一样。你需要购买服务器以及其他硬件设备来控制本地应用，让你的业务代码运行起来，这就叫本地部署。</p>\n</li>\n<li><p>假如有天boss想明白了，只是为了吃到pizza，没必要所有流程都自己完成。于是，他准备考虑一家云服务提供商，这个云服务提供商能提供哪些服务呢？</p>\n</li>\n</ol>\n","site":{"data":{}},"excerpt":"","more":"<p>相信你一定听说过IaaS、SaaS、PaaS等概念，这些都是云计算中的三个高大上的概念，但这几个术语其实并不好理解。不过，我们可以利用吃披萨🍕来给大家类比这几个概念的理解。</p>\n<h3 id=\"类比披萨店吃披萨\"><a href=\"#类比披萨店吃披萨\" class=\"headerlink\" title=\"类比披萨店吃披萨\"></a>类比披萨店吃披萨</h3><p>首先，一个吃货怎样才能吃到披萨呢？有以下几种方式：</p>\n<ol>\n<li>在家自己做</li>\n</ol>\n<p>但是你要准备的东西很多，材料、工具、烤箱……还需要经过发面、做面团、进烤箱等工序才能完成</p>\n<ol start=\"2\">\n<li>从披萨店买做好的披萨</li>\n</ol>\n<p>你只需要去披萨店买成品披萨，回家烘焙号了就可以在自己的餐桌上吃，和在家自己做不一样，你只需要一个pizza提供商</p>\n<ol start=\"3\">\n<li>打电话叫外卖</li>\n</ol>\n<p>打个电话把披萨叫到家中，pizza就送到家中，但你需要自己准备桌椅、苏打水等</p>\n<ol start=\"4\">\n<li>直接去披萨店吃</li>\n</ol>\n<p>你什么都不需要准备，连餐桌都是pizza店的</p>\n<p>下图就是我们可以吃到披萨的总结：</p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/SaaS1.jpg\" alt=\"SaaS1\"></p>\n<h3 id=\"企业端技术分层\"><a href=\"#企业端技术分层\" class=\"headerlink\" title=\"企业端技术分层\"></a>企业端技术分层</h3><p>现在我们从披萨店变成一家超大型技术公司，根本不需要别人为我们提供服务，你拥有基础设施、应用等等一切，可以分为三层：基础设施infrastructure、平台platform、应用application</p>\n<p><img src=\"https://raw.githubusercontent.com/hanyuancheung/hanyuancheung.github.io/main/source/photos/SaaS2.jpg\" alt=\"SaaS2\"></p>\n<p>这张图其实就是云计算的三个分层：<br>基础设施在最底层、平台在中间层、软件应用在顶层，分别是：Infrastructure-as-a-Service(IaaS)，Platform-as-a-Service(PaaS)，Software-as-a-Service(SaaS)，别的一些“软的”层可以在这些层的基础上添加。</p>\n<ol>\n<li><p>如果你的公司什么都有，现在所处的状态叫本地部署，就想自己在家做披萨一样。你需要购买服务器以及其他硬件设备来控制本地应用，让你的业务代码运行起来，这就叫本地部署。</p>\n</li>\n<li><p>假如有天boss想明白了，只是为了吃到pizza，没必要所有流程都自己完成。于是，他准备考虑一家云服务提供商，这个云服务提供商能提供哪些服务呢？</p>\n</li>\n</ol>\n"}],"PostAsset":[],"PostCategory":[{"post_id":"cky61ey3y0000aqoxe3smaini","category_id":"cky61ey400002aqoxbizd2imp","_id":"cky61ey45000baqox67633wcz"},{"post_id":"cky61ey3z0001aqoxbil57iw4","category_id":"cky61ey430007aqox5t5lguit","_id":"cky61ey47000gaqoxcuci4gh0"},{"post_id":"cky61ey45000eaqox0g5l09gv","category_id":"cky61ey45000caqox2bl0fr25","_id":"cky61ey4a000maqox91kj963k"},{"post_id":"cky61ey410004aqox2x0tc4jw","category_id":"cky61ey45000caqox2bl0fr25","_id":"cky61ey4b000qaqoxhq689p0v"},{"post_id":"cky61ey46000faqoxd0725i6x","category_id":"cky61ey400002aqoxbizd2imp","_id":"cky61ey4c000saqoxamun1plx"},{"post_id":"cky61ey49000jaqox8njsamu6","category_id":"cky61ey45000caqox2bl0fr25","_id":"cky61ey4c000vaqox7ogiaqdc"},{"post_id":"cky61ey420005aqoxhmz9ev8d","category_id":"cky61ey45000caqox2bl0fr25","_id":"cky61ey4d000yaqoxebor26c2"},{"post_id":"cky61ey4a000laqoxa9ik6a3w","category_id":"cky61ey400002aqoxbizd2imp","_id":"cky61ey4d0010aqox0uo4dajo"},{"post_id":"cky61ey420006aqoxa2r4fd4o","category_id":"cky61ey4b000oaqox1srtec4t","_id":"cky61ey4e0012aqox4aw766sa"},{"post_id":"cky61ey430009aqoxanadgyzn","category_id":"cky61ey45000caqox2bl0fr25","_id":"cky61ey4e0014aqox1ywjhte1"},{"post_id":"cky61ey44000aaqoxem0b4u1h","category_id":"cky61ey4b000oaqox1srtec4t","_id":"cky61ey4f0018aqoxeg3k4zxg"},{"post_id":"cky61ey4m0021aqoxf9oshbo2","category_id":"cky61ey4b000oaqox1srtec4t","_id":"cky61ey4n0024aqoxejfo2ssu"},{"post_id":"cky61ey4n0025aqoxawwy3inv","category_id":"cky61ey400002aqoxbizd2imp","_id":"cky61ey4o0027aqox054i270s"}],"PostTag":[{"post_id":"cky61ey3y0000aqoxe3smaini","tag_id":"cky61ey410003aqox61y1fedn","_id":"cky61ey4a000kaqoxhi8qfgow"},{"post_id":"cky61ey3y0000aqoxe3smaini","tag_id":"cky61ey430008aqox4afi0z4d","_id":"cky61ey4a000naqox75az8b92"},{"post_id":"cky61ey3y0000aqoxe3smaini","tag_id":"cky61ey45000daqoxe6qe88vz","_id":"cky61ey4b000raqoxc2rje7q6"},{"post_id":"cky61ey46000faqoxd0725i6x","tag_id":"cky61ey45000daqoxe6qe88vz","_id":"cky61ey4c000taqox6v40czx3"},{"post_id":"cky61ey4a000laqoxa9ik6a3w","tag_id":"cky61ey45000daqoxe6qe88vz","_id":"cky61ey4d000xaqox432jaj0e"},{"post_id":"cky61ey3z0001aqoxbil57iw4","tag_id":"cky61ey48000iaqoxh6su0id4","_id":"cky61ey4e0013aqoxc0217z9x"},{"post_id":"cky61ey3z0001aqoxbil57iw4","tag_id":"cky61ey4b000paqoxfguo57x6","_id":"cky61ey4e0015aqoxc4pnaczt"},{"post_id":"cky61ey3z0001aqoxbil57iw4","tag_id":"cky61ey4d000waqox9gileznt","_id":"cky61ey4f0017aqox1nmlalz2"},{"post_id":"cky61ey410004aqox2x0tc4jw","tag_id":"cky61ey4e0011aqox6ik52zwt","_id":"cky61ey4f001aaqoxd5yjdn8c"},{"post_id":"cky61ey410004aqox2x0tc4jw","tag_id":"cky61ey4e0016aqox9isi0vwa","_id":"cky61ey4f001baqoxciod5nyy"},{"post_id":"cky61ey420005aqoxhmz9ev8d","tag_id":"cky61ey4f0019aqoxhrg5235g","_id":"cky61ey4h001faqox0einciip"},{"post_id":"cky61ey420005aqoxhmz9ev8d","tag_id":"cky61ey4e0016aqox9isi0vwa","_id":"cky61ey4h001gaqoxeu6y3rbs"},{"post_id":"cky61ey420005aqoxhmz9ev8d","tag_id":"cky61ey4g001daqoxfp7z9qe1","_id":"cky61ey4i001iaqox65h73ysa"},{"post_id":"cky61ey420006aqoxa2r4fd4o","tag_id":"cky61ey4e0011aqox6ik52zwt","_id":"cky61ey4i001kaqox57w0dkvx"},{"post_id":"cky61ey420006aqoxa2r4fd4o","tag_id":"cky61ey4i001haqoxbgmye1gg","_id":"cky61ey4i001laqox5cwpfamo"},{"post_id":"cky61ey430009aqoxanadgyzn","tag_id":"cky61ey4e0011aqox6ik52zwt","_id":"cky61ey4j001oaqoxakb1cpz0"},{"post_id":"cky61ey430009aqoxanadgyzn","tag_id":"cky61ey4e0016aqox9isi0vwa","_id":"cky61ey4j001paqoxa210fub2"},{"post_id":"cky61ey44000aaqoxem0b4u1h","tag_id":"cky61ey4e0011aqox6ik52zwt","_id":"cky61ey4k001taqox6deb2fyo"},{"post_id":"cky61ey44000aaqoxem0b4u1h","tag_id":"cky61ey4j001qaqoxcthcd4ap","_id":"cky61ey4k001uaqoxbxd0dko0"},{"post_id":"cky61ey44000aaqoxem0b4u1h","tag_id":"cky61ey4i001haqoxbgmye1gg","_id":"cky61ey4k001waqoxehe955r6"},{"post_id":"cky61ey45000eaqox0g5l09gv","tag_id":"cky61ey4e0011aqox6ik52zwt","_id":"cky61ey4l001yaqox1v9dc9y6"},{"post_id":"cky61ey45000eaqox0g5l09gv","tag_id":"cky61ey4e0016aqox9isi0vwa","_id":"cky61ey4l001zaqoxdhq1cgyz"},{"post_id":"cky61ey49000jaqox8njsamu6","tag_id":"cky61ey4e0011aqox6ik52zwt","_id":"cky61ey4l0020aqoxdpue7zi9"},{"post_id":"cky61ey4m0021aqoxf9oshbo2","tag_id":"cky61ey4e0011aqox6ik52zwt","_id":"cky61ey4n0022aqoxdytj0yj6"},{"post_id":"cky61ey4m0021aqoxf9oshbo2","tag_id":"cky61ey4i001haqoxbgmye1gg","_id":"cky61ey4n0023aqoxhy5w9y76"},{"post_id":"cky61ey4n0025aqoxawwy3inv","tag_id":"cky61ey45000daqoxe6qe88vz","_id":"cky61ey4o0026aqox7x79ailr"}],"Tag":[{"name":"Hackthon","_id":"cky61ey410003aqox61y1fedn"},{"name":"AI","_id":"cky61ey430008aqox4afi0z4d"},{"name":"thinking","_id":"cky61ey45000daqoxe6qe88vz"},{"name":"MR","_id":"cky61ey48000iaqoxh6su0id4"},{"name":"VR","_id":"cky61ey4b000paqoxfguo57x6"},{"name":"AR","_id":"cky61ey4d000waqox9gileznt"},{"name":"OS","_id":"cky61ey4e0011aqox6ik52zwt"},{"name":"Linux","_id":"cky61ey4e0016aqox9isi0vwa"},{"name":"OS :wq","_id":"cky61ey4f0019aqoxhrg5235g"},{"name":"Java","_id":"cky61ey4g001daqoxfp7z9qe1"},{"name":"Test","_id":"cky61ey4i001haqoxbgmye1gg"},{"name":"shell","_id":"cky61ey4j001qaqoxcthcd4ap"}]}}